<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="502" onload="init(evt)" viewBox="0 0 1200 502" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="502" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="485.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="485.00"> </text><svg id="frames" x="10" width="1180" total_samples="42807"><g><title>[unknown] (85 samples, 0.20%)</title><rect x="0.0023%" y="405" width="0.1986%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="85"/><text x="0.2523%" y="415.50"></text></g><g><title>[unknown] (85 samples, 0.20%)</title><rect x="0.0023%" y="389" width="0.1986%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="85"/><text x="0.2523%" y="399.50"></text></g><g><title>[unknown] (85 samples, 0.20%)</title><rect x="0.0023%" y="373" width="0.1986%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="85"/><text x="0.2523%" y="383.50"></text></g><g><title>[unknown] (85 samples, 0.20%)</title><rect x="0.0023%" y="357" width="0.1986%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="85"/><text x="0.2523%" y="367.50"></text></g><g><title>[unknown] (85 samples, 0.20%)</title><rect x="0.0023%" y="341" width="0.1986%" height="15" fill="rgb(208,68,35)" fg:x="1" fg:w="85"/><text x="0.2523%" y="351.50"></text></g><g><title>[unknown] (85 samples, 0.20%)</title><rect x="0.0023%" y="325" width="0.1986%" height="15" fill="rgb(232,128,0)" fg:x="1" fg:w="85"/><text x="0.2523%" y="335.50"></text></g><g><title>[unknown] (85 samples, 0.20%)</title><rect x="0.0023%" y="309" width="0.1986%" height="15" fill="rgb(207,160,47)" fg:x="1" fg:w="85"/><text x="0.2523%" y="319.50"></text></g><g><title>[unknown] (85 samples, 0.20%)</title><rect x="0.0023%" y="293" width="0.1986%" height="15" fill="rgb(228,23,34)" fg:x="1" fg:w="85"/><text x="0.2523%" y="303.50"></text></g><g><title>[unknown] (85 samples, 0.20%)</title><rect x="0.0023%" y="277" width="0.1986%" height="15" fill="rgb(218,30,26)" fg:x="1" fg:w="85"/><text x="0.2523%" y="287.50"></text></g><g><title>[unknown] (85 samples, 0.20%)</title><rect x="0.0023%" y="261" width="0.1986%" height="15" fill="rgb(220,122,19)" fg:x="1" fg:w="85"/><text x="0.2523%" y="271.50"></text></g><g><title>[unknown] (85 samples, 0.20%)</title><rect x="0.0023%" y="245" width="0.1986%" height="15" fill="rgb(250,228,42)" fg:x="1" fg:w="85"/><text x="0.2523%" y="255.50"></text></g><g><title>[unknown] (85 samples, 0.20%)</title><rect x="0.0023%" y="229" width="0.1986%" height="15" fill="rgb(240,193,28)" fg:x="1" fg:w="85"/><text x="0.2523%" y="239.50"></text></g><g><title>[unknown] (85 samples, 0.20%)</title><rect x="0.0023%" y="213" width="0.1986%" height="15" fill="rgb(216,20,37)" fg:x="1" fg:w="85"/><text x="0.2523%" y="223.50"></text></g><g><title>[unknown] (67 samples, 0.16%)</title><rect x="0.0444%" y="197" width="0.1565%" height="15" fill="rgb(206,188,39)" fg:x="19" fg:w="67"/><text x="0.2944%" y="207.50"></text></g><g><title>[unknown] (57 samples, 0.13%)</title><rect x="0.0677%" y="181" width="0.1332%" height="15" fill="rgb(217,207,13)" fg:x="29" fg:w="57"/><text x="0.3177%" y="191.50"></text></g><g><title>[unknown] (52 samples, 0.12%)</title><rect x="0.0794%" y="165" width="0.1215%" height="15" fill="rgb(231,73,38)" fg:x="34" fg:w="52"/><text x="0.3294%" y="175.50"></text></g><g><title>[unknown] (49 samples, 0.11%)</title><rect x="0.0864%" y="149" width="0.1145%" height="15" fill="rgb(225,20,46)" fg:x="37" fg:w="49"/><text x="0.3364%" y="159.50"></text></g><g><title>[unknown] (27 samples, 0.06%)</title><rect x="0.1378%" y="133" width="0.0631%" height="15" fill="rgb(210,31,41)" fg:x="59" fg:w="27"/><text x="0.3878%" y="143.50"></text></g><g><title>[unknown] (13 samples, 0.03%)</title><rect x="0.1705%" y="117" width="0.0304%" height="15" fill="rgb(221,200,47)" fg:x="73" fg:w="13"/><text x="0.4205%" y="127.50"></text></g><g><title>[unknown] (7 samples, 0.02%)</title><rect x="0.1845%" y="101" width="0.0164%" height="15" fill="rgb(226,26,5)" fg:x="79" fg:w="7"/><text x="0.4345%" y="111.50"></text></g><g><title>[unknown] (7 samples, 0.02%)</title><rect x="0.1845%" y="85" width="0.0164%" height="15" fill="rgb(249,33,26)" fg:x="79" fg:w="7"/><text x="0.4345%" y="95.50"></text></g><g><title>[unknown] (86 samples, 0.20%)</title><rect x="0.0023%" y="421" width="0.2009%" height="15" fill="rgb(235,183,28)" fg:x="1" fg:w="86"/><text x="0.2523%" y="431.50"></text></g><g><title>elvis-44079db3e (95 samples, 0.22%)</title><rect x="0.0000%" y="437" width="0.2219%" height="15" fill="rgb(221,5,38)" fg:x="0" fg:w="95"/><text x="0.2500%" y="447.50"></text></g><g><title>clone3 (7 samples, 0.02%)</title><rect x="0.2056%" y="421" width="0.0164%" height="15" fill="rgb(247,18,42)" fg:x="88" fg:w="7"/><text x="0.4556%" y="431.50"></text></g><g><title>[unknown] (7 samples, 0.02%)</title><rect x="0.2056%" y="405" width="0.0164%" height="15" fill="rgb(241,131,45)" fg:x="88" fg:w="7"/><text x="0.4556%" y="415.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="0.2079%" y="389" width="0.0140%" height="15" fill="rgb(249,31,29)" fg:x="89" fg:w="6"/><text x="0.4579%" y="399.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="0.2079%" y="373" width="0.0140%" height="15" fill="rgb(225,111,53)" fg:x="89" fg:w="6"/><text x="0.4579%" y="383.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="0.2079%" y="357" width="0.0140%" height="15" fill="rgb(238,160,17)" fg:x="89" fg:w="6"/><text x="0.4579%" y="367.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="0.2079%" y="341" width="0.0140%" height="15" fill="rgb(214,148,48)" fg:x="89" fg:w="6"/><text x="0.4579%" y="351.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="0.2079%" y="325" width="0.0140%" height="15" fill="rgb(232,36,49)" fg:x="89" fg:w="6"/><text x="0.4579%" y="335.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="0.2079%" y="309" width="0.0140%" height="15" fill="rgb(209,103,24)" fg:x="89" fg:w="6"/><text x="0.4579%" y="319.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="0.2079%" y="293" width="0.0140%" height="15" fill="rgb(229,88,8)" fg:x="89" fg:w="6"/><text x="0.4579%" y="303.50"></text></g><g><title>perf-exec (6 samples, 0.01%)</title><rect x="0.2219%" y="437" width="0.0140%" height="15" fill="rgb(213,181,19)" fg:x="95" fg:w="6"/><text x="0.4719%" y="447.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="0.2219%" y="421" width="0.0140%" height="15" fill="rgb(254,191,54)" fg:x="95" fg:w="6"/><text x="0.4719%" y="431.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="0.2219%" y="405" width="0.0140%" height="15" fill="rgb(241,83,37)" fg:x="95" fg:w="6"/><text x="0.4719%" y="415.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="0.2219%" y="389" width="0.0140%" height="15" fill="rgb(233,36,39)" fg:x="95" fg:w="6"/><text x="0.4719%" y="399.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="0.2219%" y="373" width="0.0140%" height="15" fill="rgb(226,3,54)" fg:x="95" fg:w="6"/><text x="0.4719%" y="383.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="0.2219%" y="357" width="0.0140%" height="15" fill="rgb(245,192,40)" fg:x="95" fg:w="6"/><text x="0.4719%" y="367.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="0.2219%" y="341" width="0.0140%" height="15" fill="rgb(238,167,29)" fg:x="95" fg:w="6"/><text x="0.4719%" y="351.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="0.2219%" y="325" width="0.0140%" height="15" fill="rgb(232,182,51)" fg:x="95" fg:w="6"/><text x="0.4719%" y="335.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="0.2219%" y="309" width="0.0140%" height="15" fill="rgb(231,60,39)" fg:x="95" fg:w="6"/><text x="0.4719%" y="319.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="0.2219%" y="293" width="0.0140%" height="15" fill="rgb(208,69,12)" fg:x="95" fg:w="6"/><text x="0.4719%" y="303.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="0.2219%" y="277" width="0.0140%" height="15" fill="rgb(235,93,37)" fg:x="95" fg:w="6"/><text x="0.4719%" y="287.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="0.2219%" y="261" width="0.0140%" height="15" fill="rgb(213,116,39)" fg:x="95" fg:w="6"/><text x="0.4719%" y="271.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="0.2219%" y="245" width="0.0140%" height="15" fill="rgb(222,207,29)" fg:x="95" fg:w="6"/><text x="0.4719%" y="255.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="0.2219%" y="229" width="0.0140%" height="15" fill="rgb(206,96,30)" fg:x="95" fg:w="6"/><text x="0.4719%" y="239.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="0.2219%" y="213" width="0.0140%" height="15" fill="rgb(218,138,4)" fg:x="95" fg:w="6"/><text x="0.4719%" y="223.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="0.2219%" y="197" width="0.0140%" height="15" fill="rgb(250,191,14)" fg:x="95" fg:w="6"/><text x="0.4719%" y="207.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="0.2219%" y="181" width="0.0140%" height="15" fill="rgb(239,60,40)" fg:x="95" fg:w="6"/><text x="0.4719%" y="191.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="0.2219%" y="165" width="0.0140%" height="15" fill="rgb(206,27,48)" fg:x="95" fg:w="6"/><text x="0.4719%" y="175.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="0.2219%" y="149" width="0.0140%" height="15" fill="rgb(225,35,8)" fg:x="95" fg:w="6"/><text x="0.4719%" y="159.50"></text></g><g><title>&lt;&amp;core::task::wake::Waker as tokio::sync::task::atomic_waker::WakerRef&gt;::into_waker (24 samples, 0.06%)</title><rect x="0.2359%" y="421" width="0.0561%" height="15" fill="rgb(250,213,24)" fg:x="101" fg:w="24"/><text x="0.4859%" y="431.50"></text></g><g><title>&lt;&amp;mut T as core::ops::deref::Deref&gt;::deref (28 samples, 0.07%)</title><rect x="0.2920%" y="421" width="0.0654%" height="15" fill="rgb(247,123,22)" fg:x="125" fg:w="28"/><text x="0.5420%" y="431.50"></text></g><g><title>&lt;&amp;mut T as core::ops::deref::DerefMut&gt;::deref_mut (17 samples, 0.04%)</title><rect x="0.3574%" y="421" width="0.0397%" height="15" fill="rgb(231,138,38)" fg:x="153" fg:w="17"/><text x="0.6074%" y="431.50"></text></g><g><title>&lt;&amp;mut alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (14 samples, 0.03%)</title><rect x="0.3971%" y="421" width="0.0327%" height="15" fill="rgb(231,145,46)" fg:x="170" fg:w="14"/><text x="0.6471%" y="431.50"></text></g><g><title>&lt;&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::Dropper&lt;T&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 0.04%)</title><rect x="0.4298%" y="421" width="0.0444%" height="15" fill="rgb(251,118,11)" fg:x="184" fg:w="19"/><text x="0.6798%" y="431.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (32 samples, 0.07%)</title><rect x="0.4789%" y="421" width="0.0748%" height="15" fill="rgb(217,147,25)" fg:x="205" fg:w="32"/><text x="0.7289%" y="431.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (48 samples, 0.11%)</title><rect x="0.5536%" y="421" width="0.1121%" height="15" fill="rgb(247,81,37)" fg:x="237" fg:w="48"/><text x="0.8036%" y="431.50"></text></g><g><title>&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (53 samples, 0.12%)</title><rect x="0.6658%" y="421" width="0.1238%" height="15" fill="rgb(209,12,38)" fg:x="285" fg:w="53"/><text x="0.9158%" y="431.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (33 samples, 0.08%)</title><rect x="0.7896%" y="421" width="0.0771%" height="15" fill="rgb(227,1,9)" fg:x="338" fg:w="33"/><text x="1.0396%" y="431.50"></text></g><g><title>&lt;T as core::any::Any&gt;::type_id (19 samples, 0.04%)</title><rect x="0.8760%" y="421" width="0.0444%" height="15" fill="rgb(248,47,43)" fg:x="375" fg:w="19"/><text x="1.1260%" y="431.50"></text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (29 samples, 0.07%)</title><rect x="0.9204%" y="421" width="0.0677%" height="15" fill="rgb(221,10,30)" fg:x="394" fg:w="29"/><text x="1.1704%" y="431.50"></text></g><g><title>&lt;T as core::borrow::Borrow&lt;T&gt;&gt;::borrow (14 samples, 0.03%)</title><rect x="0.9882%" y="421" width="0.0327%" height="15" fill="rgb(210,229,1)" fg:x="423" fg:w="14"/><text x="1.2382%" y="431.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (65 samples, 0.15%)</title><rect x="1.0209%" y="421" width="0.1518%" height="15" fill="rgb(222,148,37)" fg:x="437" fg:w="65"/><text x="1.2709%" y="431.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (33 samples, 0.08%)</title><rect x="1.1727%" y="421" width="0.0771%" height="15" fill="rgb(234,67,33)" fg:x="502" fg:w="33"/><text x="1.4227%" y="431.50"></text></g><g><title>&lt;T as core::option::SpecOptionPartialEq&gt;::eq (50 samples, 0.12%)</title><rect x="1.2498%" y="421" width="0.1168%" height="15" fill="rgb(247,98,35)" fg:x="535" fg:w="50"/><text x="1.4998%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (26 samples, 0.06%)</title><rect x="1.3713%" y="421" width="0.0607%" height="15" fill="rgb(247,138,52)" fg:x="587" fg:w="26"/><text x="1.6213%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (65 samples, 0.15%)</title><rect x="1.4320%" y="421" width="0.1518%" height="15" fill="rgb(213,79,30)" fg:x="613" fg:w="65"/><text x="1.6820%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::clone::Clone&gt;::clone (12 samples, 0.03%)</title><rect x="1.5909%" y="421" width="0.0280%" height="15" fill="rgb(246,177,23)" fg:x="681" fg:w="12"/><text x="1.8409%" y="431.50"></text></g><g><title>&lt;alloc::collections::binary_heap::Hole&lt;T&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.02%)</title><rect x="1.6282%" y="421" width="0.0187%" height="15" fill="rgb(230,62,27)" fg:x="697" fg:w="8"/><text x="1.8782%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (414 samples, 0.97%)</title><rect x="1.6469%" y="421" width="0.9671%" height="15" fill="rgb(216,154,8)" fg:x="705" fg:w="414"/><text x="1.8969%" y="431.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::clone::Clone&gt;::clone (8 samples, 0.02%)</title><rect x="2.6164%" y="421" width="0.0187%" height="15" fill="rgb(244,35,45)" fg:x="1120" fg:w="8"/><text x="2.8664%" y="431.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.03%)</title><rect x="2.6351%" y="421" width="0.0304%" height="15" fill="rgb(251,115,12)" fg:x="1128" fg:w="13"/><text x="2.8851%" y="431.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::write_iter_wrapping::Guard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.01%)</title><rect x="2.6655%" y="421" width="0.0117%" height="15" fill="rgb(240,54,50)" fg:x="1141" fg:w="5"/><text x="2.9155%" y="431.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T&gt; as core::default::Default&gt;::default (24 samples, 0.06%)</title><rect x="2.6771%" y="421" width="0.0561%" height="15" fill="rgb(233,84,52)" fg:x="1146" fg:w="24"/><text x="2.9271%" y="431.50"></text></g><g><title>&lt;alloc::collections::vec_deque::iter::Iter&lt;T&gt; as core::iter::traits::exact_size::ExactSizeIterator&gt;::len (16 samples, 0.04%)</title><rect x="2.7402%" y="421" width="0.0374%" height="15" fill="rgb(207,117,47)" fg:x="1173" fg:w="16"/><text x="2.9902%" y="431.50"></text></g><g><title>&lt;alloc::collections::vec_deque::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (39 samples, 0.09%)</title><rect x="2.7776%" y="421" width="0.0911%" height="15" fill="rgb(249,43,39)" fg:x="1189" fg:w="39"/><text x="3.0276%" y="431.50"></text></g><g><title>&lt;alloc::collections::vec_deque::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.01%)</title><rect x="2.8687%" y="421" width="0.0140%" height="15" fill="rgb(209,38,44)" fg:x="1228" fg:w="6"/><text x="3.1187%" y="431.50"></text></g><g><title>&lt;alloc::collections::vec_deque::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (5 samples, 0.01%)</title><rect x="2.8827%" y="421" width="0.0117%" height="15" fill="rgb(236,212,23)" fg:x="1234" fg:w="5"/><text x="3.1327%" y="431.50"></text></g><g><title>&lt;alloc::collections::vec_deque::iter_mut::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (28 samples, 0.07%)</title><rect x="2.8944%" y="421" width="0.0654%" height="15" fill="rgb(242,79,21)" fg:x="1239" fg:w="28"/><text x="3.1444%" y="431.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (49 samples, 0.11%)</title><rect x="2.9598%" y="421" width="0.1145%" height="15" fill="rgb(211,96,35)" fg:x="1267" fg:w="49"/><text x="3.2098%" y="431.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::clone::Clone&gt;::clone (12 samples, 0.03%)</title><rect x="3.0743%" y="421" width="0.0280%" height="15" fill="rgb(253,215,40)" fg:x="1316" fg:w="12"/><text x="3.3243%" y="431.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.01%)</title><rect x="3.1023%" y="421" width="0.0140%" height="15" fill="rgb(211,81,21)" fg:x="1328" fg:w="6"/><text x="3.3523%" y="431.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (518 samples, 1.21%)</title><rect x="3.1163%" y="421" width="1.2101%" height="15" fill="rgb(208,190,38)" fg:x="1334" fg:w="518"/><text x="3.3663%" y="431.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (574 samples, 1.34%)</title><rect x="4.3311%" y="421" width="1.3409%" height="15" fill="rgb(235,213,38)" fg:x="1854" fg:w="574"/><text x="4.5811%" y="431.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (457 samples, 1.07%)</title><rect x="5.6720%" y="421" width="1.0676%" height="15" fill="rgb(237,122,38)" fg:x="2428" fg:w="457"/><text x="5.9220%" y="431.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T&gt; as core::ops::drop::Drop&gt;::drop (63 samples, 0.15%)</title><rect x="6.7396%" y="421" width="0.1472%" height="15" fill="rgb(244,218,35)" fg:x="2885" fg:w="63"/><text x="6.9896%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (29 samples, 0.07%)</title><rect x="6.8867%" y="421" width="0.0677%" height="15" fill="rgb(240,68,47)" fg:x="2948" fg:w="29"/><text x="7.1367%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (6 samples, 0.01%)</title><rect x="6.9545%" y="421" width="0.0140%" height="15" fill="rgb(210,16,53)" fg:x="2977" fg:w="6"/><text x="7.2045%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (59 samples, 0.14%)</title><rect x="6.9732%" y="421" width="0.1378%" height="15" fill="rgb(235,124,12)" fg:x="2985" fg:w="59"/><text x="7.2232%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (22 samples, 0.05%)</title><rect x="7.1110%" y="421" width="0.0514%" height="15" fill="rgb(224,169,11)" fg:x="3044" fg:w="22"/><text x="7.3610%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.02%)</title><rect x="7.1624%" y="421" width="0.0164%" height="15" fill="rgb(250,166,2)" fg:x="3066" fg:w="7"/><text x="7.4124%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (153 samples, 0.36%)</title><rect x="7.1787%" y="421" width="0.3574%" height="15" fill="rgb(242,216,29)" fg:x="3073" fg:w="153"/><text x="7.4287%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (21 samples, 0.05%)</title><rect x="7.5362%" y="421" width="0.0491%" height="15" fill="rgb(230,116,27)" fg:x="3226" fg:w="21"/><text x="7.7862%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.01%)</title><rect x="7.5852%" y="421" width="0.0117%" height="15" fill="rgb(228,99,48)" fg:x="3247" fg:w="5"/><text x="7.8352%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (33 samples, 0.08%)</title><rect x="7.5969%" y="421" width="0.0771%" height="15" fill="rgb(253,11,6)" fg:x="3252" fg:w="33"/><text x="7.8469%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::default::Default&gt;::default (23 samples, 0.05%)</title><rect x="7.6740%" y="421" width="0.0537%" height="15" fill="rgb(247,143,39)" fg:x="3285" fg:w="23"/><text x="7.9240%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (11 samples, 0.03%)</title><rect x="7.7277%" y="421" width="0.0257%" height="15" fill="rgb(236,97,10)" fg:x="3308" fg:w="11"/><text x="7.9777%" y="431.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (41 samples, 0.10%)</title><rect x="7.7534%" y="421" width="0.0958%" height="15" fill="rgb(233,208,19)" fg:x="3319" fg:w="41"/><text x="8.0034%" y="431.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (189 samples, 0.44%)</title><rect x="7.8492%" y="421" width="0.4415%" height="15" fill="rgb(216,164,2)" fg:x="3360" fg:w="189"/><text x="8.0992%" y="431.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 0.04%)</title><rect x="8.2907%" y="421" width="0.0444%" height="15" fill="rgb(220,129,5)" fg:x="3549" fg:w="19"/><text x="8.5407%" y="431.50"></text></g><g><title>&lt;alloc::vec::set_len_on_drop::SetLenOnDrop as core::ops::drop::Drop&gt;::drop (10 samples, 0.02%)</title><rect x="8.3351%" y="421" width="0.0234%" height="15" fill="rgb(242,17,10)" fg:x="3568" fg:w="10"/><text x="8.5851%" y="431.50"></text></g><g><title>&lt;core::any::TypeId as core::cmp::PartialEq&gt;::eq (57 samples, 0.13%)</title><rect x="8.3584%" y="421" width="0.1332%" height="15" fill="rgb(242,107,0)" fg:x="3578" fg:w="57"/><text x="8.6084%" y="431.50"></text></g><g><title>&lt;core::any::TypeId as core::hash::Hash&gt;::hash (14 samples, 0.03%)</title><rect x="8.4916%" y="421" width="0.0327%" height="15" fill="rgb(251,28,31)" fg:x="3635" fg:w="14"/><text x="8.7416%" y="431.50"></text></g><g><title>&lt;core::cell::BorrowRef as core::ops::drop::Drop&gt;::drop (20 samples, 0.05%)</title><rect x="8.5243%" y="421" width="0.0467%" height="15" fill="rgb(233,223,10)" fg:x="3649" fg:w="20"/><text x="8.7743%" y="431.50"></text></g><g><title>&lt;core::cell::BorrowRefMut as core::ops::drop::Drop&gt;::drop (34 samples, 0.08%)</title><rect x="8.5710%" y="421" width="0.0794%" height="15" fill="rgb(215,21,27)" fg:x="3669" fg:w="34"/><text x="8.8210%" y="431.50"></text></g><g><title>&lt;core::cell::Ref&lt;T&gt; as core::ops::deref::Deref&gt;::deref (14 samples, 0.03%)</title><rect x="8.6505%" y="421" width="0.0327%" height="15" fill="rgb(232,23,21)" fg:x="3703" fg:w="14"/><text x="8.9005%" y="431.50"></text></g><g><title>&lt;core::cell::RefMut&lt;T&gt; as core::ops::deref::DerefMut&gt;::deref_mut (25 samples, 0.06%)</title><rect x="8.6832%" y="421" width="0.0584%" height="15" fill="rgb(244,5,23)" fg:x="3717" fg:w="25"/><text x="8.9332%" y="431.50"></text></g><g><title>&lt;core::hash::BuildHasherDefault&lt;H&gt; as core::hash::BuildHasher&gt;::build_hasher (19 samples, 0.04%)</title><rect x="8.7416%" y="421" width="0.0444%" height="15" fill="rgb(226,81,46)" fg:x="3742" fg:w="19"/><text x="8.9916%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7 samples, 0.02%)</title><rect x="8.7906%" y="421" width="0.0164%" height="15" fill="rgb(247,70,30)" fg:x="3763" fg:w="7"/><text x="9.0406%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.02%)</title><rect x="8.8070%" y="421" width="0.0210%" height="15" fill="rgb(212,68,19)" fg:x="3770" fg:w="9"/><text x="9.0570%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (7 samples, 0.02%)</title><rect x="8.8280%" y="421" width="0.0164%" height="15" fill="rgb(240,187,13)" fg:x="3779" fg:w="7"/><text x="9.0780%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (23 samples, 0.05%)</title><rect x="8.8537%" y="421" width="0.0537%" height="15" fill="rgb(223,113,26)" fg:x="3790" fg:w="23"/><text x="9.1037%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::count::count (6 samples, 0.01%)</title><rect x="8.9098%" y="421" width="0.0140%" height="15" fill="rgb(206,192,2)" fg:x="3814" fg:w="6"/><text x="9.1598%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::next (81 samples, 0.19%)</title><rect x="8.9238%" y="421" width="0.1892%" height="15" fill="rgb(241,108,4)" fg:x="3820" fg:w="81"/><text x="9.1738%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (10 samples, 0.02%)</title><rect x="9.1130%" y="421" width="0.0234%" height="15" fill="rgb(247,173,49)" fg:x="3901" fg:w="10"/><text x="9.3630%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::adapters::fuse::FuseImpl&lt;I&gt;&gt;::next (9 samples, 0.02%)</title><rect x="9.1364%" y="421" width="0.0210%" height="15" fill="rgb(224,114,35)" fg:x="3911" fg:w="9"/><text x="9.3864%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (9 samples, 0.02%)</title><rect x="9.1574%" y="421" width="0.0210%" height="15" fill="rgb(245,159,27)" fg:x="3920" fg:w="9"/><text x="9.4074%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (42 samples, 0.10%)</title><rect x="9.1784%" y="421" width="0.0981%" height="15" fill="rgb(245,172,44)" fg:x="3929" fg:w="42"/><text x="9.4284%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (20 samples, 0.05%)</title><rect x="9.2765%" y="421" width="0.0467%" height="15" fill="rgb(236,23,11)" fg:x="3971" fg:w="20"/><text x="9.5265%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (15 samples, 0.04%)</title><rect x="9.3232%" y="421" width="0.0350%" height="15" fill="rgb(205,117,38)" fg:x="3991" fg:w="15"/><text x="9.5732%" y="431.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (111 samples, 0.26%)</title><rect x="9.3583%" y="421" width="0.2593%" height="15" fill="rgb(237,72,25)" fg:x="4006" fg:w="111"/><text x="9.6083%" y="431.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (78 samples, 0.18%)</title><rect x="9.6176%" y="421" width="0.1822%" height="15" fill="rgb(244,70,9)" fg:x="4117" fg:w="78"/><text x="9.8676%" y="431.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (33 samples, 0.08%)</title><rect x="9.8091%" y="421" width="0.0771%" height="15" fill="rgb(217,125,39)" fg:x="4199" fg:w="33"/><text x="10.0591%" y="431.50"></text></g><g><title>&lt;core::ops::range::RangeFull as core::ops::range::RangeBounds&lt;T&gt;&gt;::end_bound (13 samples, 0.03%)</title><rect x="9.8862%" y="421" width="0.0304%" height="15" fill="rgb(235,36,10)" fg:x="4232" fg:w="13"/><text x="10.1362%" y="431.50"></text></g><g><title>&lt;core::ops::range::RangeFull as core::ops::range::RangeBounds&lt;T&gt;&gt;::start_bound (13 samples, 0.03%)</title><rect x="9.9166%" y="421" width="0.0304%" height="15" fill="rgb(251,123,47)" fg:x="4245" fg:w="13"/><text x="10.1666%" y="431.50"></text></g><g><title>&lt;core::ops::range::RangeFull as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (10 samples, 0.02%)</title><rect x="9.9470%" y="421" width="0.0234%" height="15" fill="rgb(221,13,13)" fg:x="4258" fg:w="10"/><text x="10.1970%" y="431.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (15 samples, 0.04%)</title><rect x="9.9727%" y="421" width="0.0350%" height="15" fill="rgb(238,131,9)" fg:x="4269" fg:w="15"/><text x="10.2227%" y="431.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::cmp::PartialEq&gt;::eq (35 samples, 0.08%)</title><rect x="10.0124%" y="421" width="0.0818%" height="15" fill="rgb(211,50,8)" fg:x="4286" fg:w="35"/><text x="10.2624%" y="431.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::default::Default&gt;::default (14 samples, 0.03%)</title><rect x="10.0941%" y="421" width="0.0327%" height="15" fill="rgb(245,182,24)" fg:x="4321" fg:w="14"/><text x="10.3441%" y="431.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::FromResidual&gt;::from_residual (11 samples, 0.03%)</title><rect x="10.1268%" y="421" width="0.0257%" height="15" fill="rgb(242,14,37)" fg:x="4335" fg:w="11"/><text x="10.3768%" y="431.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (46 samples, 0.11%)</title><rect x="10.1525%" y="421" width="0.1075%" height="15" fill="rgb(246,228,12)" fg:x="4346" fg:w="46"/><text x="10.4025%" y="431.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (78 samples, 0.18%)</title><rect x="10.2600%" y="421" width="0.1822%" height="15" fill="rgb(213,55,15)" fg:x="4392" fg:w="78"/><text x="10.5100%" y="431.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (12 samples, 0.03%)</title><rect x="10.4422%" y="421" width="0.0280%" height="15" fill="rgb(209,9,3)" fg:x="4470" fg:w="12"/><text x="10.6922%" y="431.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::ops::deref::Deref&gt;::deref (86 samples, 0.20%)</title><rect x="10.4703%" y="421" width="0.2009%" height="15" fill="rgb(230,59,30)" fg:x="4482" fg:w="86"/><text x="10.7203%" y="431.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (11 samples, 0.03%)</title><rect x="10.6712%" y="421" width="0.0257%" height="15" fill="rgb(209,121,21)" fg:x="4568" fg:w="11"/><text x="10.9212%" y="431.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::convert::From&lt;&amp;T&gt;&gt;::from (32 samples, 0.07%)</title><rect x="10.6968%" y="421" width="0.0748%" height="15" fill="rgb(220,109,13)" fg:x="4579" fg:w="32"/><text x="10.9468%" y="431.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::option::SpecOptionPartialEq&gt;::eq (139 samples, 0.32%)</title><rect x="10.7786%" y="421" width="0.3247%" height="15" fill="rgb(232,18,1)" fg:x="4614" fg:w="139"/><text x="11.0286%" y="431.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (265 samples, 0.62%)</title><rect x="11.1033%" y="421" width="0.6191%" height="15" fill="rgb(215,41,42)" fg:x="4753" fg:w="265"/><text x="11.3533%" y="431.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (211 samples, 0.49%)</title><rect x="11.7224%" y="421" width="0.4929%" height="15" fill="rgb(224,123,36)" fg:x="5018" fg:w="211"/><text x="11.9724%" y="431.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (9 samples, 0.02%)</title><rect x="12.2153%" y="421" width="0.0210%" height="15" fill="rgb(240,125,3)" fg:x="5229" fg:w="9"/><text x="12.4653%" y="431.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (119 samples, 0.28%)</title><rect x="12.2363%" y="421" width="0.2780%" height="15" fill="rgb(205,98,50)" fg:x="5238" fg:w="119"/><text x="12.4863%" y="431.50"></text></g><g><title>&lt;core::task::poll::Poll&lt;T&gt; as core::cmp::PartialEq&gt;::eq (94 samples, 0.22%)</title><rect x="12.5143%" y="421" width="0.2196%" height="15" fill="rgb(205,185,37)" fg:x="5357" fg:w="94"/><text x="12.7643%" y="431.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (50 samples, 0.12%)</title><rect x="12.7432%" y="421" width="0.1168%" height="15" fill="rgb(238,207,15)" fg:x="5455" fg:w="50"/><text x="12.9932%" y="431.50"></text></g><g><title>&lt;core::task::wake::Waker as core::ops::drop::Drop&gt;::drop (23 samples, 0.05%)</title><rect x="12.8600%" y="421" width="0.0537%" height="15" fill="rgb(213,199,42)" fg:x="5505" fg:w="23"/><text x="13.1100%" y="431.50"></text></g><g><title>&lt;core::time::Duration as core::cmp::PartialOrd&gt;::partial_cmp (29 samples, 0.07%)</title><rect x="12.9161%" y="421" width="0.0677%" height="15" fill="rgb(235,201,11)" fg:x="5529" fg:w="29"/><text x="13.1661%" y="431.50"></text></g><g><title>&lt;core::time::Duration as core::ops::arith::Add&gt;::add (7 samples, 0.02%)</title><rect x="12.9839%" y="421" width="0.0164%" height="15" fill="rgb(207,46,11)" fg:x="5558" fg:w="7"/><text x="13.2339%" y="431.50"></text></g><g><title>&lt;core::time::Duration as core::ops::arith::SubAssign&gt;::sub_assign (17 samples, 0.04%)</title><rect x="13.0002%" y="421" width="0.0397%" height="15" fill="rgb(241,35,35)" fg:x="5565" fg:w="17"/><text x="13.2502%" y="431.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_entry (31 samples, 0.07%)</title><rect x="13.0423%" y="421" width="0.0724%" height="15" fill="rgb(243,32,47)" fg:x="5583" fg:w="31"/><text x="13.2923%" y="431.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_get (25 samples, 0.06%)</title><rect x="13.1147%" y="421" width="0.0584%" height="15" fill="rgb(247,202,23)" fg:x="5614" fg:w="25"/><text x="13.3647%" y="431.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_yield_read_shard (19 samples, 0.04%)</title><rect x="13.1778%" y="421" width="0.0444%" height="15" fill="rgb(219,102,11)" fg:x="5641" fg:w="19"/><text x="13.4278%" y="431.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_yield_write_shard (16 samples, 0.04%)</title><rect x="13.2221%" y="421" width="0.0374%" height="15" fill="rgb(243,110,44)" fg:x="5660" fg:w="16"/><text x="13.4721%" y="431.50"></text></g><g><title>&lt;dashmap::lock::RawRwLock as lock_api::rwlock::RawRwLock&gt;::lock_exclusive (8 samples, 0.02%)</title><rect x="13.2595%" y="421" width="0.0187%" height="15" fill="rgb(222,74,54)" fg:x="5676" fg:w="8"/><text x="13.5095%" y="431.50"></text></g><g><title>&lt;dashmap::lock::RawRwLock as lock_api::rwlock::RawRwLock&gt;::lock_shared (18 samples, 0.04%)</title><rect x="13.2782%" y="421" width="0.0420%" height="15" fill="rgb(216,99,12)" fg:x="5684" fg:w="18"/><text x="13.5282%" y="431.50"></text></g><g><title>&lt;dashmap::lock::RawRwLock as lock_api::rwlock::RawRwLock&gt;::unlock_exclusive (13 samples, 0.03%)</title><rect x="13.3203%" y="421" width="0.0304%" height="15" fill="rgb(226,22,26)" fg:x="5702" fg:w="13"/><text x="13.5703%" y="431.50"></text></g><g><title>&lt;dashmap::mapref::one::Ref&lt;K,V,S&gt; as core::ops::deref::Deref&gt;::deref (10 samples, 0.02%)</title><rect x="13.3600%" y="421" width="0.0234%" height="15" fill="rgb(217,163,10)" fg:x="5719" fg:w="10"/><text x="13.6100%" y="431.50"></text></g><g><title>&lt;dyn core::any::Any&gt;::downcast_ref (10 samples, 0.02%)</title><rect x="13.3833%" y="421" width="0.0234%" height="15" fill="rgb(213,25,53)" fg:x="5729" fg:w="10"/><text x="13.6333%" y="431.50"></text></g><g><title>&lt;elvis::applications::barebones_client::BareBonesClient as elvis_core::protocol::Protocol&gt;::start::{{closure}} (48 samples, 0.11%)</title><rect x="13.4067%" y="421" width="0.1121%" height="15" fill="rgb(252,105,26)" fg:x="5739" fg:w="48"/><text x="13.6567%" y="431.50"></text></g><g><title>&lt;elvis_core::ip_table::Obm as core::clone::Clone&gt;::clone (6 samples, 0.01%)</title><rect x="13.5305%" y="421" width="0.0140%" height="15" fill="rgb(220,39,43)" fg:x="5792" fg:w="6"/><text x="13.7805%" y="431.50"></text></g><g><title>&lt;elvis_core::machine::ProtocolMap as core::clone::Clone&gt;::clone (7 samples, 0.02%)</title><rect x="13.5468%" y="421" width="0.0164%" height="15" fill="rgb(229,68,48)" fg:x="5799" fg:w="7"/><text x="13.7968%" y="431.50"></text></g><g><title>&lt;elvis_core::message::Message as core::default::Default&gt;::default (19 samples, 0.04%)</title><rect x="13.5679%" y="421" width="0.0444%" height="15" fill="rgb(252,8,32)" fg:x="5808" fg:w="19"/><text x="13.8179%" y="431.50"></text></g><g><title>&lt;elvis_core::message::chunk::Chunk as core::convert::From&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt;::from (7 samples, 0.02%)</title><rect x="13.6146%" y="421" width="0.0164%" height="15" fill="rgb(223,20,43)" fg:x="5828" fg:w="7"/><text x="13.8646%" y="431.50"></text></g><g><title>&lt;elvis_core::message::slice_range::SliceRange as core::convert::From&lt;core::ops::range::Range&lt;usize&gt;&gt;&gt;::from (9 samples, 0.02%)</title><rect x="13.6309%" y="421" width="0.0210%" height="15" fill="rgb(229,81,49)" fg:x="5835" fg:w="9"/><text x="13.8809%" y="431.50"></text></g><g><title>&lt;elvis_core::protocols::ipv4::Ipv4 as elvis_core::protocol::Protocol&gt;::demux (59 samples, 0.14%)</title><rect x="13.6520%" y="421" width="0.1378%" height="15" fill="rgb(236,28,36)" fg:x="5844" fg:w="59"/><text x="13.9020%" y="431.50"></text></g><g><title>&lt;elvis_core::protocols::ipv4::Recipient as core::clone::Clone&gt;::clone (8 samples, 0.02%)</title><rect x="13.7898%" y="421" width="0.0187%" height="15" fill="rgb(249,185,26)" fg:x="5903" fg:w="8"/><text x="14.0398%" y="431.50"></text></g><g><title>&lt;elvis_core::protocols::ipv4::ipv4_address::Ipv4Address as core::convert::From&lt;[u8: 4]&gt;&gt;::from (7 samples, 0.02%)</title><rect x="13.8132%" y="421" width="0.0164%" height="15" fill="rgb(249,174,33)" fg:x="5913" fg:w="7"/><text x="14.0632%" y="431.50"></text></g><g><title>&lt;elvis_core::protocols::ipv4::ipv4_address::Ipv4Address as core::convert::From&lt;u32&gt;&gt;::from (9 samples, 0.02%)</title><rect x="13.8295%" y="421" width="0.0210%" height="15" fill="rgb(233,201,37)" fg:x="5920" fg:w="9"/><text x="14.0795%" y="431.50"></text></g><g><title>&lt;elvis_core::protocols::ipv4::ipv4_address::Ipv4Address as core::hash::Hash&gt;::hash (15 samples, 0.04%)</title><rect x="13.8505%" y="421" width="0.0350%" height="15" fill="rgb(221,78,26)" fg:x="5929" fg:w="15"/><text x="14.1005%" y="431.50"></text></g><g><title>&lt;elvis_core::protocols::ipv4::ipv4_parsing::TypeOfService as core::default::Default&gt;::default (5 samples, 0.01%)</title><rect x="13.9066%" y="421" width="0.0117%" height="15" fill="rgb(250,127,30)" fg:x="5953" fg:w="5"/><text x="14.1566%" y="431.50"></text></g><g><title>&lt;elvis_core::protocols::ipv4::ipv4_session::Ipv4Session as elvis_core::session::Session&gt;::send (79 samples, 0.18%)</title><rect x="13.9206%" y="421" width="0.1845%" height="15" fill="rgb(230,49,44)" fg:x="5959" fg:w="79"/><text x="14.1706%" y="431.50"></text></g><g><title>&lt;elvis_core::protocols::ipv4::reassembly::Reassembly as core::default::Default&gt;::default (11 samples, 0.03%)</title><rect x="14.1052%" y="421" width="0.0257%" height="15" fill="rgb(229,67,23)" fg:x="6038" fg:w="11"/><text x="14.3552%" y="431.50"></text></g><g><title>&lt;elvis_core::protocols::ipv4::reassembly::buf_id::BufId as core::hash::Hash&gt;::hash (7 samples, 0.02%)</title><rect x="14.1309%" y="421" width="0.0164%" height="15" fill="rgb(249,83,47)" fg:x="6049" fg:w="7"/><text x="14.3809%" y="431.50"></text></g><g><title>&lt;elvis_core::protocols::socket_api::SocketAPI as elvis_core::protocol::Protocol&gt;::demux (23 samples, 0.05%)</title><rect x="14.1496%" y="421" width="0.0537%" height="15" fill="rgb(215,43,3)" fg:x="6057" fg:w="23"/><text x="14.3996%" y="431.50"></text></g><g><title>&lt;elvis_core::protocols::tcp::Tcp as elvis_core::protocol::Protocol&gt;::demux (40 samples, 0.09%)</title><rect x="14.2150%" y="421" width="0.0934%" height="15" fill="rgb(238,154,13)" fg:x="6085" fg:w="40"/><text x="14.4650%" y="431.50"></text></g><g><title>&lt;elvis_core::protocols::tcp::tcb::state::State as core::cmp::PartialEq&gt;::eq (6 samples, 0.01%)</title><rect x="14.3107%" y="421" width="0.0140%" height="15" fill="rgb(219,56,2)" fg:x="6126" fg:w="6"/><text x="14.5607%" y="431.50"></text></g><g><title>&lt;elvis_core::protocols::tcp::tcp_parsing::Control as core::convert::From&lt;u8&gt;&gt;::from (5 samples, 0.01%)</title><rect x="14.3248%" y="421" width="0.0117%" height="15" fill="rgb(233,0,4)" fg:x="6132" fg:w="5"/><text x="14.5748%" y="431.50"></text></g><g><title>&lt;elvis_core::protocols::tcp::tcp_parsing::Control as core::default::Default&gt;::default (7 samples, 0.02%)</title><rect x="14.3364%" y="421" width="0.0164%" height="15" fill="rgb(235,30,7)" fg:x="6137" fg:w="7"/><text x="14.5864%" y="431.50"></text></g><g><title>&lt;elvis_core::protocols::tcp::tcp_session::TcpSession as elvis_core::session::Session&gt;::send::{{closure}} (8 samples, 0.02%)</title><rect x="14.3645%" y="421" width="0.0187%" height="15" fill="rgb(250,79,13)" fg:x="6149" fg:w="8"/><text x="14.6145%" y="431.50"></text></g><g><title>&lt;elvis_core::protocols::utility::Checksum as core::default::Default&gt;::default (18 samples, 0.04%)</title><rect x="14.3832%" y="421" width="0.0420%" height="15" fill="rgb(211,146,34)" fg:x="6157" fg:w="18"/><text x="14.6332%" y="431.50"></text></g><g><title>&lt;elvis_core::protocols::utility::Endpoint as core::cmp::PartialEq&gt;::eq (6 samples, 0.01%)</title><rect x="14.4252%" y="421" width="0.0140%" height="15" fill="rgb(228,22,38)" fg:x="6175" fg:w="6"/><text x="14.6752%" y="431.50"></text></g><g><title>&lt;elvis_core::protocols::utility::Endpoint as core::hash::Hash&gt;::hash (11 samples, 0.03%)</title><rect x="14.4392%" y="421" width="0.0257%" height="15" fill="rgb(235,168,5)" fg:x="6181" fg:w="11"/><text x="14.6892%" y="431.50"></text></g><g><title>&lt;elvis_core::protocols::utility::Endpoints as core::cmp::PartialEq&gt;::eq (5 samples, 0.01%)</title><rect x="14.4649%" y="421" width="0.0117%" height="15" fill="rgb(221,155,16)" fg:x="6192" fg:w="5"/><text x="14.7149%" y="431.50"></text></g><g><title>&lt;elvis_core::protocols::utility::Endpoints as core::hash::Hash&gt;::hash (8 samples, 0.02%)</title><rect x="14.4766%" y="421" width="0.0187%" height="15" fill="rgb(215,215,53)" fg:x="6197" fg:w="8"/><text x="14.7266%" y="431.50"></text></g><g><title>&lt;elvis_core::transport::Transport as core::convert::TryFrom&lt;core::any::TypeId&gt;&gt;::try_from (7 samples, 0.02%)</title><rect x="14.5000%" y="421" width="0.0164%" height="15" fill="rgb(223,4,10)" fg:x="6207" fg:w="7"/><text x="14.7500%" y="431.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 0.04%)</title><rect x="14.5210%" y="421" width="0.0397%" height="15" fill="rgb(234,103,6)" fg:x="6216" fg:w="17"/><text x="14.7710%" y="431.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (23 samples, 0.05%)</title><rect x="14.5607%" y="421" width="0.0537%" height="15" fill="rgb(227,97,0)" fg:x="6233" fg:w="23"/><text x="14.8107%" y="431.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (29 samples, 0.07%)</title><rect x="14.6144%" y="421" width="0.0677%" height="15" fill="rgb(234,150,53)" fg:x="6256" fg:w="29"/><text x="14.8644%" y="431.50"></text></g><g><title>&lt;hashbrown::raw::inner::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.02%)</title><rect x="14.6869%" y="421" width="0.0234%" height="15" fill="rgb(228,201,54)" fg:x="6287" fg:w="10"/><text x="14.9369%" y="431.50"></text></g><g><title>&lt;hashbrown::scopeguard::ScopeGuard&lt;T,F&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.04%)</title><rect x="14.7102%" y="421" width="0.0350%" height="15" fill="rgb(222,22,37)" fg:x="6297" fg:w="15"/><text x="14.9602%" y="431.50"></text></g><g><title>&lt;lock_api::rwlock::RwLockReadGuard&lt;R,T&gt; as core::ops::deref::Deref&gt;::deref (12 samples, 0.03%)</title><rect x="14.7453%" y="421" width="0.0280%" height="15" fill="rgb(237,53,32)" fg:x="6312" fg:w="12"/><text x="14.9953%" y="431.50"></text></g><g><title>&lt;lock_api::rwlock::RwLockReadGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.03%)</title><rect x="14.7733%" y="421" width="0.0257%" height="15" fill="rgb(233,25,53)" fg:x="6324" fg:w="11"/><text x="15.0233%" y="431.50"></text></g><g><title>&lt;lock_api::rwlock::RwLockWriteGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.04%)</title><rect x="14.8013%" y="421" width="0.0350%" height="15" fill="rgb(210,40,34)" fg:x="6336" fg:w="15"/><text x="15.0513%" y="431.50"></text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u32 (30 samples, 0.07%)</title><rect x="14.8527%" y="421" width="0.0701%" height="15" fill="rgb(241,220,44)" fg:x="6358" fg:w="30"/><text x="15.1027%" y="431.50"></text></g><g><title>&lt;rustc_hash::FxHasher as core::default::Default&gt;::default (20 samples, 0.05%)</title><rect x="14.9228%" y="421" width="0.0467%" height="15" fill="rgb(235,28,35)" fg:x="6388" fg:w="20"/><text x="15.1728%" y="431.50"></text></g><g><title>&lt;rustc_hash::FxHasher as core::hash::Hasher&gt;::finish (26 samples, 0.06%)</title><rect x="14.9695%" y="421" width="0.0607%" height="15" fill="rgb(210,56,17)" fg:x="6408" fg:w="26"/><text x="15.2195%" y="431.50"></text></g><g><title>&lt;rustc_hash::FxHasher as core::hash::Hasher&gt;::write (78 samples, 0.18%)</title><rect x="15.0303%" y="421" width="0.1822%" height="15" fill="rgb(224,130,29)" fg:x="6434" fg:w="78"/><text x="15.2803%" y="431.50"></text></g><g><title>&lt;rustc_hash::FxHasher as core::hash::Hasher&gt;::write_u16 (6 samples, 0.01%)</title><rect x="15.2125%" y="421" width="0.0140%" height="15" fill="rgb(235,212,8)" fg:x="6512" fg:w="6"/><text x="15.4625%" y="431.50"></text></g><g><title>&lt;rustc_hash::FxHasher as core::hash::Hasher&gt;::write_u64 (10 samples, 0.02%)</title><rect x="15.2265%" y="421" width="0.0234%" height="15" fill="rgb(223,33,50)" fg:x="6518" fg:w="10"/><text x="15.4765%" y="431.50"></text></g><g><title>&lt;rustc_hash::FxHasher as core::hash::Hasher&gt;::write_usize (8 samples, 0.02%)</title><rect x="15.2498%" y="421" width="0.0187%" height="15" fill="rgb(219,149,13)" fg:x="6528" fg:w="8"/><text x="15.4998%" y="431.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (31 samples, 0.07%)</title><rect x="15.2685%" y="421" width="0.0724%" height="15" fill="rgb(250,156,29)" fg:x="6536" fg:w="31"/><text x="15.5185%" y="431.50"></text></g><g><title>&lt;std::sync::mutex::Mutex&lt;T&gt; as core::default::Default&gt;::default (7 samples, 0.02%)</title><rect x="15.3409%" y="421" width="0.0164%" height="15" fill="rgb(216,193,19)" fg:x="6567" fg:w="7"/><text x="15.5909%" y="431.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::deref::Deref&gt;::deref (63 samples, 0.15%)</title><rect x="15.3573%" y="421" width="0.1472%" height="15" fill="rgb(216,135,14)" fg:x="6574" fg:w="63"/><text x="15.6073%" y="431.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::deref::DerefMut&gt;::deref_mut (48 samples, 0.11%)</title><rect x="15.5045%" y="421" width="0.1121%" height="15" fill="rgb(241,47,5)" fg:x="6637" fg:w="48"/><text x="15.7545%" y="431.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (152 samples, 0.36%)</title><rect x="15.6166%" y="421" width="0.3551%" height="15" fill="rgb(233,42,35)" fg:x="6685" fg:w="152"/><text x="15.8666%" y="431.50"></text></g><g><title>&lt;std::sync::rwlock::RwLockReadGuard&lt;T&gt; as core::ops::deref::Deref&gt;::deref (27 samples, 0.06%)</title><rect x="15.9764%" y="421" width="0.0631%" height="15" fill="rgb(231,13,6)" fg:x="6839" fg:w="27"/><text x="16.2264%" y="431.50"></text></g><g><title>&lt;std::sync::rwlock::RwLockReadGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (35 samples, 0.08%)</title><rect x="16.0394%" y="421" width="0.0818%" height="15" fill="rgb(207,181,40)" fg:x="6866" fg:w="35"/><text x="16.2894%" y="431.50"></text></g><g><title>&lt;std::sync::rwlock::RwLockWriteGuard&lt;T&gt; as core::ops::deref::DerefMut&gt;::deref_mut (7 samples, 0.02%)</title><rect x="16.1212%" y="421" width="0.0164%" height="15" fill="rgb(254,173,49)" fg:x="6901" fg:w="7"/><text x="16.3712%" y="431.50"></text></g><g><title>&lt;std::sync::rwlock::RwLockWriteGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.02%)</title><rect x="16.1375%" y="421" width="0.0164%" height="15" fill="rgb(221,1,38)" fg:x="6908" fg:w="7"/><text x="16.3875%" y="431.50"></text></g><g><title>&lt;std::time::Instant as core::ops::arith::Add&lt;core::time::Duration&gt;&gt;::add (5 samples, 0.01%)</title><rect x="16.1539%" y="421" width="0.0117%" height="15" fill="rgb(206,124,46)" fg:x="6915" fg:w="5"/><text x="16.4039%" y="431.50"></text></g><g><title>&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (23 samples, 0.05%)</title><rect x="16.1656%" y="421" width="0.0537%" height="15" fill="rgb(249,21,11)" fg:x="6920" fg:w="23"/><text x="16.4156%" y="431.50"></text></g><g><title>&lt;tokio::loom::std::atomic_usize::AtomicUsize as core::ops::deref::Deref&gt;::deref (206 samples, 0.48%)</title><rect x="16.2193%" y="421" width="0.4812%" height="15" fill="rgb(222,201,40)" fg:x="6943" fg:w="206"/><text x="16.4693%" y="431.50"></text></g><g><title>&lt;tokio::runtime::coop::RestoreOnPending as core::ops::drop::Drop&gt;::drop (45 samples, 0.11%)</title><rect x="16.7005%" y="421" width="0.1051%" height="15" fill="rgb(235,61,29)" fg:x="7149" fg:w="45"/><text x="16.9505%" y="431.50"></text></g><g><title>&lt;tokio::runtime::coop::RestoreOnPending as core::ops::drop::Drop&gt;::drop::{{closure}} (20 samples, 0.05%)</title><rect x="16.8057%" y="421" width="0.0467%" height="15" fill="rgb(219,207,3)" fg:x="7194" fg:w="20"/><text x="17.0557%" y="431.50"></text></g><g><title>&lt;tokio::runtime::coop::with_budget::ResetGuard as core::ops::drop::Drop&gt;::drop (17 samples, 0.04%)</title><rect x="16.8524%" y="421" width="0.0397%" height="15" fill="rgb(222,56,46)" fg:x="7214" fg:w="17"/><text x="17.1024%" y="431.50"></text></g><g><title>&lt;tokio::runtime::coop::with_budget::ResetGuard as core::ops::drop::Drop&gt;::drop::{{closure}} (11 samples, 0.03%)</title><rect x="16.8921%" y="421" width="0.0257%" height="15" fill="rgb(239,76,54)" fg:x="7231" fg:w="11"/><text x="17.1421%" y="431.50"></text></g><g><title>&lt;tokio::runtime::scheduler::Handle as core::clone::Clone&gt;::clone (11 samples, 0.03%)</title><rect x="16.9178%" y="421" width="0.0257%" height="15" fill="rgb(231,124,27)" fg:x="7242" fg:w="11"/><text x="17.1678%" y="431.50"></text></g><g><title>&lt;tokio::runtime::task::Task&lt;S&gt; as tokio::util::linked_list::Link&gt;::as_raw (14 samples, 0.03%)</title><rect x="16.9435%" y="421" width="0.0327%" height="15" fill="rgb(249,195,6)" fg:x="7253" fg:w="14"/><text x="17.1935%" y="431.50"></text></g><g><title>&lt;tokio::runtime::task::Task&lt;S&gt; as tokio::util::linked_list::Link&gt;::from_raw (14 samples, 0.03%)</title><rect x="16.9762%" y="421" width="0.0327%" height="15" fill="rgb(237,174,47)" fg:x="7267" fg:w="14"/><text x="17.2262%" y="431.50"></text></g><g><title>&lt;tokio::runtime::task::Task&lt;S&gt; as tokio::util::linked_list::Link&gt;::pointers (41 samples, 0.10%)</title><rect x="17.0089%" y="421" width="0.0958%" height="15" fill="rgb(206,201,31)" fg:x="7281" fg:w="41"/><text x="17.2589%" y="431.50"></text></g><g><title>&lt;tokio::runtime::task::core::TaskIdGuard as core::ops::drop::Drop&gt;::drop (28 samples, 0.07%)</title><rect x="17.1047%" y="421" width="0.0654%" height="15" fill="rgb(231,57,52)" fg:x="7322" fg:w="28"/><text x="17.3547%" y="431.50"></text></g><g><title>&lt;tokio::runtime::task::join::JoinHandle&lt;T&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.04%)</title><rect x="17.1701%" y="421" width="0.0350%" height="15" fill="rgb(248,177,22)" fg:x="7350" fg:w="15"/><text x="17.4201%" y="431.50"></text></g><g><title>&lt;tokio::runtime::task::waker::WakerRef&lt;S&gt; as core::ops::deref::Deref&gt;::deref (23 samples, 0.05%)</title><rect x="17.2051%" y="421" width="0.0537%" height="15" fill="rgb(215,211,37)" fg:x="7365" fg:w="23"/><text x="17.4551%" y="431.50"></text></g><g><title>&lt;tokio::runtime::time::entry::TimerEntry as core::ops::drop::Drop&gt;::drop (23 samples, 0.05%)</title><rect x="17.2682%" y="421" width="0.0537%" height="15" fill="rgb(241,128,51)" fg:x="7392" fg:w="23"/><text x="17.5182%" y="431.50"></text></g><g><title>&lt;tokio::runtime::time::entry::TimerShared as tokio::util::linked_list::Link&gt;::as_raw (5 samples, 0.01%)</title><rect x="17.3219%" y="421" width="0.0117%" height="15" fill="rgb(227,165,31)" fg:x="7415" fg:w="5"/><text x="17.5719%" y="431.50"></text></g><g><title>&lt;tokio::runtime::time::entry::TimerShared as tokio::util::linked_list::Link&gt;::from_raw (8 samples, 0.02%)</title><rect x="17.3336%" y="421" width="0.0187%" height="15" fill="rgb(228,167,24)" fg:x="7420" fg:w="8"/><text x="17.5836%" y="431.50"></text></g><g><title>&lt;tokio::runtime::time::entry::TimerShared as tokio::util::linked_list::Link&gt;::pointers (33 samples, 0.08%)</title><rect x="17.3523%" y="421" width="0.0771%" height="15" fill="rgb(228,143,12)" fg:x="7428" fg:w="33"/><text x="17.6023%" y="431.50"></text></g><g><title>&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (13 samples, 0.03%)</title><rect x="17.4294%" y="421" width="0.0304%" height="15" fill="rgb(249,149,8)" fg:x="7461" fg:w="13"/><text x="17.6794%" y="431.50"></text></g><g><title>&lt;tokio::sync::broadcast::Receiver&lt;T&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.02%)</title><rect x="17.4668%" y="421" width="0.0234%" height="15" fill="rgb(243,35,44)" fg:x="7477" fg:w="10"/><text x="17.7168%" y="431.50"></text></g><g><title>&lt;tokio::sync::broadcast::Recv&lt;T&gt; as core::future::future::Future&gt;::poll (8 samples, 0.02%)</title><rect x="17.4901%" y="421" width="0.0187%" height="15" fill="rgb(246,89,9)" fg:x="7487" fg:w="8"/><text x="17.7401%" y="431.50"></text></g><g><title>&lt;tokio::sync::broadcast::Waiter as tokio::util::linked_list::Link&gt;::pointers (6 samples, 0.01%)</title><rect x="17.5298%" y="421" width="0.0140%" height="15" fill="rgb(233,213,13)" fg:x="7504" fg:w="6"/><text x="17.7798%" y="431.50"></text></g><g><title>&lt;tokio::sync::mpsc::block::Values&lt;T&gt; as core::ops::index::Index&lt;usize&gt;&gt;::index (8 samples, 0.02%)</title><rect x="17.5439%" y="421" width="0.0187%" height="15" fill="rgb(233,141,41)" fg:x="7510" fg:w="8"/><text x="17.7939%" y="431.50"></text></g><g><title>&lt;tokio::sync::mpsc::bounded::Sender&lt;T&gt; as core::clone::Clone&gt;::clone (14 samples, 0.03%)</title><rect x="17.5672%" y="421" width="0.0327%" height="15" fill="rgb(239,167,4)" fg:x="7520" fg:w="14"/><text x="17.8172%" y="431.50"></text></g><g><title>&lt;tokio::sync::mpsc::chan::Tx&lt;T,S&gt; as core::clone::Clone&gt;::clone (18 samples, 0.04%)</title><rect x="17.5999%" y="421" width="0.0420%" height="15" fill="rgb(209,217,16)" fg:x="7534" fg:w="18"/><text x="17.8499%" y="431.50"></text></g><g><title>&lt;tokio::sync::notify::Waiter as tokio::util::linked_list::Link&gt;::as_raw (5 samples, 0.01%)</title><rect x="17.6607%" y="421" width="0.0117%" height="15" fill="rgb(219,88,35)" fg:x="7560" fg:w="5"/><text x="17.9107%" y="431.50"></text></g><g><title>&lt;tokio::sync::notify::Waiter as tokio::util::linked_list::Link&gt;::pointers (6 samples, 0.01%)</title><rect x="17.6817%" y="421" width="0.0140%" height="15" fill="rgb(220,193,23)" fg:x="7569" fg:w="6"/><text x="17.9317%" y="431.50"></text></g><g><title>&lt;tokio::time::instant::Instant as core::ops::arith::Add&lt;core::time::Duration&gt;&gt;::add (27 samples, 0.06%)</title><rect x="17.6957%" y="421" width="0.0631%" height="15" fill="rgb(230,90,52)" fg:x="7575" fg:w="27"/><text x="17.9457%" y="431.50"></text></g><g><title>&lt;tokio::time::sleep::Sleep as core::future::future::Future&gt;::poll (19 samples, 0.04%)</title><rect x="17.7588%" y="421" width="0.0444%" height="15" fill="rgb(252,106,19)" fg:x="7602" fg:w="19"/><text x="18.0088%" y="431.50"></text></g><g><title>&lt;tokio::time::timeout::Timeout&lt;T&gt; as core::future::future::Future&gt;::poll (39 samples, 0.09%)</title><rect x="17.8032%" y="421" width="0.0911%" height="15" fill="rgb(206,74,20)" fg:x="7621" fg:w="39"/><text x="18.0532%" y="431.50"></text></g><g><title>&lt;tokio::time::timeout::Timeout&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (38 samples, 0.09%)</title><rect x="17.8943%" y="421" width="0.0888%" height="15" fill="rgb(230,138,44)" fg:x="7660" fg:w="38"/><text x="18.1443%" y="431.50"></text></g><g><title>&lt;u32 as core::iter::range::Step&gt;::forward_unchecked (24 samples, 0.06%)</title><rect x="18.0017%" y="421" width="0.0561%" height="15" fill="rgb(235,182,43)" fg:x="7706" fg:w="24"/><text x="18.2517%" y="431.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (21 samples, 0.05%)</title><rect x="18.0718%" y="421" width="0.0491%" height="15" fill="rgb(242,16,51)" fg:x="7736" fg:w="21"/><text x="18.3218%" y="431.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::steps_between (11 samples, 0.03%)</title><rect x="18.1209%" y="421" width="0.0257%" height="15" fill="rgb(248,9,4)" fg:x="7757" fg:w="11"/><text x="18.3709%" y="431.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (9 samples, 0.02%)</title><rect x="18.1466%" y="421" width="0.0210%" height="15" fill="rgb(210,31,22)" fg:x="7768" fg:w="9"/><text x="18.3966%" y="431.50"></text></g><g><title>&lt;usize as core::ops::bit::BitXor&gt;::bitxor (10 samples, 0.02%)</title><rect x="18.1699%" y="421" width="0.0234%" height="15" fill="rgb(239,54,39)" fg:x="7778" fg:w="10"/><text x="18.4199%" y="431.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (8 samples, 0.02%)</title><rect x="18.1933%" y="421" width="0.0187%" height="15" fill="rgb(230,99,41)" fg:x="7788" fg:w="8"/><text x="18.4433%" y="431.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (22 samples, 0.05%)</title><rect x="18.2120%" y="421" width="0.0514%" height="15" fill="rgb(253,106,12)" fg:x="7796" fg:w="22"/><text x="18.4620%" y="431.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (36 samples, 0.08%)</title><rect x="18.2634%" y="421" width="0.0841%" height="15" fill="rgb(213,46,41)" fg:x="7818" fg:w="36"/><text x="18.5134%" y="431.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (26 samples, 0.06%)</title><rect x="18.3475%" y="421" width="0.0607%" height="15" fill="rgb(215,133,35)" fg:x="7854" fg:w="26"/><text x="18.5975%" y="431.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (10 samples, 0.02%)</title><rect x="18.4082%" y="421" width="0.0234%" height="15" fill="rgb(213,28,5)" fg:x="7880" fg:w="10"/><text x="18.6582%" y="431.50"></text></g><g><title>[[vdso]] (26 samples, 0.06%)</title><rect x="18.4316%" y="421" width="0.0607%" height="15" fill="rgb(215,77,49)" fg:x="7890" fg:w="26"/><text x="18.6816%" y="431.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="18.4923%" y="37" width="0.0117%" height="15" fill="rgb(248,100,22)" fg:x="7916" fg:w="5"/><text x="18.7423%" y="47.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="18.4923%" y="133" width="0.0140%" height="15" fill="rgb(208,67,9)" fg:x="7916" fg:w="6"/><text x="18.7423%" y="143.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="18.4923%" y="117" width="0.0140%" height="15" fill="rgb(219,133,21)" fg:x="7916" fg:w="6"/><text x="18.7423%" y="127.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="18.4923%" y="101" width="0.0140%" height="15" fill="rgb(246,46,29)" fg:x="7916" fg:w="6"/><text x="18.7423%" y="111.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="18.4923%" y="85" width="0.0140%" height="15" fill="rgb(246,185,52)" fg:x="7916" fg:w="6"/><text x="18.7423%" y="95.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="18.4923%" y="69" width="0.0140%" height="15" fill="rgb(252,136,11)" fg:x="7916" fg:w="6"/><text x="18.7423%" y="79.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="18.4923%" y="53" width="0.0140%" height="15" fill="rgb(219,138,53)" fg:x="7916" fg:w="6"/><text x="18.7423%" y="63.50"></text></g><g><title>[unknown] (7 samples, 0.02%)</title><rect x="18.4923%" y="229" width="0.0164%" height="15" fill="rgb(211,51,23)" fg:x="7916" fg:w="7"/><text x="18.7423%" y="239.50"></text></g><g><title>[unknown] (7 samples, 0.02%)</title><rect x="18.4923%" y="213" width="0.0164%" height="15" fill="rgb(247,221,28)" fg:x="7916" fg:w="7"/><text x="18.7423%" y="223.50"></text></g><g><title>[unknown] (7 samples, 0.02%)</title><rect x="18.4923%" y="197" width="0.0164%" height="15" fill="rgb(251,222,45)" fg:x="7916" fg:w="7"/><text x="18.7423%" y="207.50"></text></g><g><title>[unknown] (7 samples, 0.02%)</title><rect x="18.4923%" y="181" width="0.0164%" height="15" fill="rgb(217,162,53)" fg:x="7916" fg:w="7"/><text x="18.7423%" y="191.50"></text></g><g><title>[unknown] (7 samples, 0.02%)</title><rect x="18.4923%" y="165" width="0.0164%" height="15" fill="rgb(229,93,14)" fg:x="7916" fg:w="7"/><text x="18.7423%" y="175.50"></text></g><g><title>[unknown] (7 samples, 0.02%)</title><rect x="18.4923%" y="149" width="0.0164%" height="15" fill="rgb(209,67,49)" fg:x="7916" fg:w="7"/><text x="18.7423%" y="159.50"></text></g><g><title>[unknown] (8 samples, 0.02%)</title><rect x="18.4923%" y="245" width="0.0187%" height="15" fill="rgb(213,87,29)" fg:x="7916" fg:w="8"/><text x="18.7423%" y="255.50"></text></g><g><title>[unknown] (9 samples, 0.02%)</title><rect x="18.4923%" y="277" width="0.0210%" height="15" fill="rgb(205,151,52)" fg:x="7916" fg:w="9"/><text x="18.7423%" y="287.50"></text></g><g><title>[unknown] (9 samples, 0.02%)</title><rect x="18.4923%" y="261" width="0.0210%" height="15" fill="rgb(253,215,39)" fg:x="7916" fg:w="9"/><text x="18.7423%" y="271.50"></text></g><g><title>[unknown] (10 samples, 0.02%)</title><rect x="18.4923%" y="325" width="0.0234%" height="15" fill="rgb(221,220,41)" fg:x="7916" fg:w="10"/><text x="18.7423%" y="335.50"></text></g><g><title>[unknown] (10 samples, 0.02%)</title><rect x="18.4923%" y="309" width="0.0234%" height="15" fill="rgb(218,133,21)" fg:x="7916" fg:w="10"/><text x="18.7423%" y="319.50"></text></g><g><title>[unknown] (10 samples, 0.02%)</title><rect x="18.4923%" y="293" width="0.0234%" height="15" fill="rgb(221,193,43)" fg:x="7916" fg:w="10"/><text x="18.7423%" y="303.50"></text></g><g><title>[unknown] (13 samples, 0.03%)</title><rect x="18.4923%" y="341" width="0.0304%" height="15" fill="rgb(240,128,52)" fg:x="7916" fg:w="13"/><text x="18.7423%" y="351.50"></text></g><g><title>[unknown] (17 samples, 0.04%)</title><rect x="18.4923%" y="357" width="0.0397%" height="15" fill="rgb(253,114,12)" fg:x="7916" fg:w="17"/><text x="18.7423%" y="367.50"></text></g><g><title>[unknown] (21 samples, 0.05%)</title><rect x="18.4923%" y="373" width="0.0491%" height="15" fill="rgb(215,223,47)" fg:x="7916" fg:w="21"/><text x="18.7423%" y="383.50"></text></g><g><title>_int_malloc (27 samples, 0.06%)</title><rect x="18.5460%" y="373" width="0.0631%" height="15" fill="rgb(248,225,23)" fg:x="7939" fg:w="27"/><text x="18.7960%" y="383.50"></text></g><g><title>[unknown] (51 samples, 0.12%)</title><rect x="18.4923%" y="389" width="0.1191%" height="15" fill="rgb(250,108,0)" fg:x="7916" fg:w="51"/><text x="18.7423%" y="399.50"></text></g><g><title>_int_free (42 samples, 0.10%)</title><rect x="18.6114%" y="389" width="0.0981%" height="15" fill="rgb(228,208,7)" fg:x="7967" fg:w="42"/><text x="18.8614%" y="399.50"></text></g><g><title>_int_malloc (72 samples, 0.17%)</title><rect x="18.7096%" y="389" width="0.1682%" height="15" fill="rgb(244,45,10)" fg:x="8009" fg:w="72"/><text x="18.9596%" y="399.50"></text></g><g><title>realloc (5 samples, 0.01%)</title><rect x="18.8824%" y="389" width="0.0117%" height="15" fill="rgb(207,125,25)" fg:x="8083" fg:w="5"/><text x="19.1324%" y="399.50"></text></g><g><title>[unknown] (174 samples, 0.41%)</title><rect x="18.4923%" y="405" width="0.4065%" height="15" fill="rgb(210,195,18)" fg:x="7916" fg:w="174"/><text x="18.7423%" y="415.50"></text></g><g><title>_int_free (149 samples, 0.35%)</title><rect x="18.8988%" y="405" width="0.3481%" height="15" fill="rgb(249,80,12)" fg:x="8090" fg:w="149"/><text x="19.1488%" y="415.50"></text></g><g><title>_int_malloc (26 samples, 0.06%)</title><rect x="19.2469%" y="405" width="0.0607%" height="15" fill="rgb(221,65,9)" fg:x="8239" fg:w="26"/><text x="19.4969%" y="415.50"></text></g><g><title>_int_memalign (17 samples, 0.04%)</title><rect x="19.3076%" y="405" width="0.0397%" height="15" fill="rgb(235,49,36)" fg:x="8265" fg:w="17"/><text x="19.5576%" y="415.50"></text></g><g><title>[unknown] (402 samples, 0.94%)</title><rect x="18.4923%" y="421" width="0.9391%" height="15" fill="rgb(225,32,20)" fg:x="7916" fg:w="402"/><text x="18.7423%" y="431.50"></text></g><g><title>unlink_chunk.constprop.0 (29 samples, 0.07%)</title><rect x="19.3637%" y="405" width="0.0677%" height="15" fill="rgb(215,141,46)" fg:x="8289" fg:w="29"/><text x="19.6137%" y="415.50"></text></g><g><title>__memmove_avx_unaligned_erms (1,454 samples, 3.40%)</title><rect x="19.4478%" y="421" width="3.3966%" height="15" fill="rgb(250,160,47)" fg:x="8325" fg:w="1454"/><text x="19.6978%" y="431.50">__m..</text></g><g><title>__memset_avx2_unaligned_erms (49 samples, 0.11%)</title><rect x="22.8444%" y="421" width="0.1145%" height="15" fill="rgb(216,222,40)" fg:x="9779" fg:w="49"/><text x="23.0944%" y="431.50"></text></g><g><title>__mprotect (838 samples, 1.96%)</title><rect x="22.9589%" y="421" width="1.9576%" height="15" fill="rgb(234,217,39)" fg:x="9828" fg:w="838"/><text x="23.2089%" y="431.50">_..</text></g><g><title>[unknown] (833 samples, 1.95%)</title><rect x="22.9705%" y="405" width="1.9459%" height="15" fill="rgb(207,178,40)" fg:x="9833" fg:w="833"/><text x="23.2205%" y="415.50">[..</text></g><g><title>[unknown] (505 samples, 1.18%)</title><rect x="23.7368%" y="389" width="1.1797%" height="15" fill="rgb(221,136,13)" fg:x="10161" fg:w="505"/><text x="23.9868%" y="399.50"></text></g><g><title>[unknown] (502 samples, 1.17%)</title><rect x="23.7438%" y="373" width="1.1727%" height="15" fill="rgb(249,199,10)" fg:x="10164" fg:w="502"/><text x="23.9938%" y="383.50"></text></g><g><title>[unknown] (441 samples, 1.03%)</title><rect x="23.8863%" y="357" width="1.0302%" height="15" fill="rgb(249,222,13)" fg:x="10225" fg:w="441"/><text x="24.1363%" y="367.50"></text></g><g><title>[unknown] (422 samples, 0.99%)</title><rect x="23.9307%" y="341" width="0.9858%" height="15" fill="rgb(244,185,38)" fg:x="10244" fg:w="422"/><text x="24.1807%" y="351.50"></text></g><g><title>[unknown] (386 samples, 0.90%)</title><rect x="24.0148%" y="325" width="0.9017%" height="15" fill="rgb(236,202,9)" fg:x="10280" fg:w="386"/><text x="24.2648%" y="335.50"></text></g><g><title>[unknown] (359 samples, 0.84%)</title><rect x="24.0778%" y="309" width="0.8386%" height="15" fill="rgb(250,229,37)" fg:x="10307" fg:w="359"/><text x="24.3278%" y="319.50"></text></g><g><title>[unknown] (285 samples, 0.67%)</title><rect x="24.2507%" y="293" width="0.6658%" height="15" fill="rgb(206,174,23)" fg:x="10381" fg:w="285"/><text x="24.5007%" y="303.50"></text></g><g><title>[unknown] (242 samples, 0.57%)</title><rect x="24.3512%" y="277" width="0.5653%" height="15" fill="rgb(211,33,43)" fg:x="10424" fg:w="242"/><text x="24.6012%" y="287.50"></text></g><g><title>[unknown] (179 samples, 0.42%)</title><rect x="24.4983%" y="261" width="0.4182%" height="15" fill="rgb(245,58,50)" fg:x="10487" fg:w="179"/><text x="24.7483%" y="271.50"></text></g><g><title>[unknown] (127 samples, 0.30%)</title><rect x="24.6198%" y="245" width="0.2967%" height="15" fill="rgb(244,68,36)" fg:x="10539" fg:w="127"/><text x="24.8698%" y="255.50"></text></g><g><title>[unknown] (78 samples, 0.18%)</title><rect x="24.7343%" y="229" width="0.1822%" height="15" fill="rgb(232,229,15)" fg:x="10588" fg:w="78"/><text x="24.9843%" y="239.50"></text></g><g><title>[unknown] (35 samples, 0.08%)</title><rect x="24.8347%" y="213" width="0.0818%" height="15" fill="rgb(254,30,23)" fg:x="10631" fg:w="35"/><text x="25.0847%" y="223.50"></text></g><g><title>[unknown] (7 samples, 0.02%)</title><rect x="24.9001%" y="197" width="0.0164%" height="15" fill="rgb(235,160,14)" fg:x="10659" fg:w="7"/><text x="25.1501%" y="207.50"></text></g><g><title>__rdl_alloc (31 samples, 0.07%)</title><rect x="24.9188%" y="421" width="0.0724%" height="15" fill="rgb(212,155,44)" fg:x="10667" fg:w="31"/><text x="25.1688%" y="431.50"></text></g><g><title>__rdl_dealloc (10 samples, 0.02%)</title><rect x="24.9912%" y="421" width="0.0234%" height="15" fill="rgb(226,2,50)" fg:x="10698" fg:w="10"/><text x="25.2412%" y="431.50"></text></g><g><title>__rust_try (113 samples, 0.26%)</title><rect x="25.0356%" y="421" width="0.2640%" height="15" fill="rgb(234,177,6)" fg:x="10717" fg:w="113"/><text x="25.2856%" y="431.50"></text></g><g><title>_init (33 samples, 0.08%)</title><rect x="25.3019%" y="421" width="0.0771%" height="15" fill="rgb(217,24,9)" fg:x="10831" fg:w="33"/><text x="25.5519%" y="431.50"></text></g><g><title>_int_free (31 samples, 0.07%)</title><rect x="25.3790%" y="421" width="0.0724%" height="15" fill="rgb(220,13,46)" fg:x="10864" fg:w="31"/><text x="25.6290%" y="431.50"></text></g><g><title>_int_malloc (279 samples, 0.65%)</title><rect x="25.4514%" y="421" width="0.6518%" height="15" fill="rgb(239,221,27)" fg:x="10895" fg:w="279"/><text x="25.7014%" y="431.50"></text></g><g><title>[unknown] (28 samples, 0.07%)</title><rect x="26.0378%" y="405" width="0.0654%" height="15" fill="rgb(222,198,25)" fg:x="11146" fg:w="28"/><text x="26.2878%" y="415.50"></text></g><g><title>[unknown] (20 samples, 0.05%)</title><rect x="26.0565%" y="389" width="0.0467%" height="15" fill="rgb(211,99,13)" fg:x="11154" fg:w="20"/><text x="26.3065%" y="399.50"></text></g><g><title>[unknown] (20 samples, 0.05%)</title><rect x="26.0565%" y="373" width="0.0467%" height="15" fill="rgb(232,111,31)" fg:x="11154" fg:w="20"/><text x="26.3065%" y="383.50"></text></g><g><title>[unknown] (20 samples, 0.05%)</title><rect x="26.0565%" y="357" width="0.0467%" height="15" fill="rgb(245,82,37)" fg:x="11154" fg:w="20"/><text x="26.3065%" y="367.50"></text></g><g><title>[unknown] (17 samples, 0.04%)</title><rect x="26.0635%" y="341" width="0.0397%" height="15" fill="rgb(227,149,46)" fg:x="11157" fg:w="17"/><text x="26.3135%" y="351.50"></text></g><g><title>[unknown] (16 samples, 0.04%)</title><rect x="26.0658%" y="325" width="0.0374%" height="15" fill="rgb(218,36,50)" fg:x="11158" fg:w="16"/><text x="26.3158%" y="335.50"></text></g><g><title>[unknown] (12 samples, 0.03%)</title><rect x="26.0752%" y="309" width="0.0280%" height="15" fill="rgb(226,80,48)" fg:x="11162" fg:w="12"/><text x="26.3252%" y="319.50"></text></g><g><title>[unknown] (11 samples, 0.03%)</title><rect x="26.0775%" y="293" width="0.0257%" height="15" fill="rgb(238,224,15)" fg:x="11163" fg:w="11"/><text x="26.3275%" y="303.50"></text></g><g><title>[unknown] (11 samples, 0.03%)</title><rect x="26.0775%" y="277" width="0.0257%" height="15" fill="rgb(241,136,10)" fg:x="11163" fg:w="11"/><text x="26.3275%" y="287.50"></text></g><g><title>[unknown] (7 samples, 0.02%)</title><rect x="26.0869%" y="261" width="0.0164%" height="15" fill="rgb(208,32,45)" fg:x="11167" fg:w="7"/><text x="26.3369%" y="271.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="26.0892%" y="245" width="0.0140%" height="15" fill="rgb(207,135,9)" fg:x="11168" fg:w="6"/><text x="26.3392%" y="255.50"></text></g><g><title>_int_realloc (8 samples, 0.02%)</title><rect x="26.1032%" y="421" width="0.0187%" height="15" fill="rgb(206,86,44)" fg:x="11174" fg:w="8"/><text x="26.3532%" y="431.50"></text></g><g><title>__posix_memalign (40 samples, 0.09%)</title><rect x="26.4980%" y="405" width="0.0934%" height="15" fill="rgb(245,177,15)" fg:x="11343" fg:w="40"/><text x="26.7480%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (210 samples, 0.49%)</title><rect x="26.1219%" y="421" width="0.4906%" height="15" fill="rgb(206,64,50)" fg:x="11182" fg:w="210"/><text x="26.3719%" y="431.50"></text></g><g><title>_int_memalign (9 samples, 0.02%)</title><rect x="26.5914%" y="405" width="0.0210%" height="15" fill="rgb(234,36,40)" fg:x="11383" fg:w="9"/><text x="26.8414%" y="415.50"></text></g><g><title>alloc::alloc::box_free (49 samples, 0.11%)</title><rect x="26.6218%" y="421" width="0.1145%" height="15" fill="rgb(213,64,8)" fg:x="11396" fg:w="49"/><text x="26.8718%" y="431.50"></text></g><g><title>alloc::alloc::exchange_malloc (27 samples, 0.06%)</title><rect x="26.7363%" y="421" width="0.0631%" height="15" fill="rgb(210,75,36)" fg:x="11445" fg:w="27"/><text x="26.9863%" y="431.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::into_raw (24 samples, 0.06%)</title><rect x="26.7994%" y="421" width="0.0561%" height="15" fill="rgb(229,88,21)" fg:x="11472" fg:w="24"/><text x="27.0494%" y="431.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (8 samples, 0.02%)</title><rect x="26.8554%" y="421" width="0.0187%" height="15" fill="rgb(252,204,47)" fg:x="11496" fg:w="8"/><text x="27.1054%" y="431.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (28 samples, 0.07%)</title><rect x="26.8741%" y="421" width="0.0654%" height="15" fill="rgb(208,77,27)" fg:x="11504" fg:w="28"/><text x="27.1241%" y="431.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::from_raw (26 samples, 0.06%)</title><rect x="26.9395%" y="421" width="0.0607%" height="15" fill="rgb(221,76,26)" fg:x="11532" fg:w="26"/><text x="27.1895%" y="431.50"></text></g><g><title>alloc::boxed::Box&lt;core::mem::maybe_uninit::MaybeUninit&lt;T&gt;,A&gt;::assume_init (32 samples, 0.07%)</title><rect x="27.0003%" y="421" width="0.0748%" height="15" fill="rgb(225,139,18)" fg:x="11558" fg:w="32"/><text x="27.2503%" y="431.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::peek (9 samples, 0.02%)</title><rect x="27.0750%" y="421" width="0.0210%" height="15" fill="rgb(230,137,11)" fg:x="11590" fg:w="9"/><text x="27.3250%" y="431.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (9 samples, 0.02%)</title><rect x="27.0960%" y="421" width="0.0210%" height="15" fill="rgb(212,28,1)" fg:x="11599" fg:w="9"/><text x="27.3460%" y="431.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::push (17 samples, 0.04%)</title><rect x="27.1241%" y="421" width="0.0397%" height="15" fill="rgb(248,164,17)" fg:x="11611" fg:w="17"/><text x="27.3741%" y="431.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,NodeType&gt;,alloc::collections::btree::node::marker::Edge&gt;::right_kv (136 samples, 0.32%)</title><rect x="27.1942%" y="421" width="0.3177%" height="15" fill="rgb(222,171,42)" fg:x="11641" fg:w="136"/><text x="27.4442%" y="431.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="27.4978%" y="405" width="0.0140%" height="15" fill="rgb(243,84,45)" fg:x="11771" fg:w="6"/><text x="27.7478%" y="415.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="27.4978%" y="389" width="0.0140%" height="15" fill="rgb(252,49,23)" fg:x="11771" fg:w="6"/><text x="27.7478%" y="399.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="27.4978%" y="373" width="0.0140%" height="15" fill="rgb(215,19,7)" fg:x="11771" fg:w="6"/><text x="27.7478%" y="383.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="27.4978%" y="357" width="0.0140%" height="15" fill="rgb(238,81,41)" fg:x="11771" fg:w="6"/><text x="27.7478%" y="367.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="27.4978%" y="341" width="0.0140%" height="15" fill="rgb(210,199,37)" fg:x="11771" fg:w="6"/><text x="27.7478%" y="351.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="27.4978%" y="325" width="0.0140%" height="15" fill="rgb(244,192,49)" fg:x="11771" fg:w="6"/><text x="27.7478%" y="335.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="27.4978%" y="309" width="0.0140%" height="15" fill="rgb(226,211,11)" fg:x="11771" fg:w="6"/><text x="27.7478%" y="319.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="27.4978%" y="293" width="0.0140%" height="15" fill="rgb(236,162,54)" fg:x="11771" fg:w="6"/><text x="27.7478%" y="303.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="27.4978%" y="277" width="0.0140%" height="15" fill="rgb(220,229,9)" fg:x="11771" fg:w="6"/><text x="27.7478%" y="287.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="27.4978%" y="261" width="0.0140%" height="15" fill="rgb(250,87,22)" fg:x="11771" fg:w="6"/><text x="27.7478%" y="271.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="27.4978%" y="245" width="0.0140%" height="15" fill="rgb(239,43,17)" fg:x="11771" fg:w="6"/><text x="27.7478%" y="255.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="27.4978%" y="229" width="0.0140%" height="15" fill="rgb(231,177,25)" fg:x="11771" fg:w="6"/><text x="27.7478%" y="239.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="27.4978%" y="213" width="0.0140%" height="15" fill="rgb(219,179,1)" fg:x="11771" fg:w="6"/><text x="27.7478%" y="223.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="27.4978%" y="197" width="0.0140%" height="15" fill="rgb(238,219,53)" fg:x="11771" fg:w="6"/><text x="27.7478%" y="207.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::descend (29 samples, 0.07%)</title><rect x="27.5119%" y="421" width="0.0677%" height="15" fill="rgb(232,167,36)" fg:x="11777" fg:w="29"/><text x="27.7619%" y="431.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::into_kv (98 samples, 0.23%)</title><rect x="27.5796%" y="421" width="0.2289%" height="15" fill="rgb(244,19,51)" fg:x="11806" fg:w="98"/><text x="27.8296%" y="431.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::correct_parent_link (23 samples, 0.05%)</title><rect x="27.8085%" y="421" width="0.0537%" height="15" fill="rgb(224,6,22)" fg:x="11904" fg:w="23"/><text x="28.0585%" y="431.50"></text></g><g><title>alloc::collections::btree::node::LeafNode&lt;K,V&gt;::new (17 samples, 0.04%)</title><rect x="27.8669%" y="421" width="0.0397%" height="15" fill="rgb(224,145,5)" fg:x="11929" fg:w="17"/><text x="28.1169%" y="431.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::force (5 samples, 0.01%)</title><rect x="27.9067%" y="421" width="0.0117%" height="15" fill="rgb(234,130,49)" fg:x="11946" fg:w="5"/><text x="28.1567%" y="431.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,Type&gt;::key_area_mut (27 samples, 0.06%)</title><rect x="27.9183%" y="421" width="0.0631%" height="15" fill="rgb(254,6,2)" fg:x="11951" fg:w="27"/><text x="28.1683%" y="431.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,Type&gt;::val_area_mut (48 samples, 0.11%)</title><rect x="27.9814%" y="421" width="0.1121%" height="15" fill="rgb(208,96,46)" fg:x="11978" fg:w="48"/><text x="28.2314%" y="431.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Internal&gt;::edge_area_mut (7 samples, 0.02%)</title><rect x="28.1052%" y="421" width="0.0164%" height="15" fill="rgb(239,3,39)" fg:x="12031" fg:w="7"/><text x="28.3552%" y="431.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Internal&gt;::push (73 samples, 0.17%)</title><rect x="28.1216%" y="421" width="0.1705%" height="15" fill="rgb(233,210,1)" fg:x="12038" fg:w="73"/><text x="28.3716%" y="431.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;::push (126 samples, 0.29%)</title><rect x="28.2921%" y="421" width="0.2943%" height="15" fill="rgb(244,137,37)" fg:x="12111" fg:w="126"/><text x="28.5421%" y="431.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::Leaf&gt;::from_new_leaf (5 samples, 0.01%)</title><rect x="28.6028%" y="421" width="0.0117%" height="15" fill="rgb(240,136,2)" fg:x="12244" fg:w="5"/><text x="28.8528%" y="431.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::new (5 samples, 0.01%)</title><rect x="28.6145%" y="421" width="0.0117%" height="15" fill="rgb(239,18,37)" fg:x="12249" fg:w="5"/><text x="28.8645%" y="431.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::append (5 samples, 0.01%)</title><rect x="28.6402%" y="421" width="0.0117%" height="15" fill="rgb(218,185,22)" fg:x="12260" fg:w="5"/><text x="28.8902%" y="431.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::as_mut_slices (93 samples, 0.22%)</title><rect x="28.6519%" y="421" width="0.2173%" height="15" fill="rgb(225,218,4)" fg:x="12265" fg:w="93"/><text x="28.9019%" y="431.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::as_slices (90 samples, 0.21%)</title><rect x="28.8691%" y="421" width="0.2102%" height="15" fill="rgb(230,182,32)" fg:x="12358" fg:w="90"/><text x="29.1191%" y="431.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::copy_slice (19 samples, 0.04%)</title><rect x="29.0794%" y="421" width="0.0444%" height="15" fill="rgb(242,56,43)" fg:x="12448" fg:w="19"/><text x="29.3294%" y="431.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::drain (5 samples, 0.01%)</title><rect x="29.1237%" y="421" width="0.0117%" height="15" fill="rgb(233,99,24)" fg:x="12467" fg:w="5"/><text x="29.3737%" y="431.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::front_mut (6 samples, 0.01%)</title><rect x="29.1378%" y="421" width="0.0140%" height="15" fill="rgb(234,209,42)" fg:x="12473" fg:w="6"/><text x="29.3878%" y="431.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::get_mut (17 samples, 0.04%)</title><rect x="29.1564%" y="421" width="0.0397%" height="15" fill="rgb(227,7,12)" fg:x="12481" fg:w="17"/><text x="29.4064%" y="431.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::grow (17 samples, 0.04%)</title><rect x="29.1962%" y="421" width="0.0397%" height="15" fill="rgb(245,203,43)" fg:x="12498" fg:w="17"/><text x="29.4462%" y="431.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::handle_capacity_increase (14 samples, 0.03%)</title><rect x="29.2359%" y="421" width="0.0327%" height="15" fill="rgb(238,205,33)" fg:x="12515" fg:w="14"/><text x="29.4859%" y="431.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::iter (55 samples, 0.13%)</title><rect x="29.2732%" y="421" width="0.1285%" height="15" fill="rgb(231,56,7)" fg:x="12531" fg:w="55"/><text x="29.5232%" y="431.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::iter_mut (42 samples, 0.10%)</title><rect x="29.4017%" y="421" width="0.0981%" height="15" fill="rgb(244,186,29)" fg:x="12586" fg:w="42"/><text x="29.6517%" y="431.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::len (15 samples, 0.04%)</title><rect x="29.4998%" y="421" width="0.0350%" height="15" fill="rgb(234,111,31)" fg:x="12628" fg:w="15"/><text x="29.7498%" y="431.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::pop_front (93 samples, 0.22%)</title><rect x="29.5349%" y="421" width="0.2173%" height="15" fill="rgb(241,149,10)" fg:x="12643" fg:w="93"/><text x="29.7849%" y="431.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::push_back (91 samples, 0.21%)</title><rect x="29.7521%" y="421" width="0.2126%" height="15" fill="rgb(249,206,44)" fg:x="12736" fg:w="91"/><text x="30.0021%" y="431.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::push_front (18 samples, 0.04%)</title><rect x="29.9647%" y="421" width="0.0420%" height="15" fill="rgb(251,153,30)" fg:x="12827" fg:w="18"/><text x="30.2147%" y="431.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::remove (5 samples, 0.01%)</title><rect x="30.0068%" y="421" width="0.0117%" height="15" fill="rgb(239,152,38)" fg:x="12845" fg:w="5"/><text x="30.2568%" y="431.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::reserve (17 samples, 0.04%)</title><rect x="30.0185%" y="421" width="0.0397%" height="15" fill="rgb(249,139,47)" fg:x="12850" fg:w="17"/><text x="30.2685%" y="431.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::slice_ranges (130 samples, 0.30%)</title><rect x="30.0582%" y="421" width="0.3037%" height="15" fill="rgb(244,64,35)" fg:x="12867" fg:w="130"/><text x="30.3082%" y="431.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::to_physical_idx (177 samples, 0.41%)</title><rect x="30.3619%" y="421" width="0.4135%" height="15" fill="rgb(216,46,15)" fg:x="12997" fg:w="177"/><text x="30.6119%" y="431.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::wrap_sub (25 samples, 0.06%)</title><rect x="30.7777%" y="421" width="0.0584%" height="15" fill="rgb(250,74,19)" fg:x="13175" fg:w="25"/><text x="31.0277%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (73 samples, 0.17%)</title><rect x="30.8454%" y="421" width="0.1705%" height="15" fill="rgb(249,42,33)" fg:x="13204" fg:w="73"/><text x="31.0954%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (134 samples, 0.31%)</title><rect x="31.0160%" y="421" width="0.3130%" height="15" fill="rgb(242,149,17)" fg:x="13277" fg:w="134"/><text x="31.2660%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (89 samples, 0.21%)</title><rect x="31.3290%" y="421" width="0.2079%" height="15" fill="rgb(244,29,21)" fg:x="13411" fg:w="89"/><text x="31.5790%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (9 samples, 0.02%)</title><rect x="31.5416%" y="421" width="0.0210%" height="15" fill="rgb(220,130,37)" fg:x="13502" fg:w="9"/><text x="31.7916%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (9 samples, 0.02%)</title><rect x="31.5626%" y="421" width="0.0210%" height="15" fill="rgb(211,67,2)" fg:x="13511" fg:w="9"/><text x="31.8126%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::set_ptr_and_cap (29 samples, 0.07%)</title><rect x="31.5836%" y="421" width="0.0677%" height="15" fill="rgb(235,68,52)" fg:x="13520" fg:w="29"/><text x="31.8336%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (40 samples, 0.09%)</title><rect x="31.6514%" y="421" width="0.0934%" height="15" fill="rgb(246,142,3)" fg:x="13549" fg:w="40"/><text x="31.9014%" y="431.50"></text></g><g><title>alloc::raw_vec::handle_reserve (13 samples, 0.03%)</title><rect x="31.7448%" y="421" width="0.0304%" height="15" fill="rgb(241,25,7)" fg:x="13589" fg:w="13"/><text x="31.9948%" y="431.50"></text></g><g><title>alloc::rc::RcInnerPtr::strong (14 samples, 0.03%)</title><rect x="31.7798%" y="421" width="0.0327%" height="15" fill="rgb(242,119,39)" fg:x="13604" fg:w="14"/><text x="32.0298%" y="431.50"></text></g><g><title>alloc::slice::hack::into_vec (7 samples, 0.02%)</title><rect x="31.8149%" y="421" width="0.0164%" height="15" fill="rgb(241,98,45)" fg:x="13619" fg:w="7"/><text x="32.0649%" y="431.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (33 samples, 0.08%)</title><rect x="31.8312%" y="421" width="0.0771%" height="15" fill="rgb(254,28,30)" fg:x="13626" fg:w="33"/><text x="32.0812%" y="431.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (58 samples, 0.14%)</title><rect x="31.9107%" y="421" width="0.1355%" height="15" fill="rgb(241,142,54)" fg:x="13660" fg:w="58"/><text x="32.1607%" y="431.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::ptr_eq (19 samples, 0.04%)</title><rect x="32.0462%" y="421" width="0.0444%" height="15" fill="rgb(222,85,15)" fg:x="13718" fg:w="19"/><text x="32.2962%" y="431.50"></text></g><g><title>alloc::sync::Arc&lt;dyn core::any::Any+core::marker::Send+core::marker::Sync&gt;::downcast (8 samples, 0.02%)</title><rect x="32.0905%" y="421" width="0.0187%" height="15" fill="rgb(210,85,47)" fg:x="13737" fg:w="8"/><text x="32.3405%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (12 samples, 0.03%)</title><rect x="32.1209%" y="421" width="0.0280%" height="15" fill="rgb(224,206,25)" fg:x="13750" fg:w="12"/><text x="32.3709%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (34 samples, 0.08%)</title><rect x="32.1489%" y="421" width="0.0794%" height="15" fill="rgb(243,201,19)" fg:x="13762" fg:w="34"/><text x="32.3989%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (21 samples, 0.05%)</title><rect x="32.2284%" y="421" width="0.0491%" height="15" fill="rgb(236,59,4)" fg:x="13796" fg:w="21"/><text x="32.4784%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::is_empty (9 samples, 0.02%)</title><rect x="32.2891%" y="421" width="0.0210%" height="15" fill="rgb(254,179,45)" fg:x="13822" fg:w="9"/><text x="32.5391%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (43 samples, 0.10%)</title><rect x="32.3218%" y="421" width="0.1005%" height="15" fill="rgb(226,14,10)" fg:x="13836" fg:w="43"/><text x="32.5718%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (44 samples, 0.10%)</title><rect x="32.4223%" y="421" width="0.1028%" height="15" fill="rgb(244,27,41)" fg:x="13879" fg:w="44"/><text x="32.6723%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::new (5 samples, 0.01%)</title><rect x="32.5297%" y="421" width="0.0117%" height="15" fill="rgb(235,35,32)" fg:x="13925" fg:w="5"/><text x="32.7797%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (11 samples, 0.03%)</title><rect x="32.5414%" y="421" width="0.0257%" height="15" fill="rgb(218,68,31)" fg:x="13930" fg:w="11"/><text x="32.7914%" y="431.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (56 samples, 0.13%)</title><rect x="32.5671%" y="421" width="0.1308%" height="15" fill="rgb(207,120,37)" fg:x="13941" fg:w="56"/><text x="32.8171%" y="431.50"></text></g><g><title>alloc::vec::into_iter::IntoIter&lt;T,A&gt;::as_raw_mut_slice (30 samples, 0.07%)</title><rect x="32.6979%" y="421" width="0.0701%" height="15" fill="rgb(227,98,0)" fg:x="13997" fg:w="30"/><text x="32.9479%" y="431.50"></text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (5 samples, 0.01%)</title><rect x="32.7680%" y="421" width="0.0117%" height="15" fill="rgb(207,7,3)" fg:x="14027" fg:w="5"/><text x="33.0180%" y="431.50"></text></g><g><title>cfree@GLIBC_2.2.5 (153 samples, 0.36%)</title><rect x="32.7820%" y="421" width="0.3574%" height="15" fill="rgb(206,98,19)" fg:x="14033" fg:w="153"/><text x="33.0320%" y="431.50"></text></g><g><title>clock_gettime@@GLIBC_2.17 (134 samples, 0.31%)</title><rect x="33.1394%" y="421" width="0.3130%" height="15" fill="rgb(217,5,26)" fg:x="14186" fg:w="134"/><text x="33.3894%" y="431.50"></text></g><g><title>[[vdso]] (69 samples, 0.16%)</title><rect x="33.2913%" y="405" width="0.1612%" height="15" fill="rgb(235,190,38)" fg:x="14251" fg:w="69"/><text x="33.5413%" y="415.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (82 samples, 0.19%)</title><rect x="33.4525%" y="421" width="0.1916%" height="15" fill="rgb(247,86,24)" fg:x="14320" fg:w="82"/><text x="33.7025%" y="431.50"></text></g><g><title>core::any::TypeId::of (46 samples, 0.11%)</title><rect x="33.6440%" y="421" width="0.1075%" height="15" fill="rgb(205,101,16)" fg:x="14402" fg:w="46"/><text x="33.8940%" y="431.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from (37 samples, 0.09%)</title><rect x="33.7538%" y="421" width="0.0864%" height="15" fill="rgb(246,168,33)" fg:x="14449" fg:w="37"/><text x="34.0038%" y="431.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from::{{closure}} (13 samples, 0.03%)</title><rect x="33.8403%" y="421" width="0.0304%" height="15" fill="rgb(231,114,1)" fg:x="14486" fg:w="13"/><text x="34.0903%" y="431.50"></text></g><g><title>core::array::&lt;impl core::default::Default for [T: 32]&gt;::default (15 samples, 0.04%)</title><rect x="33.8706%" y="421" width="0.0350%" height="15" fill="rgb(207,184,53)" fg:x="14499" fg:w="15"/><text x="34.1206%" y="431.50"></text></g><g><title>core::array::&lt;impl core::hash::Hash for [T: N]&gt;::hash (34 samples, 0.08%)</title><rect x="33.9057%" y="421" width="0.0794%" height="15" fill="rgb(224,95,51)" fg:x="14514" fg:w="34"/><text x="34.1557%" y="431.50"></text></g><g><title>core::array::&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (16 samples, 0.04%)</title><rect x="33.9851%" y="421" width="0.0374%" height="15" fill="rgb(212,188,45)" fg:x="14548" fg:w="16"/><text x="34.2351%" y="431.50"></text></g><g><title>core::array::equality::&lt;impl core::cmp::PartialEq&lt;[B: N]&gt; for [A: N]&gt;::eq (17 samples, 0.04%)</title><rect x="34.0225%" y="421" width="0.0397%" height="15" fill="rgb(223,154,38)" fg:x="14564" fg:w="17"/><text x="34.2725%" y="431.50"></text></g><g><title>core::array::iter::IntoIter&lt;T,_&gt;::as_mut_slice (6 samples, 0.01%)</title><rect x="34.0715%" y="421" width="0.0140%" height="15" fill="rgb(251,22,52)" fg:x="14585" fg:w="6"/><text x="34.3215%" y="431.50"></text></g><g><title>core::cell::BorrowRef::new (37 samples, 0.09%)</title><rect x="34.0855%" y="421" width="0.0864%" height="15" fill="rgb(229,209,22)" fg:x="14591" fg:w="37"/><text x="34.3355%" y="431.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (67 samples, 0.16%)</title><rect x="34.1720%" y="421" width="0.1565%" height="15" fill="rgb(234,138,34)" fg:x="14628" fg:w="67"/><text x="34.4220%" y="431.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::new (53 samples, 0.12%)</title><rect x="34.3285%" y="421" width="0.1238%" height="15" fill="rgb(212,95,11)" fg:x="14695" fg:w="53"/><text x="34.5785%" y="431.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (44 samples, 0.10%)</title><rect x="34.4523%" y="421" width="0.1028%" height="15" fill="rgb(240,179,47)" fg:x="14748" fg:w="44"/><text x="34.7023%" y="431.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (112 samples, 0.26%)</title><rect x="34.5551%" y="421" width="0.2616%" height="15" fill="rgb(240,163,11)" fg:x="14792" fg:w="112"/><text x="34.8051%" y="431.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (29 samples, 0.07%)</title><rect x="34.8167%" y="421" width="0.0677%" height="15" fill="rgb(236,37,12)" fg:x="14904" fg:w="29"/><text x="35.0667%" y="431.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (34 samples, 0.08%)</title><rect x="34.8845%" y="421" width="0.0794%" height="15" fill="rgb(232,164,16)" fg:x="14933" fg:w="34"/><text x="35.1345%" y="431.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (40 samples, 0.09%)</title><rect x="34.9639%" y="421" width="0.0934%" height="15" fill="rgb(244,205,15)" fg:x="14967" fg:w="40"/><text x="35.2139%" y="431.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (122 samples, 0.29%)</title><rect x="35.0574%" y="421" width="0.2850%" height="15" fill="rgb(223,117,47)" fg:x="15007" fg:w="122"/><text x="35.3074%" y="431.50"></text></g><g><title>core::cmp::Ord::min (27 samples, 0.06%)</title><rect x="35.3424%" y="421" width="0.0631%" height="15" fill="rgb(244,107,35)" fg:x="15129" fg:w="27"/><text x="35.5924%" y="431.50"></text></g><g><title>core::cmp::PartialEq::ne (22 samples, 0.05%)</title><rect x="35.4054%" y="421" width="0.0514%" height="15" fill="rgb(205,140,8)" fg:x="15156" fg:w="22"/><text x="35.6554%" y="431.50"></text></g><g><title>core::cmp::PartialOrd::gt (30 samples, 0.07%)</title><rect x="35.4568%" y="421" width="0.0701%" height="15" fill="rgb(228,84,46)" fg:x="15178" fg:w="30"/><text x="35.7068%" y="431.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (80 samples, 0.19%)</title><rect x="35.5269%" y="421" width="0.1869%" height="15" fill="rgb(254,188,9)" fg:x="15208" fg:w="80"/><text x="35.7769%" y="431.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u64&gt;::eq (21 samples, 0.05%)</title><rect x="35.7185%" y="421" width="0.0491%" height="15" fill="rgb(206,112,54)" fg:x="15290" fg:w="21"/><text x="35.9685%" y="431.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (16 samples, 0.04%)</title><rect x="35.7699%" y="421" width="0.0374%" height="15" fill="rgb(216,84,49)" fg:x="15312" fg:w="16"/><text x="36.0199%" y="431.50"></text></g><g><title>core::cmp::max_by (56 samples, 0.13%)</title><rect x="35.8072%" y="421" width="0.1308%" height="15" fill="rgb(214,194,35)" fg:x="15328" fg:w="56"/><text x="36.0572%" y="431.50"></text></g><g><title>core::cmp::min_by (47 samples, 0.11%)</title><rect x="35.9474%" y="421" width="0.1098%" height="15" fill="rgb(249,28,3)" fg:x="15388" fg:w="47"/><text x="36.1974%" y="431.50"></text></g><g><title>core::convert::num::&lt;impl core::convert::TryFrom&lt;u128&gt; for u64&gt;::try_from (8 samples, 0.02%)</title><rect x="36.0572%" y="421" width="0.0187%" height="15" fill="rgb(222,56,52)" fg:x="15435" fg:w="8"/><text x="36.3072%" y="431.50"></text></g><g><title>core::convert::num::ptr_try_from_impls::&lt;impl core::convert::TryFrom&lt;usize&gt; for u16&gt;::try_from (9 samples, 0.02%)</title><rect x="36.0759%" y="421" width="0.0210%" height="15" fill="rgb(245,217,50)" fg:x="15443" fg:w="9"/><text x="36.3259%" y="431.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (34 samples, 0.08%)</title><rect x="36.0969%" y="421" width="0.0794%" height="15" fill="rgb(213,201,24)" fg:x="15452" fg:w="34"/><text x="36.3469%" y="431.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (5 samples, 0.01%)</title><rect x="36.1763%" y="421" width="0.0117%" height="15" fill="rgb(248,116,28)" fg:x="15486" fg:w="5"/><text x="36.4263%" y="431.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (211 samples, 0.49%)</title><rect x="36.1880%" y="421" width="0.4929%" height="15" fill="rgb(219,72,43)" fg:x="15491" fg:w="211"/><text x="36.4380%" y="431.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (171 samples, 0.40%)</title><rect x="36.6809%" y="421" width="0.3995%" height="15" fill="rgb(209,138,14)" fg:x="15702" fg:w="171"/><text x="36.9309%" y="431.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (86 samples, 0.20%)</title><rect x="37.0804%" y="421" width="0.2009%" height="15" fill="rgb(222,18,33)" fg:x="15873" fg:w="86"/><text x="37.3304%" y="431.50"></text></g><g><title>core::hash::BuildHasher::hash_one (48 samples, 0.11%)</title><rect x="37.2813%" y="421" width="0.1121%" height="15" fill="rgb(213,199,7)" fg:x="15959" fg:w="48"/><text x="37.5313%" y="431.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (19 samples, 0.04%)</title><rect x="37.3934%" y="421" width="0.0444%" height="15" fill="rgb(250,110,10)" fg:x="16007" fg:w="19"/><text x="37.6434%" y="431.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (24 samples, 0.06%)</title><rect x="37.4378%" y="421" width="0.0561%" height="15" fill="rgb(248,123,6)" fg:x="16026" fg:w="24"/><text x="37.6878%" y="431.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u16&gt;::hash (9 samples, 0.02%)</title><rect x="37.4939%" y="421" width="0.0210%" height="15" fill="rgb(206,91,31)" fg:x="16050" fg:w="9"/><text x="37.7439%" y="431.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (11 samples, 0.03%)</title><rect x="37.5149%" y="421" width="0.0257%" height="15" fill="rgb(211,154,13)" fg:x="16059" fg:w="11"/><text x="37.7649%" y="431.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (30 samples, 0.07%)</title><rect x="37.5406%" y="421" width="0.0701%" height="15" fill="rgb(225,148,7)" fg:x="16070" fg:w="30"/><text x="37.7906%" y="431.50"></text></g><g><title>core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt;::iter_fold (13 samples, 0.03%)</title><rect x="37.6107%" y="421" width="0.0304%" height="15" fill="rgb(220,160,43)" fg:x="16100" fg:w="13"/><text x="37.8607%" y="431.50"></text></g><g><title>core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt;::iter_fold::flatten::{{closure}} (18 samples, 0.04%)</title><rect x="37.6410%" y="421" width="0.0420%" height="15" fill="rgb(213,52,39)" fg:x="16113" fg:w="18"/><text x="37.8910%" y="431.50"></text></g><g><title>core::iter::adapters::flatten::and_then_or_clear (134 samples, 0.31%)</title><rect x="37.6831%" y="421" width="0.3130%" height="15" fill="rgb(243,137,7)" fg:x="16131" fg:w="134"/><text x="37.9331%" y="431.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (148 samples, 0.35%)</title><rect x="37.9961%" y="421" width="0.3457%" height="15" fill="rgb(230,79,13)" fg:x="16265" fg:w="148"/><text x="38.2461%" y="431.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (17 samples, 0.04%)</title><rect x="38.3419%" y="421" width="0.0397%" height="15" fill="rgb(247,105,23)" fg:x="16413" fg:w="17"/><text x="38.5919%" y="431.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::size_hint (8 samples, 0.02%)</title><rect x="38.3816%" y="421" width="0.0187%" height="15" fill="rgb(223,179,41)" fg:x="16430" fg:w="8"/><text x="38.6316%" y="431.50"></text></g><g><title>core::iter::traits::exact_size::ExactSizeIterator::len (18 samples, 0.04%)</title><rect x="38.4003%" y="421" width="0.0420%" height="15" fill="rgb(218,9,34)" fg:x="16438" fg:w="18"/><text x="38.6503%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::cloned (8 samples, 0.02%)</title><rect x="38.4423%" y="421" width="0.0187%" height="15" fill="rgb(222,106,8)" fg:x="16456" fg:w="8"/><text x="38.6923%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::count::{{closure}} (13 samples, 0.03%)</title><rect x="38.4750%" y="421" width="0.0304%" height="15" fill="rgb(211,220,0)" fg:x="16470" fg:w="13"/><text x="38.7250%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::flat_map (27 samples, 0.06%)</title><rect x="38.5054%" y="421" width="0.0631%" height="15" fill="rgb(229,52,16)" fg:x="16483" fg:w="27"/><text x="38.7554%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (114 samples, 0.27%)</title><rect x="38.5685%" y="421" width="0.2663%" height="15" fill="rgb(212,155,18)" fg:x="16510" fg:w="114"/><text x="38.8185%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (33 samples, 0.08%)</title><rect x="38.8348%" y="421" width="0.0771%" height="15" fill="rgb(242,21,14)" fg:x="16624" fg:w="33"/><text x="39.0848%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (6 samples, 0.01%)</title><rect x="38.9119%" y="421" width="0.0140%" height="15" fill="rgb(222,19,48)" fg:x="16657" fg:w="6"/><text x="39.1619%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::map (36 samples, 0.08%)</title><rect x="38.9259%" y="421" width="0.0841%" height="15" fill="rgb(232,45,27)" fg:x="16663" fg:w="36"/><text x="39.1759%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (5 samples, 0.01%)</title><rect x="39.0100%" y="421" width="0.0117%" height="15" fill="rgb(249,103,42)" fg:x="16699" fg:w="5"/><text x="39.2600%" y="431.50"></text></g><g><title>core::mem::drop (72 samples, 0.17%)</title><rect x="39.0217%" y="421" width="0.1682%" height="15" fill="rgb(246,81,33)" fg:x="16704" fg:w="72"/><text x="39.2717%" y="431.50"></text></g><g><title>core::mem::forget (39 samples, 0.09%)</title><rect x="39.1899%" y="421" width="0.0911%" height="15" fill="rgb(252,33,42)" fg:x="16776" fg:w="39"/><text x="39.4399%" y="431.50"></text></g><g><title>core::mem::needs_drop (107 samples, 0.25%)</title><rect x="39.2810%" y="421" width="0.2500%" height="15" fill="rgb(209,212,41)" fg:x="16815" fg:w="107"/><text x="39.5310%" y="431.50"></text></g><g><title>core::mem::swap (44 samples, 0.10%)</title><rect x="39.5333%" y="421" width="0.1028%" height="15" fill="rgb(207,154,6)" fg:x="16923" fg:w="44"/><text x="39.7833%" y="431.50"></text></g><g><title>core::mem::take (44 samples, 0.10%)</title><rect x="39.6360%" y="421" width="0.1028%" height="15" fill="rgb(223,64,47)" fg:x="16967" fg:w="44"/><text x="39.8860%" y="431.50"></text></g><g><title>core::num::&lt;impl u16&gt;::checked_add (6 samples, 0.01%)</title><rect x="39.7388%" y="421" width="0.0140%" height="15" fill="rgb(211,161,38)" fg:x="17011" fg:w="6"/><text x="39.9888%" y="431.50"></text></g><g><title>core::num::&lt;impl u16&gt;::from_be_bytes (107 samples, 0.25%)</title><rect x="39.7528%" y="421" width="0.2500%" height="15" fill="rgb(219,138,40)" fg:x="17017" fg:w="107"/><text x="40.0028%" y="431.50"></text></g><g><title>core::num::&lt;impl u16&gt;::to_be_bytes (18 samples, 0.04%)</title><rect x="40.0028%" y="421" width="0.0420%" height="15" fill="rgb(241,228,46)" fg:x="17124" fg:w="18"/><text x="40.2528%" y="431.50"></text></g><g><title>core::num::&lt;impl u32&gt;::from_be_bytes (8 samples, 0.02%)</title><rect x="40.0449%" y="421" width="0.0187%" height="15" fill="rgb(223,209,38)" fg:x="17142" fg:w="8"/><text x="40.2949%" y="431.50"></text></g><g><title>core::num::&lt;impl u32&gt;::from_ne_bytes (15 samples, 0.04%)</title><rect x="40.0635%" y="421" width="0.0350%" height="15" fill="rgb(236,164,45)" fg:x="17150" fg:w="15"/><text x="40.3135%" y="431.50"></text></g><g><title>core::num::&lt;impl u32&gt;::to_be_bytes (13 samples, 0.03%)</title><rect x="40.0986%" y="421" width="0.0304%" height="15" fill="rgb(231,15,5)" fg:x="17165" fg:w="13"/><text x="40.3486%" y="431.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (19 samples, 0.04%)</title><rect x="40.1290%" y="421" width="0.0444%" height="15" fill="rgb(252,35,15)" fg:x="17178" fg:w="19"/><text x="40.3790%" y="431.50"></text></g><g><title>core::num::&lt;impl usize&gt;::pow (20 samples, 0.05%)</title><rect x="40.1733%" y="421" width="0.0467%" height="15" fill="rgb(248,181,18)" fg:x="17197" fg:w="20"/><text x="40.4233%" y="431.50"></text></g><g><title>core::num::nonzero::NonZeroU16::new (14 samples, 0.03%)</title><rect x="40.2201%" y="421" width="0.0327%" height="15" fill="rgb(233,39,42)" fg:x="17217" fg:w="14"/><text x="40.4701%" y="431.50"></text></g><g><title>core::num::nonzero::NonZeroU16::trailing_zeros (6 samples, 0.01%)</title><rect x="40.2528%" y="421" width="0.0140%" height="15" fill="rgb(238,110,33)" fg:x="17231" fg:w="6"/><text x="40.5028%" y="431.50"></text></g><g><title>core::ops::function::FnMut::call_mut (30 samples, 0.07%)</title><rect x="40.2785%" y="421" width="0.0701%" height="15" fill="rgb(233,195,10)" fg:x="17242" fg:w="30"/><text x="40.5285%" y="431.50"></text></g><g><title>core::ops::function::FnOnce::call_once (138 samples, 0.32%)</title><rect x="40.3485%" y="421" width="0.3224%" height="15" fill="rgb(254,105,3)" fg:x="17272" fg:w="138"/><text x="40.5985%" y="431.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (11 samples, 0.03%)</title><rect x="40.6709%" y="421" width="0.0257%" height="15" fill="rgb(221,225,9)" fg:x="17410" fg:w="11"/><text x="40.9209%" y="431.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::cloned (147 samples, 0.34%)</title><rect x="40.6990%" y="421" width="0.3434%" height="15" fill="rgb(224,227,45)" fg:x="17422" fg:w="147"/><text x="40.9490%" y="431.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (12 samples, 0.03%)</title><rect x="41.0424%" y="421" width="0.0280%" height="15" fill="rgb(229,198,43)" fg:x="17569" fg:w="12"/><text x="41.2924%" y="431.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_mut (22 samples, 0.05%)</title><rect x="41.0704%" y="421" width="0.0514%" height="15" fill="rgb(206,209,35)" fg:x="17581" fg:w="22"/><text x="41.3204%" y="431.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (98 samples, 0.23%)</title><rect x="41.1218%" y="421" width="0.2289%" height="15" fill="rgb(245,195,53)" fg:x="17603" fg:w="98"/><text x="41.3718%" y="431.50"></text></g><g><title>core::option::Option&lt;T&gt;::expect (76 samples, 0.18%)</title><rect x="41.3507%" y="421" width="0.1775%" height="15" fill="rgb(240,92,26)" fg:x="17701" fg:w="76"/><text x="41.6007%" y="431.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_none (73 samples, 0.17%)</title><rect x="41.5283%" y="421" width="0.1705%" height="15" fill="rgb(207,40,23)" fg:x="17777" fg:w="73"/><text x="41.7783%" y="431.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (24 samples, 0.06%)</title><rect x="41.6988%" y="421" width="0.0561%" height="15" fill="rgb(223,111,35)" fg:x="17850" fg:w="24"/><text x="41.9488%" y="431.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (172 samples, 0.40%)</title><rect x="41.7549%" y="421" width="0.4018%" height="15" fill="rgb(229,147,28)" fg:x="17874" fg:w="172"/><text x="42.0049%" y="431.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or (5 samples, 0.01%)</title><rect x="42.1567%" y="421" width="0.0117%" height="15" fill="rgb(211,29,28)" fg:x="18046" fg:w="5"/><text x="42.4067%" y="431.50"></text></g><g><title>core::option::Option&lt;T&gt;::ok_or (176 samples, 0.41%)</title><rect x="42.1683%" y="421" width="0.4111%" height="15" fill="rgb(228,72,33)" fg:x="18051" fg:w="176"/><text x="42.4183%" y="431.50"></text></g><g><title>core::option::Option&lt;T&gt;::or_else (27 samples, 0.06%)</title><rect x="42.5795%" y="421" width="0.0631%" height="15" fill="rgb(205,214,31)" fg:x="18227" fg:w="27"/><text x="42.8295%" y="431.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (85 samples, 0.20%)</title><rect x="42.6426%" y="421" width="0.1986%" height="15" fill="rgb(224,111,15)" fg:x="18254" fg:w="85"/><text x="42.8926%" y="431.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (43 samples, 0.10%)</title><rect x="42.8411%" y="421" width="0.1005%" height="15" fill="rgb(253,21,26)" fg:x="18339" fg:w="43"/><text x="43.0911%" y="431.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or (95 samples, 0.22%)</title><rect x="42.9416%" y="421" width="0.2219%" height="15" fill="rgb(245,139,43)" fg:x="18382" fg:w="95"/><text x="43.1916%" y="431.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (24 samples, 0.06%)</title><rect x="43.1635%" y="421" width="0.0561%" height="15" fill="rgb(252,170,7)" fg:x="18477" fg:w="24"/><text x="43.4135%" y="431.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_null (22 samples, 0.05%)</title><rect x="43.2196%" y="421" width="0.0514%" height="15" fill="rgb(231,118,14)" fg:x="18501" fg:w="22"/><text x="43.4696%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;(core::any::TypeId,alloc::boxed::Box&lt;dyn core::any::Any&gt;)&gt; (6 samples, 0.01%)</title><rect x="43.2710%" y="421" width="0.0140%" height="15" fill="rgb(238,83,0)" fg:x="18523" fg:w="6"/><text x="43.5210%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::Dropper&lt;elvis_core::message::chunk::Chunk&gt;&gt; (26 samples, 0.06%)</title><rect x="43.2920%" y="421" width="0.0607%" height="15" fill="rgb(221,39,39)" fg:x="18532" fg:w="26"/><text x="43.5420%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;elvis_core::protocols::tcp::tcb::segment::Segment,alloc::alloc::Global&gt;&gt; (10 samples, 0.02%)</title><rect x="43.3621%" y="421" width="0.0234%" height="15" fill="rgb(222,119,46)" fg:x="18562" fg:w="10"/><text x="43.6121%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;elvis_core::protocols::tcp::tcp_parsing::TcpHeader,alloc::alloc::Global&gt;&gt; (20 samples, 0.05%)</title><rect x="43.3854%" y="421" width="0.0467%" height="15" fill="rgb(222,165,49)" fg:x="18572" fg:w="20"/><text x="43.6354%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;[core::option::Option&lt;core::task::wake::Waker&gt;: 32]&gt; (5 samples, 0.01%)</title><rect x="43.4345%" y="421" width="0.0117%" height="15" fill="rgb(219,113,52)" fg:x="18593" fg:w="5"/><text x="43.6845%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;[core::task::wake::Waker]&gt; (5 samples, 0.01%)</title><rect x="43.4462%" y="421" width="0.0117%" height="15" fill="rgb(214,7,15)" fg:x="18598" fg:w="5"/><text x="43.6962%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;[elvis_core::message::chunk::Chunk]&gt; (32 samples, 0.07%)</title><rect x="43.4578%" y="421" width="0.0748%" height="15" fill="rgb(235,32,4)" fg:x="18603" fg:w="32"/><text x="43.7078%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;[elvis_core::protocols::tcp::tcb::segment::Segment]&gt; (8 samples, 0.02%)</title><rect x="43.5326%" y="421" width="0.0187%" height="15" fill="rgb(238,90,54)" fg:x="18635" fg:w="8"/><text x="43.7826%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn core::any::Any&gt;&gt; (29 samples, 0.07%)</title><rect x="43.5513%" y="421" width="0.0677%" height="15" fill="rgb(213,208,19)" fg:x="18643" fg:w="29"/><text x="43.8013%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;tokio::runtime::task::core::Cell&lt;elvis_core::protocols::pci::pci_session::PciSession::send_pci::{{closure}},alloc::sync::Arc&lt;tokio::runtime::scheduler::current_thread::Handle&gt;&gt;&gt;&gt; (7 samples, 0.02%)</title><rect x="43.6237%" y="421" width="0.0164%" height="15" fill="rgb(233,156,4)" fg:x="18674" fg:w="7"/><text x="43.8737%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;tokio::runtime::task::core::Cell&lt;elvis_core::protocols::socket_api::socket::Socket::send&lt;alloc::vec::Vec&lt;u8&gt;&gt;::{{closure}},alloc::sync::Arc&lt;tokio::runtime::scheduler::current_thread::Handle&gt;&gt;&gt;&gt; (5 samples, 0.01%)</title><rect x="43.6401%" y="421" width="0.0117%" height="15" fill="rgb(207,194,5)" fg:x="18681" fg:w="5"/><text x="43.8901%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;tokio::runtime::task::core::Cell&lt;elvis_core::protocols::tcp::tcp_session::TcpSession::receive::{{closure}},alloc::sync::Arc&lt;tokio::runtime::scheduler::current_thread::Handle&gt;&gt;&gt;&gt; (7 samples, 0.02%)</title><rect x="43.6517%" y="421" width="0.0164%" height="15" fill="rgb(206,111,30)" fg:x="18686" fg:w="7"/><text x="43.9017%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::vec_deque::VecDeque&lt;elvis_core::message::chunk::Chunk&gt;&gt; (32 samples, 0.07%)</title><rect x="43.6728%" y="421" width="0.0748%" height="15" fill="rgb(243,70,54)" fg:x="18695" fg:w="32"/><text x="43.9228%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::vec_deque::drain::Drain&lt;elvis_core::message::chunk::Chunk&gt;&gt; (5 samples, 0.01%)</title><rect x="43.7475%" y="421" width="0.0117%" height="15" fill="rgb(242,28,8)" fg:x="18727" fg:w="5"/><text x="43.9975%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;elvis_core::message::chunk::Chunk&gt;&gt; (10 samples, 0.02%)</title><rect x="43.7592%" y="421" width="0.0234%" height="15" fill="rgb(219,106,18)" fg:x="18732" fg:w="10"/><text x="44.0092%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;elvis_core::protocols::tcp::tcp_parsing::TcpHeader&gt;&gt; (20 samples, 0.05%)</title><rect x="43.7872%" y="421" width="0.0467%" height="15" fill="rgb(244,222,10)" fg:x="18744" fg:w="20"/><text x="44.0372%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn elvis_core::protocol::Protocol&gt;&gt; (6 samples, 0.01%)</title><rect x="43.8596%" y="421" width="0.0140%" height="15" fill="rgb(236,179,52)" fg:x="18775" fg:w="6"/><text x="44.1096%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn elvis_core::session::Session&gt;&gt; (10 samples, 0.02%)</title><rect x="43.8737%" y="421" width="0.0234%" height="15" fill="rgb(213,23,39)" fg:x="18781" fg:w="10"/><text x="44.1237%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;elvis_core::protocols::pci::Pci&gt;&gt; (5 samples, 0.01%)</title><rect x="43.8970%" y="421" width="0.0117%" height="15" fill="rgb(238,48,10)" fg:x="18791" fg:w="5"/><text x="44.1470%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;elvis_core::protocols::pci::pci_session::PciSession&gt;&gt; (8 samples, 0.02%)</title><rect x="43.9087%" y="421" width="0.0187%" height="15" fill="rgb(251,196,23)" fg:x="18796" fg:w="8"/><text x="44.1587%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;std::collections::hash::map::HashMap&lt;core::any::TypeId,(alloc::sync::Arc&lt;dyn core::any::Any+core::marker::Send+core::marker::Sync&gt;,alloc::sync::Arc&lt;dyn elvis_core::protocol::Protocol&gt;),core::hash::BuildHasherDefault&lt;rustc_hash::FxHasher&gt;&gt;&gt;&gt; (19 samples, 0.04%)</title><rect x="43.9274%" y="421" width="0.0444%" height="15" fill="rgb(250,152,24)" fg:x="18804" fg:w="19"/><text x="44.1774%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;tokio::runtime::scheduler::current_thread::Handle&gt;&gt; (7 samples, 0.02%)</title><rect x="43.9788%" y="421" width="0.0164%" height="15" fill="rgb(209,150,17)" fg:x="18826" fg:w="7"/><text x="44.2288%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;tokio::sync::broadcast::Shared&lt;elvis_core::shutdown::ExitStatus&gt;&gt;&gt; (10 samples, 0.02%)</title><rect x="43.9951%" y="421" width="0.0234%" height="15" fill="rgb(234,202,34)" fg:x="18833" fg:w="10"/><text x="44.2451%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (7 samples, 0.02%)</title><rect x="44.0255%" y="421" width="0.0164%" height="15" fill="rgb(253,148,53)" fg:x="18846" fg:w="7"/><text x="44.2755%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (6 samples, 0.01%)</title><rect x="44.0652%" y="421" width="0.0140%" height="15" fill="rgb(218,129,16)" fg:x="18863" fg:w="6"/><text x="44.3152%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::set_len_on_drop::SetLenOnDrop&gt; (12 samples, 0.03%)</title><rect x="44.0933%" y="421" width="0.0280%" height="15" fill="rgb(216,85,19)" fg:x="18875" fg:w="12"/><text x="44.3433%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::BorrowRef&gt; (18 samples, 0.04%)</title><rect x="44.1236%" y="421" width="0.0420%" height="15" fill="rgb(235,228,7)" fg:x="18888" fg:w="18"/><text x="44.3736%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::BorrowRefMut&gt; (29 samples, 0.07%)</title><rect x="44.1657%" y="421" width="0.0677%" height="15" fill="rgb(245,175,0)" fg:x="18906" fg:w="29"/><text x="44.4157%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::Ref&lt;core::option::Option&lt;tokio::runtime::scheduler::Handle&gt;&gt;&gt; (14 samples, 0.03%)</title><rect x="44.2334%" y="421" width="0.0327%" height="15" fill="rgb(208,168,36)" fg:x="18935" fg:w="14"/><text x="44.4834%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefMut&lt;core::option::Option&lt;alloc::boxed::Box&lt;tokio::runtime::scheduler::current_thread::Core&gt;&gt;&gt;&gt; (33 samples, 0.08%)</title><rect x="44.2685%" y="421" width="0.0771%" height="15" fill="rgb(246,171,24)" fg:x="18950" fg:w="33"/><text x="44.5185%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;core::option::Option&lt;core::task::wake::Waker&gt;&gt;&gt; (25 samples, 0.06%)</title><rect x="44.3456%" y="421" width="0.0584%" height="15" fill="rgb(215,142,24)" fg:x="18983" fg:w="25"/><text x="44.5956%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;elvis_core::protocols::ipv4::reassembly::Reassembly&gt;&gt; (10 samples, 0.02%)</title><rect x="44.4040%" y="421" width="0.0234%" height="15" fill="rgb(250,187,7)" fg:x="19008" fg:w="10"/><text x="44.6540%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;tokio::runtime::task::core::Stage&lt;elvis_core::protocols::pci::pci_session::PciSession::send_pci::{{closure}}&gt;&gt;&gt; (10 samples, 0.02%)</title><rect x="44.4273%" y="421" width="0.0234%" height="15" fill="rgb(228,66,33)" fg:x="19018" fg:w="10"/><text x="44.6773%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;tokio::runtime::time::entry::TimerShared&gt;&gt; (13 samples, 0.03%)</title><rect x="44.4553%" y="421" width="0.0304%" height="15" fill="rgb(234,215,21)" fg:x="19030" fg:w="13"/><text x="44.7053%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;tokio::sync::broadcast::Waiter&gt;&gt; (9 samples, 0.02%)</title><rect x="44.4857%" y="421" width="0.0210%" height="15" fill="rgb(222,191,20)" fg:x="19043" fg:w="9"/><text x="44.7357%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::map_fold&lt;elvis_core::protocols::tcp::tcp_parsing::TcpHeader,elvis_core::protocols::tcp::tcb::segment::Segment,(),elvis_core::protocols::tcp::tcb::Tcb::segments::{{closure}},core::iter::traits::iterator::Iterator::for_each::call&lt;elvis_core::protocols::tcp::tcb::segment::Segment,alloc::vec::Vec&lt;elvis_core::protocols::tcp::tcb::segment::Segment&gt;::extend_trusted&lt;core::iter::adapters::map::Map&lt;alloc::vec::into_iter::IntoIter&lt;elvis_core::protocols::tcp::tcp_parsing::TcpHeader&gt;,elvis_core::protocols::tcp::tcb::Tcb::segments::{{closure}}&gt;&gt;::{{closure}}&gt;::{{closure}}&gt;::{{closure}}&gt; (5 samples, 0.01%)</title><rect x="44.5067%" y="421" width="0.0117%" height="15" fill="rgb(245,79,54)" fg:x="19052" fg:w="5"/><text x="44.7567%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::traits::iterator::Iterator::for_each::call&lt;elvis_core::protocols::tcp::tcb::segment::Segment,alloc::vec::Vec&lt;elvis_core::protocols::tcp::tcb::segment::Segment&gt;::extend_trusted&lt;core::iter::adapters::map::Map&lt;alloc::vec::into_iter::IntoIter&lt;elvis_core::protocols::tcp::tcp_parsing::TcpHeader&gt;,elvis_core::protocols::tcp::tcb::Tcb::segments::{{closure}}&gt;&gt;::{{closure}}&gt;::{{closure}}&gt; (7 samples, 0.02%)</title><rect x="44.5231%" y="421" width="0.0164%" height="15" fill="rgb(240,10,37)" fg:x="19059" fg:w="7"/><text x="44.7731%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::boxed::Box&lt;dyn core::any::Any+core::marker::Send&gt;&gt;&gt; (28 samples, 0.07%)</title><rect x="44.5418%" y="421" width="0.0654%" height="15" fill="rgb(214,192,32)" fg:x="19067" fg:w="28"/><text x="44.7918%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::boxed::Box&lt;dyn core::any::Any&gt;&gt;&gt; (13 samples, 0.03%)</title><rect x="44.6072%" y="421" width="0.0304%" height="15" fill="rgb(209,36,54)" fg:x="19095" fg:w="13"/><text x="44.8572%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::boxed::Box&lt;tokio::runtime::scheduler::current_thread::Core&gt;&gt;&gt; (17 samples, 0.04%)</title><rect x="44.6376%" y="421" width="0.0397%" height="15" fill="rgb(220,10,11)" fg:x="19108" fg:w="17"/><text x="44.8876%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;core::task::wake::Waker&gt;&gt; (124 samples, 0.29%)</title><rect x="44.6773%" y="421" width="0.2897%" height="15" fill="rgb(221,106,17)" fg:x="19125" fg:w="124"/><text x="44.9273%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;elvis_core::message::chunk::Chunk&gt;&gt; (6 samples, 0.01%)</title><rect x="44.9693%" y="421" width="0.0140%" height="15" fill="rgb(251,142,44)" fg:x="19250" fg:w="6"/><text x="45.2193%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;std::sync::mutex::MutexGuard&lt;tokio::sync::batch_semaphore::Waitlist&gt;&gt;&gt; (6 samples, 0.01%)</title><rect x="44.9973%" y="421" width="0.0140%" height="15" fill="rgb(238,13,15)" fg:x="19262" fg:w="6"/><text x="45.2473%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;(),alloc::boxed::Box&lt;dyn core::any::Any+core::marker::Send&gt;&gt;&gt; (31 samples, 0.07%)</title><rect x="45.0113%" y="421" width="0.0724%" height="15" fill="rgb(208,107,27)" fg:x="19268" fg:w="31"/><text x="45.2613%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;(),tokio::runtime::task::error::JoinError&gt;&gt; (5 samples, 0.01%)</title><rect x="45.0837%" y="421" width="0.0117%" height="15" fill="rgb(205,136,37)" fg:x="19299" fg:w="5"/><text x="45.3337%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;tokio::runtime::coop::with_budget::ResetGuard,std::thread::local::AccessError&gt;&gt; (32 samples, 0.07%)</title><rect x="45.0954%" y="421" width="0.0748%" height="15" fill="rgb(250,205,27)" fg:x="19304" fg:w="32"/><text x="45.3454%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::task::poll::Poll&lt;core::option::Option&lt;elvis_core::protocols::tcp::tcp_session::Instruction&gt;&gt;&gt; (31 samples, 0.07%)</title><rect x="45.1702%" y="421" width="0.0724%" height="15" fill="rgb(210,80,43)" fg:x="19336" fg:w="31"/><text x="45.4202%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::task::poll::Poll&lt;tokio::runtime::coop::RestoreOnPending&gt;&gt; (20 samples, 0.05%)</title><rect x="45.2426%" y="421" width="0.0467%" height="15" fill="rgb(247,160,36)" fg:x="19367" fg:w="20"/><text x="45.4926%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::task::wake::Waker&gt; (19 samples, 0.04%)</title><rect x="45.2893%" y="421" width="0.0444%" height="15" fill="rgb(234,13,49)" fg:x="19387" fg:w="19"/><text x="45.5393%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;dashmap::mapref::entry::OccupiedEntry&lt;elvis_core::protocols::utility::Endpoints,alloc::sync::Arc&lt;elvis_core::protocols::tcp::tcp_session::TcpSession&gt;,core::hash::BuildHasherDefault&lt;rustc_hash::FxHasher&gt;&gt;&gt; (7 samples, 0.02%)</title><rect x="45.3384%" y="421" width="0.0164%" height="15" fill="rgb(234,122,0)" fg:x="19408" fg:w="7"/><text x="45.5884%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;dashmap::mapref::one::Ref&lt;elvis_core::protocols::ipv4::ipv4_address::Ipv4Address,core::any::TypeId,core::hash::BuildHasherDefault&lt;rustc_hash::FxHasher&gt;&gt;&gt; (6 samples, 0.01%)</title><rect x="45.3547%" y="421" width="0.0140%" height="15" fill="rgb(207,146,38)" fg:x="19415" fg:w="6"/><text x="45.6047%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;elvis_core::machine::ProtocolMap&gt; (11 samples, 0.03%)</title><rect x="45.3921%" y="421" width="0.0257%" height="15" fill="rgb(207,177,25)" fg:x="19431" fg:w="11"/><text x="45.6421%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;elvis_core::message::Message&gt; (27 samples, 0.06%)</title><rect x="45.4178%" y="421" width="0.0631%" height="15" fill="rgb(211,178,42)" fg:x="19442" fg:w="27"/><text x="45.6678%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;elvis_core::message::chunk::Chunk&gt; (6 samples, 0.01%)</title><rect x="45.4809%" y="421" width="0.0140%" height="15" fill="rgb(230,69,54)" fg:x="19469" fg:w="6"/><text x="45.7309%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;elvis_core::network::Network::send::{{closure}}&gt; (12 samples, 0.03%)</title><rect x="45.4949%" y="421" width="0.0280%" height="15" fill="rgb(214,135,41)" fg:x="19475" fg:w="12"/><text x="45.7449%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;elvis_core::protocols::ipv4::ipv4_parsing::Ipv4Header&gt; (9 samples, 0.02%)</title><rect x="45.5229%" y="421" width="0.0210%" height="15" fill="rgb(237,67,25)" fg:x="19487" fg:w="9"/><text x="45.7729%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;elvis_core::protocols::ipv4::ipv4_session::Ipv4Session&gt; (9 samples, 0.02%)</title><rect x="45.5440%" y="421" width="0.0210%" height="15" fill="rgb(222,189,50)" fg:x="19496" fg:w="9"/><text x="45.7940%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;elvis_core::protocols::ipv4::reassembly::Reassembly&gt; (5 samples, 0.01%)</title><rect x="45.5650%" y="421" width="0.0117%" height="15" fill="rgb(245,148,34)" fg:x="19505" fg:w="5"/><text x="45.8150%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;elvis_core::protocols::pci::pci_session::PciSession::send_pci::{{closure}}&gt; (10 samples, 0.02%)</title><rect x="45.5790%" y="421" width="0.0234%" height="15" fill="rgb(222,29,6)" fg:x="19511" fg:w="10"/><text x="45.8290%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;elvis_core::protocols::tcp_stream::TcpStream::write&lt;alloc::vec::Vec&lt;u8&gt;&gt;::{{closure}}&gt; (5 samples, 0.01%)</title><rect x="45.6257%" y="421" width="0.0117%" height="15" fill="rgb(221,189,43)" fg:x="19531" fg:w="5"/><text x="45.8757%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;core::any::TypeId,alloc::boxed::Box&lt;dyn core::any::Any&gt;,core::hash::BuildHasherDefault&lt;rustc_hash::FxHasher&gt;&gt;&gt; (10 samples, 0.02%)</title><rect x="45.6444%" y="421" width="0.0234%" height="15" fill="rgb(207,36,27)" fg:x="19539" fg:w="10"/><text x="45.8944%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;elvis_core::protocols::ipv4::reassembly::buf_id::BufId,elvis_core::protocols::ipv4::reassembly::segment::Segment,core::hash::BuildHasherDefault&lt;rustc_hash::FxHasher&gt;&gt;&gt; (6 samples, 0.01%)</title><rect x="45.6678%" y="421" width="0.0140%" height="15" fill="rgb(217,90,24)" fg:x="19549" fg:w="6"/><text x="45.9178%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(core::any::TypeId,alloc::boxed::Box&lt;dyn core::any::Any&gt;)&gt;&gt; (13 samples, 0.03%)</title><rect x="45.6818%" y="421" width="0.0304%" height="15" fill="rgb(224,66,35)" fg:x="19555" fg:w="13"/><text x="45.9318%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(elvis_core::protocols::ipv4::reassembly::buf_id::BufId,elvis_core::protocols::ipv4::reassembly::segment::Segment)&gt;&gt; (5 samples, 0.01%)</title><rect x="45.7121%" y="421" width="0.0117%" height="15" fill="rgb(221,13,50)" fg:x="19568" fg:w="5"/><text x="45.9621%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::rwlock::RwLockReadGuard&lt;dashmap::lock::RawRwLock,hashbrown::map::HashMap&lt;elvis_core::protocols::ipv4::ipv4_address::Ipv4Address,dashmap::util::SharedValue&lt;core::any::TypeId&gt;,core::hash::BuildHasherDefault&lt;rustc_hash::FxHasher&gt;&gt;&gt;&gt; (6 samples, 0.01%)</title><rect x="45.7308%" y="421" width="0.0140%" height="15" fill="rgb(236,68,49)" fg:x="19576" fg:w="6"/><text x="45.9808%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::rwlock::RwLockWriteGuard&lt;dashmap::lock::RawRwLock,hashbrown::map::HashMap&lt;elvis_core::protocols::utility::Endpoints,dashmap::util::SharedValue&lt;alloc::sync::Arc&lt;elvis_core::protocols::socket_api::socket_session::SocketSession&gt;&gt;,core::hash::BuildHasherDefault&lt;rustc_hash::FxHasher&gt;&gt;&gt;&gt; (5 samples, 0.01%)</title><rect x="45.7519%" y="421" width="0.0117%" height="15" fill="rgb(229,146,28)" fg:x="19585" fg:w="5"/><text x="46.0019%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::rwlock::RwLockWriteGuard&lt;dashmap::lock::RawRwLock,hashbrown::map::HashMap&lt;elvis_core::protocols::utility::Endpoints,dashmap::util::SharedValue&lt;alloc::sync::Arc&lt;elvis_core::protocols::tcp::tcp_session::TcpSession&gt;&gt;,core::hash::BuildHasherDefault&lt;rustc_hash::FxHasher&gt;&gt;&gt;&gt; (11 samples, 0.03%)</title><rect x="45.7635%" y="421" width="0.0257%" height="15" fill="rgb(225,31,38)" fg:x="19590" fg:w="11"/><text x="46.0135%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;rand::rngs::thread::ThreadRng&gt; (7 samples, 0.02%)</title><rect x="45.7916%" y="421" width="0.0164%" height="15" fill="rgb(250,208,3)" fg:x="19602" fg:w="7"/><text x="46.0416%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;core::any::TypeId,alloc::boxed::Box&lt;dyn core::any::Any&gt;,core::hash::BuildHasherDefault&lt;rustc_hash::FxHasher&gt;&gt;&gt; (21 samples, 0.05%)</title><rect x="45.8079%" y="421" width="0.0491%" height="15" fill="rgb(246,54,23)" fg:x="19609" fg:w="21"/><text x="46.0579%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;elvis_core::protocols::ipv4::reassembly::buf_id::BufId,elvis_core::protocols::ipv4::reassembly::segment::Segment,core::hash::BuildHasherDefault&lt;rustc_hash::FxHasher&gt;&gt;&gt; (9 samples, 0.02%)</title><rect x="45.8570%" y="421" width="0.0210%" height="15" fill="rgb(243,76,11)" fg:x="19630" fg:w="9"/><text x="46.1070%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::Mutex&lt;elvis_core::protocols::ipv4::reassembly::Reassembly&gt;&gt; (12 samples, 0.03%)</title><rect x="45.8780%" y="421" width="0.0280%" height="15" fill="rgb(245,21,50)" fg:x="19639" fg:w="12"/><text x="46.1280%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;tokio::runtime::task::list::CountedOwnedTasksInner&lt;alloc::sync::Arc&lt;tokio::runtime::scheduler::current_thread::Handle&gt;&gt;&gt;&gt; (22 samples, 0.05%)</title><rect x="45.9131%" y="421" width="0.0514%" height="15" fill="rgb(228,9,43)" fg:x="19654" fg:w="22"/><text x="46.1631%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;tokio::runtime::time::InnerState&gt;&gt; (6 samples, 0.01%)</title><rect x="45.9644%" y="421" width="0.0140%" height="15" fill="rgb(208,100,47)" fg:x="19676" fg:w="6"/><text x="46.2144%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;tokio::util::linked_list::LinkedList&lt;tokio::sync::notify::Waiter,tokio::sync::notify::Waiter&gt;&gt;&gt; (8 samples, 0.02%)</title><rect x="45.9925%" y="421" width="0.0187%" height="15" fill="rgb(232,26,8)" fg:x="19688" fg:w="8"/><text x="46.2425%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::rwlock::RwLockReadGuard&lt;core::option::Option&lt;alloc::sync::Arc&lt;dyn elvis_core::session::Session&gt;&gt;&gt;&gt; (8 samples, 0.02%)</title><rect x="46.0228%" y="421" width="0.0187%" height="15" fill="rgb(216,166,38)" fg:x="19701" fg:w="8"/><text x="46.2728%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::rwlock::RwLockReadGuard&lt;tokio::sync::broadcast::Slot&lt;elvis_core::shutdown::ExitStatus&gt;&gt;&gt; (6 samples, 0.01%)</title><rect x="46.0532%" y="421" width="0.0140%" height="15" fill="rgb(251,202,51)" fg:x="19714" fg:w="6"/><text x="46.3032%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::rwlock::RwLockWriteGuard&lt;alloc::collections::vec_deque::VecDeque&lt;elvis_core::message::Message&gt;&gt;&gt; (6 samples, 0.01%)</title><rect x="46.0672%" y="421" width="0.0140%" height="15" fill="rgb(254,216,34)" fg:x="19720" fg:w="6"/><text x="46.3172%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::loom::std::unsafe_cell::UnsafeCell&lt;core::option::Option&lt;core::task::wake::Waker&gt;&gt;&gt; (15 samples, 0.04%)</title><rect x="46.0859%" y="421" width="0.0350%" height="15" fill="rgb(251,32,27)" fg:x="19728" fg:w="15"/><text x="46.3359%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::loom::std::unsafe_cell::UnsafeCell&lt;tokio::runtime::task::core::Stage&lt;elvis_core::protocols::pci::pci_session::PciSession::send_pci::{{closure}}&gt;&gt;&gt; (10 samples, 0.02%)</title><rect x="46.1256%" y="421" width="0.0234%" height="15" fill="rgb(208,127,28)" fg:x="19745" fg:w="10"/><text x="46.3756%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::loom::std::unsafe_cell::UnsafeCell&lt;tokio::sync::broadcast::Waiter&gt;&gt; (11 samples, 0.03%)</title><rect x="46.1513%" y="421" width="0.0257%" height="15" fill="rgb(224,137,22)" fg:x="19756" fg:w="11"/><text x="46.4013%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::coop::RestoreOnPending&gt; (23 samples, 0.05%)</title><rect x="46.1770%" y="421" width="0.0537%" height="15" fill="rgb(254,70,32)" fg:x="19767" fg:w="23"/><text x="46.4270%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::coop::with_budget::ResetGuard&gt; (5 samples, 0.01%)</title><rect x="46.2308%" y="421" width="0.0117%" height="15" fill="rgb(229,75,37)" fg:x="19790" fg:w="5"/><text x="46.4808%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::scheduler::Handle&gt; (17 samples, 0.04%)</title><rect x="46.2424%" y="421" width="0.0397%" height="15" fill="rgb(252,64,23)" fg:x="19795" fg:w="17"/><text x="46.4924%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::task::core::CoreStage&lt;elvis_core::protocols::pci::pci_session::PciSession::send_pci::{{closure}}&gt;&gt; (8 samples, 0.02%)</title><rect x="46.3078%" y="421" width="0.0187%" height="15" fill="rgb(232,162,48)" fg:x="19823" fg:w="8"/><text x="46.5578%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::task::core::Stage&lt;elvis_core::protocols::pci::pci_session::PciSession::send_pci::{{closure}}&gt;&gt; (18 samples, 0.04%)</title><rect x="46.3406%" y="421" width="0.0420%" height="15" fill="rgb(246,160,12)" fg:x="19837" fg:w="18"/><text x="46.5906%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::task::core::Stage&lt;elvis_core::protocols::tcp::tcp_session::TcpSession::receive::{{closure}}&gt;&gt; (7 samples, 0.02%)</title><rect x="46.3896%" y="421" width="0.0164%" height="15" fill="rgb(247,166,0)" fg:x="19858" fg:w="7"/><text x="46.6396%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::task::core::TaskIdGuard&gt; (46 samples, 0.11%)</title><rect x="46.4060%" y="421" width="0.1075%" height="15" fill="rgb(249,219,21)" fg:x="19865" fg:w="46"/><text x="46.6560%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::task::core::Trailer&gt; (14 samples, 0.03%)</title><rect x="46.5134%" y="421" width="0.0327%" height="15" fill="rgb(205,209,3)" fg:x="19911" fg:w="14"/><text x="46.7634%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::task::join::JoinHandle&lt;()&gt;&gt; (14 samples, 0.03%)</title><rect x="46.5461%" y="421" width="0.0327%" height="15" fill="rgb(243,44,1)" fg:x="19925" fg:w="14"/><text x="46.7961%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::time::entry::StateCell&gt; (6 samples, 0.01%)</title><rect x="46.5788%" y="421" width="0.0140%" height="15" fill="rgb(206,159,16)" fg:x="19939" fg:w="6"/><text x="46.8288%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::time::entry::TimerEntry&gt; (9 samples, 0.02%)</title><rect x="46.5928%" y="421" width="0.0210%" height="15" fill="rgb(244,77,30)" fg:x="19945" fg:w="9"/><text x="46.8428%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::time::entry::TimerShared&gt; (18 samples, 0.04%)</title><rect x="46.6139%" y="421" width="0.0420%" height="15" fill="rgb(218,69,12)" fg:x="19954" fg:w="18"/><text x="46.8639%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::sync::broadcast::Recv&lt;elvis_core::shutdown::ExitStatus&gt;&gt; (5 samples, 0.01%)</title><rect x="46.6886%" y="421" width="0.0117%" height="15" fill="rgb(212,87,7)" fg:x="19986" fg:w="5"/><text x="46.9386%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::sync::task::atomic_waker::AtomicWaker&gt; (8 samples, 0.02%)</title><rect x="46.7424%" y="421" width="0.0187%" height="15" fill="rgb(245,114,25)" fg:x="20009" fg:w="8"/><text x="46.9924%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::time::sleep::Sleep::poll_elapsed::{{closure}}&gt; (8 samples, 0.02%)</title><rect x="46.7634%" y="421" width="0.0187%" height="15" fill="rgb(210,61,42)" fg:x="20018" fg:w="8"/><text x="47.0134%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::time::sleep::Sleep&gt; (7 samples, 0.02%)</title><rect x="46.7821%" y="421" width="0.0164%" height="15" fill="rgb(211,52,33)" fg:x="20026" fg:w="7"/><text x="47.0321%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::util::wake_list::WakeList&gt; (11 samples, 0.03%)</title><rect x="46.8031%" y="421" width="0.0257%" height="15" fill="rgb(234,58,33)" fg:x="20035" fg:w="11"/><text x="47.0531%" y="431.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::cast (60 samples, 0.14%)</title><rect x="46.8288%" y="421" width="0.1402%" height="15" fill="rgb(220,115,36)" fg:x="20046" fg:w="60"/><text x="47.0788%" y="431.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (217 samples, 0.51%)</title><rect x="46.9690%" y="421" width="0.5069%" height="15" fill="rgb(243,153,54)" fg:x="20106" fg:w="217"/><text x="47.2190%" y="431.50"></text></g><g><title>core::ptr::read (195 samples, 0.46%)</title><rect x="47.4759%" y="421" width="0.4555%" height="15" fill="rgb(251,47,18)" fg:x="20323" fg:w="195"/><text x="47.7259%" y="431.50"></text></g><g><title>core::ptr::write (110 samples, 0.26%)</title><rect x="47.9408%" y="421" width="0.2570%" height="15" fill="rgb(242,102,42)" fg:x="20522" fg:w="110"/><text x="48.1908%" y="431.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (86 samples, 0.20%)</title><rect x="48.1977%" y="421" width="0.2009%" height="15" fill="rgb(234,31,38)" fg:x="20632" fg:w="86"/><text x="48.4477%" y="431.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_err (25 samples, 0.06%)</title><rect x="48.3986%" y="421" width="0.0584%" height="15" fill="rgb(221,117,51)" fg:x="20718" fg:w="25"/><text x="48.6486%" y="431.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_ok (57 samples, 0.13%)</title><rect x="48.4570%" y="421" width="0.1332%" height="15" fill="rgb(212,20,18)" fg:x="20743" fg:w="57"/><text x="48.7070%" y="431.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (82 samples, 0.19%)</title><rect x="48.5902%" y="421" width="0.1916%" height="15" fill="rgb(245,133,36)" fg:x="20800" fg:w="82"/><text x="48.8402%" y="431.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (73 samples, 0.17%)</title><rect x="48.7817%" y="421" width="0.1705%" height="15" fill="rgb(212,6,19)" fg:x="20882" fg:w="73"/><text x="49.0317%" y="431.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::or (5 samples, 0.01%)</title><rect x="48.9523%" y="421" width="0.0117%" height="15" fill="rgb(218,1,36)" fg:x="20955" fg:w="5"/><text x="49.2023%" y="431.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (103 samples, 0.24%)</title><rect x="48.9640%" y="421" width="0.2406%" height="15" fill="rgb(246,84,54)" fg:x="20960" fg:w="103"/><text x="49.2140%" y="431.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_or (188 samples, 0.44%)</title><rect x="49.2046%" y="421" width="0.4392%" height="15" fill="rgb(242,110,6)" fg:x="21063" fg:w="188"/><text x="49.4546%" y="431.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_or_else (22 samples, 0.05%)</title><rect x="49.6437%" y="421" width="0.0514%" height="15" fill="rgb(214,47,5)" fg:x="21251" fg:w="22"/><text x="49.8937%" y="431.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (12 samples, 0.03%)</title><rect x="49.6951%" y="421" width="0.0280%" height="15" fill="rgb(218,159,25)" fg:x="21273" fg:w="12"/><text x="49.9451%" y="431.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (38 samples, 0.09%)</title><rect x="49.7232%" y="421" width="0.0888%" height="15" fill="rgb(215,211,28)" fg:x="21285" fg:w="38"/><text x="49.9732%" y="431.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (15 samples, 0.04%)</title><rect x="49.8119%" y="421" width="0.0350%" height="15" fill="rgb(238,59,32)" fg:x="21323" fg:w="15"/><text x="50.0619%" y="431.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (42 samples, 0.10%)</title><rect x="49.8493%" y="421" width="0.0981%" height="15" fill="rgb(226,82,3)" fg:x="21339" fg:w="42"/><text x="50.0993%" y="431.50"></text></g><g><title>core::slice::index::range (187 samples, 0.44%)</title><rect x="49.9498%" y="421" width="0.4368%" height="15" fill="rgb(240,164,32)" fg:x="21382" fg:w="187"/><text x="50.1998%" y="431.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::as_slice (54 samples, 0.13%)</title><rect x="50.3866%" y="421" width="0.1261%" height="15" fill="rgb(232,46,7)" fg:x="21569" fg:w="54"/><text x="50.6366%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (19 samples, 0.04%)</title><rect x="50.5128%" y="421" width="0.0444%" height="15" fill="rgb(229,129,53)" fg:x="21623" fg:w="19"/><text x="50.7628%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicU64::fetch_add (31 samples, 0.07%)</title><rect x="50.5712%" y="421" width="0.0724%" height="15" fill="rgb(234,188,29)" fg:x="21648" fg:w="31"/><text x="50.8212%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicU64::load (48 samples, 0.11%)</title><rect x="50.6436%" y="421" width="0.1121%" height="15" fill="rgb(246,141,4)" fg:x="21679" fg:w="48"/><text x="50.8936%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicU64::new (12 samples, 0.03%)</title><rect x="50.7557%" y="421" width="0.0280%" height="15" fill="rgb(229,23,39)" fg:x="21727" fg:w="12"/><text x="51.0057%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicU64::store (6 samples, 0.01%)</title><rect x="50.7838%" y="421" width="0.0140%" height="15" fill="rgb(206,12,3)" fg:x="21739" fg:w="6"/><text x="51.0338%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (82 samples, 0.19%)</title><rect x="50.7978%" y="421" width="0.1916%" height="15" fill="rgb(252,226,20)" fg:x="21745" fg:w="82"/><text x="51.0478%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (13 samples, 0.03%)</title><rect x="50.9893%" y="421" width="0.0304%" height="15" fill="rgb(216,123,35)" fg:x="21827" fg:w="13"/><text x="51.2393%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (257 samples, 0.60%)</title><rect x="51.0197%" y="421" width="0.6004%" height="15" fill="rgb(212,68,40)" fg:x="21840" fg:w="257"/><text x="51.2697%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_and (48 samples, 0.11%)</title><rect x="51.6201%" y="421" width="0.1121%" height="15" fill="rgb(254,125,32)" fg:x="22097" fg:w="48"/><text x="51.8701%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (93 samples, 0.22%)</title><rect x="51.7322%" y="421" width="0.2173%" height="15" fill="rgb(253,97,22)" fg:x="22145" fg:w="93"/><text x="51.9822%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (178 samples, 0.42%)</title><rect x="51.9494%" y="421" width="0.4158%" height="15" fill="rgb(241,101,14)" fg:x="22238" fg:w="178"/><text x="52.1994%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_xor (37 samples, 0.09%)</title><rect x="52.3653%" y="421" width="0.0864%" height="15" fill="rgb(238,103,29)" fg:x="22416" fg:w="37"/><text x="52.6153%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (58 samples, 0.14%)</title><rect x="52.4517%" y="421" width="0.1355%" height="15" fill="rgb(233,195,47)" fg:x="22453" fg:w="58"/><text x="52.7017%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::new (14 samples, 0.03%)</title><rect x="52.5872%" y="421" width="0.0327%" height="15" fill="rgb(246,218,30)" fg:x="22511" fg:w="14"/><text x="52.8372%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::store (9 samples, 0.02%)</title><rect x="52.6199%" y="421" width="0.0210%" height="15" fill="rgb(219,145,47)" fg:x="22525" fg:w="9"/><text x="52.8699%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (853 samples, 1.99%)</title><rect x="52.6409%" y="421" width="1.9927%" height="15" fill="rgb(243,12,26)" fg:x="22534" fg:w="853"/><text x="52.8909%" y="431.50">c..</text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (221 samples, 0.52%)</title><rect x="54.6336%" y="421" width="0.5163%" height="15" fill="rgb(214,87,16)" fg:x="23387" fg:w="221"/><text x="54.8836%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_load (829 samples, 1.94%)</title><rect x="55.1499%" y="421" width="1.9366%" height="15" fill="rgb(208,99,42)" fg:x="23608" fg:w="829"/><text x="55.3999%" y="431.50">c..</text></g><g><title>core::sync::atomic::atomic_store (72 samples, 0.17%)</title><rect x="57.0865%" y="421" width="0.1682%" height="15" fill="rgb(253,99,2)" fg:x="24437" fg:w="72"/><text x="57.3365%" y="431.50"></text></g><g><title>core::task::poll::Poll&lt;T&gt;::is_ready (17 samples, 0.04%)</title><rect x="57.2547%" y="421" width="0.0397%" height="15" fill="rgb(220,168,23)" fg:x="24509" fg:w="17"/><text x="57.5047%" y="431.50"></text></g><g><title>core::task::poll::Poll&lt;T&gt;::map (30 samples, 0.07%)</title><rect x="57.2944%" y="421" width="0.0701%" height="15" fill="rgb(242,38,24)" fg:x="24526" fg:w="30"/><text x="57.5444%" y="431.50"></text></g><g><title>core::task::wake::Context::from_waker (6 samples, 0.01%)</title><rect x="57.3644%" y="421" width="0.0140%" height="15" fill="rgb(225,182,9)" fg:x="24556" fg:w="6"/><text x="57.6144%" y="431.50"></text></g><g><title>core::task::wake::Context::waker (10 samples, 0.02%)</title><rect x="57.3785%" y="421" width="0.0234%" height="15" fill="rgb(243,178,37)" fg:x="24562" fg:w="10"/><text x="57.6285%" y="431.50"></text></g><g><title>core::task::wake::RawWaker::new (20 samples, 0.05%)</title><rect x="57.4018%" y="421" width="0.0467%" height="15" fill="rgb(232,139,19)" fg:x="24572" fg:w="20"/><text x="57.6518%" y="431.50"></text></g><g><title>core::task::wake::Waker::from_raw (15 samples, 0.04%)</title><rect x="57.4485%" y="421" width="0.0350%" height="15" fill="rgb(225,201,24)" fg:x="24592" fg:w="15"/><text x="57.6985%" y="431.50"></text></g><g><title>core::task::wake::Waker::wake (15 samples, 0.04%)</title><rect x="57.4836%" y="421" width="0.0350%" height="15" fill="rgb(221,47,46)" fg:x="24607" fg:w="15"/><text x="57.7336%" y="431.50"></text></g><g><title>core::time::Duration::as_millis (13 samples, 0.03%)</title><rect x="57.5256%" y="421" width="0.0304%" height="15" fill="rgb(249,23,13)" fg:x="24625" fg:w="13"/><text x="57.7756%" y="431.50"></text></g><g><title>core::time::Duration::from_nanos (24 samples, 0.06%)</title><rect x="57.5630%" y="421" width="0.0561%" height="15" fill="rgb(219,9,5)" fg:x="24641" fg:w="24"/><text x="57.8130%" y="431.50"></text></g><g><title>core::time::Duration::mul_f32 (15 samples, 0.04%)</title><rect x="57.6238%" y="421" width="0.0350%" height="15" fill="rgb(254,171,16)" fg:x="24667" fg:w="15"/><text x="57.8738%" y="431.50"></text></g><g><title>core::time::Duration::new (47 samples, 0.11%)</title><rect x="57.6588%" y="421" width="0.1098%" height="15" fill="rgb(230,171,20)" fg:x="24682" fg:w="47"/><text x="57.9088%" y="431.50"></text></g><g><title>core::time::Duration::try_from_secs_f32 (9 samples, 0.02%)</title><rect x="57.7686%" y="421" width="0.0210%" height="15" fill="rgb(210,71,41)" fg:x="24729" fg:w="9"/><text x="58.0186%" y="431.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::determine_shard (48 samples, 0.11%)</title><rect x="57.7896%" y="421" width="0.1121%" height="15" fill="rgb(206,173,20)" fg:x="24738" fg:w="48"/><text x="58.0396%" y="431.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::entry (10 samples, 0.02%)</title><rect x="57.9017%" y="421" width="0.0234%" height="15" fill="rgb(233,88,34)" fg:x="24786" fg:w="10"/><text x="58.1517%" y="431.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::get (11 samples, 0.03%)</title><rect x="57.9251%" y="421" width="0.0257%" height="15" fill="rgb(223,209,46)" fg:x="24796" fg:w="11"/><text x="58.1751%" y="431.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::hash_usize (16 samples, 0.04%)</title><rect x="57.9508%" y="421" width="0.0374%" height="15" fill="rgb(250,43,18)" fg:x="24807" fg:w="16"/><text x="58.2008%" y="431.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::with_capacity_and_hasher_and_shard_amount::{{closure}} (5 samples, 0.01%)</title><rect x="57.9952%" y="421" width="0.0117%" height="15" fill="rgb(208,13,10)" fg:x="24826" fg:w="5"/><text x="58.2452%" y="431.50"></text></g><g><title>dashmap::mapref::entry::OccupiedEntry&lt;K,V,S&gt;::get (7 samples, 0.02%)</title><rect x="58.0069%" y="421" width="0.0164%" height="15" fill="rgb(212,200,36)" fg:x="24831" fg:w="7"/><text x="58.2569%" y="431.50"></text></g><g><title>dashmap::mapref::entry::OccupiedEntry&lt;K,V,S&gt;::new (5 samples, 0.01%)</title><rect x="58.0232%" y="421" width="0.0117%" height="15" fill="rgb(225,90,30)" fg:x="24838" fg:w="5"/><text x="58.2732%" y="431.50"></text></g><g><title>dashmap::mapref::entry::VacantEntry&lt;K,V,S&gt;::insert (7 samples, 0.02%)</title><rect x="58.0349%" y="421" width="0.0164%" height="15" fill="rgb(236,182,39)" fg:x="24843" fg:w="7"/><text x="58.2849%" y="431.50"></text></g><g><title>dashmap::mapref::one::Ref&lt;K,V,S&gt;::new (6 samples, 0.01%)</title><rect x="58.0513%" y="421" width="0.0140%" height="15" fill="rgb(212,144,35)" fg:x="24850" fg:w="6"/><text x="58.3013%" y="431.50"></text></g><g><title>dashmap::mapref::one::Ref&lt;K,V,S&gt;::pair (23 samples, 0.05%)</title><rect x="58.0653%" y="421" width="0.0537%" height="15" fill="rgb(228,63,44)" fg:x="24856" fg:w="23"/><text x="58.3153%" y="431.50"></text></g><g><title>dashmap::mapref::one::Ref&lt;K,V,S&gt;::value (5 samples, 0.01%)</title><rect x="58.1190%" y="421" width="0.0117%" height="15" fill="rgb(228,109,6)" fg:x="24879" fg:w="5"/><text x="58.3690%" y="431.50"></text></g><g><title>dashmap::util::SharedValue&lt;T&gt;::as_ptr (14 samples, 0.03%)</title><rect x="58.1330%" y="421" width="0.0327%" height="15" fill="rgb(238,117,24)" fg:x="24885" fg:w="14"/><text x="58.3830%" y="431.50"></text></g><g><title>dashmap::util::SharedValue&lt;T&gt;::get (14 samples, 0.03%)</title><rect x="58.1657%" y="421" width="0.0327%" height="15" fill="rgb(242,26,26)" fg:x="24899" fg:w="14"/><text x="58.4157%" y="431.50"></text></g><g><title>elvis::applications::barebones_server::BareBonesServer::handle_connection::{{closure}} (11 samples, 0.03%)</title><rect x="58.2031%" y="421" width="0.0257%" height="15" fill="rgb(221,92,48)" fg:x="24915" fg:w="11"/><text x="58.4531%" y="431.50"></text></g><g><title>elvis_core::control::Control::get (11 samples, 0.03%)</title><rect x="58.2358%" y="421" width="0.0257%" height="15" fill="rgb(209,209,32)" fg:x="24929" fg:w="11"/><text x="58.4858%" y="431.50"></text></g><g><title>elvis_core::control::Control::insert (22 samples, 0.05%)</title><rect x="58.2708%" y="421" width="0.0514%" height="15" fill="rgb(221,70,22)" fg:x="24944" fg:w="22"/><text x="58.5208%" y="431.50"></text></g><g><title>elvis_core::control::Control::new (8 samples, 0.02%)</title><rect x="58.3222%" y="421" width="0.0187%" height="15" fill="rgb(248,145,5)" fg:x="24966" fg:w="8"/><text x="58.5722%" y="431.50"></text></g><g><title>elvis_core::machine::ProtocolMap::protocol (5 samples, 0.01%)</title><rect x="58.3620%" y="421" width="0.0117%" height="15" fill="rgb(226,116,26)" fg:x="24983" fg:w="5"/><text x="58.6120%" y="431.50"></text></g><g><title>elvis_core::message::Message::concatenate (9 samples, 0.02%)</title><rect x="58.3806%" y="421" width="0.0210%" height="15" fill="rgb(244,5,17)" fg:x="24991" fg:w="9"/><text x="58.6306%" y="431.50"></text></g><g><title>elvis_core::message::Message::cut (5 samples, 0.01%)</title><rect x="58.4017%" y="421" width="0.0117%" height="15" fill="rgb(252,159,33)" fg:x="25000" fg:w="5"/><text x="58.6517%" y="431.50"></text></g><g><title>elvis_core::message::Message::header (5 samples, 0.01%)</title><rect x="58.4133%" y="421" width="0.0117%" height="15" fill="rgb(206,71,0)" fg:x="25005" fg:w="5"/><text x="58.6633%" y="431.50"></text></g><g><title>elvis_core::message::Message::header_inner (9 samples, 0.02%)</title><rect x="58.4250%" y="421" width="0.0210%" height="15" fill="rgb(233,118,54)" fg:x="25010" fg:w="9"/><text x="58.6750%" y="431.50"></text></g><g><title>elvis_core::message::Message::is_empty (20 samples, 0.05%)</title><rect x="58.4460%" y="421" width="0.0467%" height="15" fill="rgb(234,83,48)" fg:x="25019" fg:w="20"/><text x="58.6960%" y="431.50"></text></g><g><title>elvis_core::message::Message::iter (7 samples, 0.02%)</title><rect x="58.4928%" y="421" width="0.0164%" height="15" fill="rgb(228,3,54)" fg:x="25039" fg:w="7"/><text x="58.7428%" y="431.50"></text></g><g><title>elvis_core::message::Message::iter::{{closure}} (13 samples, 0.03%)</title><rect x="58.5091%" y="421" width="0.0304%" height="15" fill="rgb(226,155,13)" fg:x="25046" fg:w="13"/><text x="58.7591%" y="431.50"></text></g><g><title>elvis_core::message::Message::len (111 samples, 0.26%)</title><rect x="58.5395%" y="421" width="0.2593%" height="15" fill="rgb(241,28,37)" fg:x="25059" fg:w="111"/><text x="58.7895%" y="431.50"></text></g><g><title>elvis_core::message::Message::remove_front (25 samples, 0.06%)</title><rect x="58.8105%" y="421" width="0.0584%" height="15" fill="rgb(233,93,10)" fg:x="25175" fg:w="25"/><text x="59.0605%" y="431.50"></text></g><g><title>elvis_core::message::Message::slice_inner (13 samples, 0.03%)</title><rect x="58.8689%" y="421" width="0.0304%" height="15" fill="rgb(225,113,19)" fg:x="25200" fg:w="13"/><text x="59.1189%" y="431.50"></text></g><g><title>elvis_core::message::chunk::Chunk::as_slice (23 samples, 0.05%)</title><rect x="58.9016%" y="421" width="0.0537%" height="15" fill="rgb(241,2,18)" fg:x="25214" fg:w="23"/><text x="59.1516%" y="431.50"></text></g><g><title>elvis_core::message::chunk::Chunk::len (30 samples, 0.07%)</title><rect x="58.9553%" y="421" width="0.0701%" height="15" fill="rgb(228,207,21)" fg:x="25237" fg:w="30"/><text x="59.2053%" y="431.50"></text></g><g><title>elvis_core::message::chunk::Chunk::new (16 samples, 0.04%)</title><rect x="59.0254%" y="421" width="0.0374%" height="15" fill="rgb(213,211,35)" fg:x="25267" fg:w="16"/><text x="59.2754%" y="431.50"></text></g><g><title>elvis_core::network::Latency::next (17 samples, 0.04%)</title><rect x="59.0628%" y="421" width="0.0397%" height="15" fill="rgb(209,83,10)" fg:x="25283" fg:w="17"/><text x="59.3128%" y="431.50"></text></g><g><title>elvis_core::network::Network::send::{{closure}} (58 samples, 0.14%)</title><rect x="59.1118%" y="421" width="0.1355%" height="15" fill="rgb(209,164,1)" fg:x="25304" fg:w="58"/><text x="59.3618%" y="431.50"></text></g><g><title>elvis_core::network::Throughput::next (8 samples, 0.02%)</title><rect x="59.2473%" y="421" width="0.0187%" height="15" fill="rgb(213,184,43)" fg:x="25362" fg:w="8"/><text x="59.4973%" y="431.50"></text></g><g><title>elvis_core::protocols::ipv4::Recipient::new (5 samples, 0.01%)</title><rect x="59.2754%" y="421" width="0.0117%" height="15" fill="rgb(231,61,34)" fg:x="25374" fg:w="5"/><text x="59.5254%" y="431.50"></text></g><g><title>elvis_core::protocols::ipv4::Recipient::with_mac (10 samples, 0.02%)</title><rect x="59.2870%" y="421" width="0.0234%" height="15" fill="rgb(235,75,3)" fg:x="25379" fg:w="10"/><text x="59.5370%" y="431.50"></text></g><g><title>elvis_core::protocols::ipv4::ipv4_address::&lt;impl core::convert::From&lt;elvis_core::protocols::ipv4::ipv4_address::Ipv4Address&gt; for [u8: 4]&gt;::from (9 samples, 0.02%)</title><rect x="59.3104%" y="421" width="0.0210%" height="15" fill="rgb(220,106,47)" fg:x="25389" fg:w="9"/><text x="59.5604%" y="431.50"></text></g><g><title>elvis_core::protocols::ipv4::ipv4_address::Ipv4Address::to_u32 (8 samples, 0.02%)</title><rect x="59.3408%" y="421" width="0.0187%" height="15" fill="rgb(210,196,33)" fg:x="25402" fg:w="8"/><text x="59.5908%" y="431.50"></text></g><g><title>elvis_core::protocols::ipv4::ipv4_parsing::ControlFlags::is_last_fragment (17 samples, 0.04%)</title><rect x="59.3665%" y="421" width="0.0397%" height="15" fill="rgb(229,154,42)" fg:x="25413" fg:w="17"/><text x="59.6165%" y="431.50"></text></g><g><title>elvis_core::protocols::ipv4::ipv4_parsing::Ipv4Header::from_bytes (148 samples, 0.35%)</title><rect x="59.4062%" y="421" width="0.3457%" height="15" fill="rgb(228,114,26)" fg:x="25430" fg:w="148"/><text x="59.6562%" y="431.50"></text></g><g><title>elvis_core::protocols::ipv4::ipv4_parsing::Ipv4Header::from_bytes::{{closure}} (109 samples, 0.25%)</title><rect x="59.7519%" y="421" width="0.2546%" height="15" fill="rgb(208,144,1)" fg:x="25578" fg:w="109"/><text x="60.0019%" y="431.50"></text></g><g><title>elvis_core::protocols::ipv4::ipv4_parsing::Ipv4HeaderBuilder::build (35 samples, 0.08%)</title><rect x="60.0065%" y="421" width="0.0818%" height="15" fill="rgb(239,112,37)" fg:x="25687" fg:w="35"/><text x="60.2565%" y="431.50"></text></g><g><title>elvis_core::protocols::ipv4::ipv4_parsing::Ipv4HeaderBuilder::new (6 samples, 0.01%)</title><rect x="60.0883%" y="421" width="0.0140%" height="15" fill="rgb(210,96,50)" fg:x="25722" fg:w="6"/><text x="60.3383%" y="431.50"></text></g><g><title>elvis_core::protocols::ipv4::ipv4_session::Ipv4Session::receive (26 samples, 0.06%)</title><rect x="60.1047%" y="421" width="0.0607%" height="15" fill="rgb(222,178,2)" fg:x="25729" fg:w="26"/><text x="60.3547%" y="431.50"></text></g><g><title>elvis_core::protocols::ipv4::reassembly::Reassembly::receive_packet (9 samples, 0.02%)</title><rect x="60.1654%" y="421" width="0.0210%" height="15" fill="rgb(226,74,18)" fg:x="25755" fg:w="9"/><text x="60.4154%" y="431.50"></text></g><g><title>elvis_core::protocols::ipv4::reassembly::buf_id::BufId::from_header (5 samples, 0.01%)</title><rect x="60.1864%" y="421" width="0.0117%" height="15" fill="rgb(225,67,54)" fg:x="25764" fg:w="5"/><text x="60.4364%" y="431.50"></text></g><g><title>elvis_core::protocols::pci::Pci::open (6 samples, 0.01%)</title><rect x="60.2004%" y="421" width="0.0140%" height="15" fill="rgb(251,92,32)" fg:x="25770" fg:w="6"/><text x="60.4504%" y="431.50"></text></g><g><title>elvis_core::protocols::pci::pci_session::PciSession::receive (46 samples, 0.11%)</title><rect x="60.2145%" y="421" width="0.1075%" height="15" fill="rgb(228,149,22)" fg:x="25776" fg:w="46"/><text x="60.4645%" y="431.50"></text></g><g><title>elvis_core::protocols::pci::pci_session::PciSession::send_pci (19 samples, 0.04%)</title><rect x="60.3219%" y="421" width="0.0444%" height="15" fill="rgb(243,54,13)" fg:x="25822" fg:w="19"/><text x="60.5719%" y="431.50"></text></g><g><title>elvis_core::protocols::pci::pci_session::PciSession::send_pci::{{closure}} (39 samples, 0.09%)</title><rect x="60.3663%" y="421" width="0.0911%" height="15" fill="rgb(243,180,28)" fg:x="25841" fg:w="39"/><text x="60.6163%" y="431.50"></text></g><g><title>elvis_core::protocols::socket_api::socket::Socket::receive (5 samples, 0.01%)</title><rect x="60.4854%" y="421" width="0.0117%" height="15" fill="rgb(208,167,24)" fg:x="25892" fg:w="5"/><text x="60.7354%" y="431.50"></text></g><g><title>elvis_core::protocols::socket_api::socket::Socket::recv::{{closure}} (11 samples, 0.03%)</title><rect x="60.4995%" y="421" width="0.0257%" height="15" fill="rgb(245,73,45)" fg:x="25898" fg:w="11"/><text x="60.7495%" y="431.50"></text></g><g><title>elvis_core::protocols::socket_api::socket::Socket::recv_msg (8 samples, 0.02%)</title><rect x="60.5251%" y="421" width="0.0187%" height="15" fill="rgb(237,203,48)" fg:x="25909" fg:w="8"/><text x="60.7751%" y="431.50"></text></g><g><title>elvis_core::protocols::socket_api::socket::Socket::recv_msg::{{closure}} (21 samples, 0.05%)</title><rect x="60.5438%" y="421" width="0.0491%" height="15" fill="rgb(211,197,16)" fg:x="25917" fg:w="21"/><text x="60.7938%" y="431.50"></text></g><g><title>elvis_core::protocols::socket_api::socket::Socket::send (16 samples, 0.04%)</title><rect x="60.5929%" y="421" width="0.0374%" height="15" fill="rgb(243,99,51)" fg:x="25938" fg:w="16"/><text x="60.8429%" y="431.50"></text></g><g><title>elvis_core::protocols::socket_api::socket::Socket::send::{{closure}} (6 samples, 0.01%)</title><rect x="60.6303%" y="421" width="0.0140%" height="15" fill="rgb(215,123,29)" fg:x="25954" fg:w="6"/><text x="60.8803%" y="431.50"></text></g><g><title>elvis_core::protocols::socket_api::socket::Socket::wait_for_notify::{{closure}} (26 samples, 0.06%)</title><rect x="60.6443%" y="421" width="0.0607%" height="15" fill="rgb(239,186,37)" fg:x="25960" fg:w="26"/><text x="60.8943%" y="431.50"></text></g><g><title>elvis_core::protocols::socket_api::socket::Socket::wait_for_notify::{{closure}}::{{closure}} (36 samples, 0.08%)</title><rect x="60.7050%" y="421" width="0.0841%" height="15" fill="rgb(252,136,39)" fg:x="25986" fg:w="36"/><text x="60.9550%" y="431.50"></text></g><g><title>elvis_core::protocols::tcp::tcb::Tcb::ack_established_processing (8 samples, 0.02%)</title><rect x="60.8078%" y="421" width="0.0187%" height="15" fill="rgb(223,213,32)" fg:x="26030" fg:w="8"/><text x="61.0578%" y="431.50"></text></g><g><title>elvis_core::protocols::tcp::tcb::Tcb::advance_time (14 samples, 0.03%)</title><rect x="60.8265%" y="421" width="0.0327%" height="15" fill="rgb(233,115,5)" fg:x="26038" fg:w="14"/><text x="61.0765%" y="431.50"></text></g><g><title>elvis_core::protocols::tcp::tcb::Tcb::header_builder (10 samples, 0.02%)</title><rect x="60.8662%" y="421" width="0.0234%" height="15" fill="rgb(207,226,44)" fg:x="26055" fg:w="10"/><text x="61.1162%" y="431.50"></text></g><g><title>elvis_core::protocols::tcp::tcb::Tcb::is_seq_ok (16 samples, 0.04%)</title><rect x="60.8989%" y="421" width="0.0374%" height="15" fill="rgb(208,126,0)" fg:x="26069" fg:w="16"/><text x="61.1489%" y="431.50"></text></g><g><title>elvis_core::protocols::tcp::tcb::Tcb::process_segment (43 samples, 0.10%)</title><rect x="60.9386%" y="421" width="0.1005%" height="15" fill="rgb(244,66,21)" fg:x="26086" fg:w="43"/><text x="61.1886%" y="431.50"></text></g><g><title>elvis_core::protocols::tcp::tcb::Tcb::receive (10 samples, 0.02%)</title><rect x="61.0391%" y="421" width="0.0234%" height="15" fill="rgb(222,97,12)" fg:x="26129" fg:w="10"/><text x="61.2891%" y="431.50"></text></g><g><title>elvis_core::protocols::tcp::tcb::Tcb::remove_acked_from_retransmission (23 samples, 0.05%)</title><rect x="61.0624%" y="421" width="0.0537%" height="15" fill="rgb(219,213,19)" fg:x="26139" fg:w="23"/><text x="61.3124%" y="431.50"></text></g><g><title>elvis_core::protocols::tcp::tcb::Tcb::segment_arrives (9 samples, 0.02%)</title><rect x="61.1162%" y="421" width="0.0210%" height="15" fill="rgb(252,169,30)" fg:x="26162" fg:w="9"/><text x="61.3662%" y="431.50"></text></g><g><title>elvis_core::protocols::tcp::tcb::Tcb::segments (142 samples, 0.33%)</title><rect x="61.1372%" y="421" width="0.3317%" height="15" fill="rgb(206,32,51)" fg:x="26171" fg:w="142"/><text x="61.3872%" y="431.50"></text></g><g><title>elvis_core::protocols::tcp::tcb::Tcb::send (5 samples, 0.01%)</title><rect x="61.4783%" y="421" width="0.0117%" height="15" fill="rgb(250,172,42)" fg:x="26317" fg:w="5"/><text x="61.7283%" y="431.50"></text></g><g><title>elvis_core::protocols::tcp::tcb::modular_cmp::ModCmp::offset (7 samples, 0.02%)</title><rect x="61.4899%" y="421" width="0.0164%" height="15" fill="rgb(209,34,43)" fg:x="26322" fg:w="7"/><text x="61.7399%" y="431.50"></text></g><g><title>elvis_core::protocols::tcp::tcb::modular_cmp::mod_bounded (19 samples, 0.04%)</title><rect x="61.5063%" y="421" width="0.0444%" height="15" fill="rgb(223,11,35)" fg:x="26329" fg:w="19"/><text x="61.7563%" y="431.50"></text></g><g><title>elvis_core::protocols::tcp::tcb::modular_cmp::mod_gt (7 samples, 0.02%)</title><rect x="61.5507%" y="421" width="0.0164%" height="15" fill="rgb(251,219,26)" fg:x="26348" fg:w="7"/><text x="61.8007%" y="431.50"></text></g><g><title>elvis_core::protocols::tcp::tcb::modular_cmp::mod_lt (5 samples, 0.01%)</title><rect x="61.5670%" y="421" width="0.0117%" height="15" fill="rgb(231,119,3)" fg:x="26355" fg:w="5"/><text x="61.8170%" y="431.50"></text></g><g><title>elvis_core::protocols::tcp::tcb::outgoing::Outgoing::queued_bytes (8 samples, 0.02%)</title><rect x="61.5787%" y="421" width="0.0187%" height="15" fill="rgb(216,97,11)" fg:x="26360" fg:w="8"/><text x="61.8287%" y="431.50"></text></g><g><title>elvis_core::protocols::tcp::tcb::outgoing::Outgoing::queued_bytes::{{closure}} (8 samples, 0.02%)</title><rect x="61.5974%" y="421" width="0.0187%" height="15" fill="rgb(223,59,9)" fg:x="26368" fg:w="8"/><text x="61.8474%" y="431.50"></text></g><g><title>elvis_core::protocols::tcp::tcp_parsing::Control::bit (34 samples, 0.08%)</title><rect x="61.6511%" y="421" width="0.0794%" height="15" fill="rgb(233,93,31)" fg:x="26391" fg:w="34"/><text x="61.9011%" y="431.50"></text></g><g><title>elvis_core::protocols::tcp::tcp_parsing::Control::set_bit (12 samples, 0.03%)</title><rect x="61.7539%" y="421" width="0.0280%" height="15" fill="rgb(239,81,33)" fg:x="26435" fg:w="12"/><text x="62.0039%" y="431.50"></text></g><g><title>elvis_core::protocols::tcp::tcp_parsing::Control::syn (8 samples, 0.02%)</title><rect x="61.7820%" y="421" width="0.0187%" height="15" fill="rgb(213,120,34)" fg:x="26447" fg:w="8"/><text x="62.0320%" y="431.50"></text></g><g><title>elvis_core::protocols::tcp::tcp_parsing::TcpHeader::from_bytes (150 samples, 0.35%)</title><rect x="61.8006%" y="421" width="0.3504%" height="15" fill="rgb(243,49,53)" fg:x="26455" fg:w="150"/><text x="62.0506%" y="431.50"></text></g><g><title>elvis_core::protocols::tcp::tcp_parsing::TcpHeader::from_bytes::{{closure}} (123 samples, 0.29%)</title><rect x="62.1511%" y="421" width="0.2873%" height="15" fill="rgb(247,216,33)" fg:x="26605" fg:w="123"/><text x="62.4011%" y="431.50"></text></g><g><title>elvis_core::protocols::tcp::tcp_parsing::TcpHeader::serialize (26 samples, 0.06%)</title><rect x="62.4384%" y="421" width="0.0607%" height="15" fill="rgb(226,26,14)" fg:x="26728" fg:w="26"/><text x="62.6884%" y="431.50"></text></g><g><title>elvis_core::protocols::tcp::tcp_parsing::TcpHeaderBuilder::ack (7 samples, 0.02%)</title><rect x="62.4991%" y="421" width="0.0164%" height="15" fill="rgb(215,49,53)" fg:x="26754" fg:w="7"/><text x="62.7491%" y="431.50"></text></g><g><title>elvis_core::protocols::tcp::tcp_parsing::TcpHeaderBuilder::build (29 samples, 0.07%)</title><rect x="62.5155%" y="421" width="0.0677%" height="15" fill="rgb(245,162,40)" fg:x="26761" fg:w="29"/><text x="62.7655%" y="431.50"></text></g><g><title>elvis_core::protocols::tcp::tcp_parsing::TcpHeaderBuilder::new (6 samples, 0.01%)</title><rect x="62.5832%" y="421" width="0.0140%" height="15" fill="rgb(229,68,17)" fg:x="26790" fg:w="6"/><text x="62.8332%" y="431.50"></text></g><g><title>elvis_core::protocols::tcp::tcp_parsing::TcpHeaderBuilder::wnd (6 samples, 0.01%)</title><rect x="62.5972%" y="421" width="0.0140%" height="15" fill="rgb(213,182,10)" fg:x="26796" fg:w="6"/><text x="62.8472%" y="431.50"></text></g><g><title>elvis_core::protocols::tcp::tcp_session::TcpSession::new::{{closure}} (399 samples, 0.93%)</title><rect x="62.6113%" y="421" width="0.9321%" height="15" fill="rgb(245,125,30)" fg:x="26802" fg:w="399"/><text x="62.8613%" y="431.50"></text></g><g><title>elvis_core::protocols::tcp::tcp_session::TcpSession::receive (8 samples, 0.02%)</title><rect x="63.5433%" y="421" width="0.0187%" height="15" fill="rgb(232,202,2)" fg:x="27201" fg:w="8"/><text x="63.7933%" y="431.50"></text></g><g><title>elvis_core::protocols::tcp::tcp_session::TcpSession::receive::{{closure}} (10 samples, 0.02%)</title><rect x="63.5620%" y="421" width="0.0234%" height="15" fill="rgb(237,140,51)" fg:x="27209" fg:w="10"/><text x="63.8120%" y="431.50"></text></g><g><title>elvis_core::protocols::tcp::tcp_session::handle_instruction (10 samples, 0.02%)</title><rect x="63.5854%" y="421" width="0.0234%" height="15" fill="rgb(236,157,25)" fg:x="27219" fg:w="10"/><text x="63.8354%" y="431.50"></text></g><g><title>elvis_core::protocols::tcp_stream::TcpStream::read::{{closure}} (13 samples, 0.03%)</title><rect x="63.6134%" y="421" width="0.0304%" height="15" fill="rgb(219,209,0)" fg:x="27231" fg:w="13"/><text x="63.8634%" y="431.50"></text></g><g><title>elvis_core::protocols::tcp_stream::TcpStream::read_exact::{{closure}} (13 samples, 0.03%)</title><rect x="63.6438%" y="421" width="0.0304%" height="15" fill="rgb(240,116,54)" fg:x="27244" fg:w="13"/><text x="63.8938%" y="431.50"></text></g><g><title>elvis_core::protocols::tcp_stream::TcpStream::write::{{closure}} (6 samples, 0.01%)</title><rect x="63.6835%" y="421" width="0.0140%" height="15" fill="rgb(216,10,36)" fg:x="27261" fg:w="6"/><text x="63.9335%" y="431.50"></text></g><g><title>elvis_core::protocols::utility::Checksum::add_u16 (24 samples, 0.06%)</title><rect x="63.7022%" y="421" width="0.0561%" height="15" fill="rgb(222,72,44)" fg:x="27269" fg:w="24"/><text x="63.9522%" y="431.50"></text></g><g><title>elvis_core::protocols::utility::Checksum::add_u32 (18 samples, 0.04%)</title><rect x="63.7583%" y="421" width="0.0420%" height="15" fill="rgb(232,159,9)" fg:x="27293" fg:w="18"/><text x="64.0083%" y="431.50"></text></g><g><title>elvis_core::protocols::utility::Checksum::add_u8 (107 samples, 0.25%)</title><rect x="63.8003%" y="421" width="0.2500%" height="15" fill="rgb(210,39,32)" fg:x="27311" fg:w="107"/><text x="64.0503%" y="431.50"></text></g><g><title>elvis_core::protocols::utility::Checksum::as_u16 (6 samples, 0.01%)</title><rect x="64.0503%" y="421" width="0.0140%" height="15" fill="rgb(216,194,45)" fg:x="27418" fg:w="6"/><text x="64.3003%" y="431.50"></text></g><g><title>elvis_core::protocols::utility::Checksum::new (9 samples, 0.02%)</title><rect x="64.0643%" y="421" width="0.0210%" height="15" fill="rgb(218,18,35)" fg:x="27424" fg:w="9"/><text x="64.3143%" y="431.50"></text></g><g><title>elvis_core::protocols::utility::Endpoint::new (5 samples, 0.01%)</title><rect x="64.0853%" y="421" width="0.0117%" height="15" fill="rgb(207,83,51)" fg:x="27433" fg:w="5"/><text x="64.3353%" y="431.50"></text></g><g><title>epoll_wait (99 samples, 0.23%)</title><rect x="64.1017%" y="421" width="0.2313%" height="15" fill="rgb(225,63,43)" fg:x="27440" fg:w="99"/><text x="64.3517%" y="431.50"></text></g><g><title>[unknown] (94 samples, 0.22%)</title><rect x="64.1133%" y="405" width="0.2196%" height="15" fill="rgb(207,57,36)" fg:x="27445" fg:w="94"/><text x="64.3633%" y="415.50"></text></g><g><title>[unknown] (36 samples, 0.08%)</title><rect x="64.2488%" y="389" width="0.0841%" height="15" fill="rgb(216,99,33)" fg:x="27503" fg:w="36"/><text x="64.4988%" y="399.50"></text></g><g><title>[unknown] (30 samples, 0.07%)</title><rect x="64.2629%" y="373" width="0.0701%" height="15" fill="rgb(225,42,16)" fg:x="27509" fg:w="30"/><text x="64.5129%" y="383.50"></text></g><g><title>[unknown] (13 samples, 0.03%)</title><rect x="64.3026%" y="357" width="0.0304%" height="15" fill="rgb(220,201,45)" fg:x="27526" fg:w="13"/><text x="64.5526%" y="367.50"></text></g><g><title>[unknown] (7 samples, 0.02%)</title><rect x="64.3166%" y="341" width="0.0164%" height="15" fill="rgb(225,33,4)" fg:x="27532" fg:w="7"/><text x="64.5666%" y="351.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="64.3189%" y="325" width="0.0140%" height="15" fill="rgb(224,33,50)" fg:x="27533" fg:w="6"/><text x="64.5689%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (45 samples, 0.11%)</title><rect x="64.3329%" y="421" width="0.1051%" height="15" fill="rgb(246,198,51)" fg:x="27539" fg:w="45"/><text x="64.5829%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_key_value (21 samples, 0.05%)</title><rect x="64.4381%" y="421" width="0.0491%" height="15" fill="rgb(205,22,4)" fg:x="27584" fg:w="21"/><text x="64.6881%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (19 samples, 0.04%)</title><rect x="64.4871%" y="421" width="0.0444%" height="15" fill="rgb(206,3,8)" fg:x="27605" fg:w="19"/><text x="64.7371%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (5 samples, 0.01%)</title><rect x="64.5315%" y="421" width="0.0117%" height="15" fill="rgb(251,23,15)" fg:x="27624" fg:w="5"/><text x="64.7815%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (6 samples, 0.01%)</title><rect x="64.5432%" y="421" width="0.0140%" height="15" fill="rgb(252,88,28)" fg:x="27629" fg:w="6"/><text x="64.7932%" y="431.50"></text></g><g><title>hashbrown::map::equivalent_key (25 samples, 0.06%)</title><rect x="64.5619%" y="421" width="0.0584%" height="15" fill="rgb(212,127,14)" fg:x="27637" fg:w="25"/><text x="64.8119%" y="431.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (33 samples, 0.08%)</title><rect x="64.6203%" y="421" width="0.0771%" height="15" fill="rgb(247,145,37)" fg:x="27662" fg:w="33"/><text x="64.8703%" y="431.50"></text></g><g><title>hashbrown::map::make_hash (17 samples, 0.04%)</title><rect x="64.6974%" y="421" width="0.0397%" height="15" fill="rgb(209,117,53)" fg:x="27695" fg:w="17"/><text x="64.9474%" y="431.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (21 samples, 0.05%)</title><rect x="64.7371%" y="421" width="0.0491%" height="15" fill="rgb(212,90,42)" fg:x="27712" fg:w="21"/><text x="64.9871%" y="431.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::next_n (10 samples, 0.02%)</title><rect x="64.7861%" y="421" width="0.0234%" height="15" fill="rgb(218,164,37)" fg:x="27733" fg:w="10"/><text x="65.0361%" y="431.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::new (13 samples, 0.03%)</title><rect x="64.8095%" y="421" width="0.0304%" height="15" fill="rgb(246,65,34)" fg:x="27743" fg:w="13"/><text x="65.0595%" y="431.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (20 samples, 0.05%)</title><rect x="64.8399%" y="421" width="0.0467%" height="15" fill="rgb(231,100,33)" fg:x="27756" fg:w="20"/><text x="65.0899%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (40 samples, 0.09%)</title><rect x="64.8866%" y="421" width="0.0934%" height="15" fill="rgb(228,126,14)" fg:x="27776" fg:w="40"/><text x="65.1366%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::drop_elements (26 samples, 0.06%)</title><rect x="64.9800%" y="421" width="0.0607%" height="15" fill="rgb(215,173,21)" fg:x="27816" fg:w="26"/><text x="65.2300%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (34 samples, 0.08%)</title><rect x="65.0408%" y="421" width="0.0794%" height="15" fill="rgb(210,6,40)" fg:x="27842" fg:w="34"/><text x="65.2908%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (18 samples, 0.04%)</title><rect x="65.1202%" y="421" width="0.0420%" height="15" fill="rgb(212,48,18)" fg:x="27876" fg:w="18"/><text x="65.3702%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::free_buckets (18 samples, 0.04%)</title><rect x="65.1622%" y="421" width="0.0420%" height="15" fill="rgb(230,214,11)" fg:x="27894" fg:w="18"/><text x="65.4122%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (37 samples, 0.09%)</title><rect x="65.2043%" y="421" width="0.0864%" height="15" fill="rgb(254,105,39)" fg:x="27912" fg:w="37"/><text x="65.4543%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (12 samples, 0.03%)</title><rect x="65.2907%" y="421" width="0.0280%" height="15" fill="rgb(245,158,5)" fg:x="27949" fg:w="12"/><text x="65.5407%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (30 samples, 0.07%)</title><rect x="65.3188%" y="421" width="0.0701%" height="15" fill="rgb(249,208,11)" fg:x="27961" fg:w="30"/><text x="65.5688%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter (42 samples, 0.10%)</title><rect x="65.3888%" y="421" width="0.0981%" height="15" fill="rgb(210,39,28)" fg:x="27991" fg:w="42"/><text x="65.6388%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (6 samples, 0.01%)</title><rect x="65.4870%" y="421" width="0.0140%" height="15" fill="rgb(211,56,53)" fg:x="28033" fg:w="6"/><text x="65.7370%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (5 samples, 0.01%)</title><rect x="65.5010%" y="421" width="0.0117%" height="15" fill="rgb(226,201,30)" fg:x="28039" fg:w="5"/><text x="65.7510%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (49 samples, 0.11%)</title><rect x="65.5126%" y="421" width="0.1145%" height="15" fill="rgb(239,101,34)" fg:x="28044" fg:w="49"/><text x="65.7626%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::allocation_info (15 samples, 0.04%)</title><rect x="65.6271%" y="421" width="0.0350%" height="15" fill="rgb(226,209,5)" fg:x="28093" fg:w="15"/><text x="65.8771%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (37 samples, 0.09%)</title><rect x="65.6622%" y="421" width="0.0864%" height="15" fill="rgb(250,105,47)" fg:x="28108" fg:w="37"/><text x="65.9122%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (100 samples, 0.23%)</title><rect x="65.7486%" y="421" width="0.2336%" height="15" fill="rgb(230,72,3)" fg:x="28145" fg:w="100"/><text x="65.9986%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (46 samples, 0.11%)</title><rect x="65.9822%" y="421" width="0.1075%" height="15" fill="rgb(232,218,39)" fg:x="28245" fg:w="46"/><text x="66.2322%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::new_uninitialized (34 samples, 0.08%)</title><rect x="66.0897%" y="421" width="0.0794%" height="15" fill="rgb(248,166,6)" fg:x="28291" fg:w="34"/><text x="66.3397%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (13 samples, 0.03%)</title><rect x="66.1714%" y="421" width="0.0304%" height="15" fill="rgb(247,89,20)" fg:x="28326" fg:w="13"/><text x="66.4214%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize::{{closure}} (6 samples, 0.01%)</title><rect x="66.2018%" y="421" width="0.0140%" height="15" fill="rgb(248,130,54)" fg:x="28339" fg:w="6"/><text x="66.4518%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::record_item_insert_at (5 samples, 0.01%)</title><rect x="66.2158%" y="421" width="0.0117%" height="15" fill="rgb(234,196,4)" fg:x="28345" fg:w="5"/><text x="66.4658%" y="431.50"></text></g><g><title>hashbrown::raw::TableLayout::calculate_layout_for (50 samples, 0.12%)</title><rect x="66.2275%" y="421" width="0.1168%" height="15" fill="rgb(250,143,31)" fg:x="28350" fg:w="50"/><text x="66.4775%" y="431.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (5 samples, 0.01%)</title><rect x="66.3443%" y="421" width="0.0117%" height="15" fill="rgb(211,110,34)" fg:x="28400" fg:w="5"/><text x="66.5943%" y="431.50"></text></g><g><title>hashbrown::raw::capacity_to_buckets (19 samples, 0.04%)</title><rect x="66.3560%" y="421" width="0.0444%" height="15" fill="rgb(215,124,48)" fg:x="28405" fg:w="19"/><text x="66.6060%" y="431.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::as_ptr (22 samples, 0.05%)</title><rect x="66.4004%" y="421" width="0.0514%" height="15" fill="rgb(216,46,13)" fg:x="28424" fg:w="22"/><text x="66.6504%" y="431.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::as_ref (38 samples, 0.09%)</title><rect x="66.4517%" y="421" width="0.0888%" height="15" fill="rgb(205,184,25)" fg:x="28446" fg:w="38"/><text x="66.7017%" y="431.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::from_base_index (40 samples, 0.09%)</title><rect x="66.5405%" y="421" width="0.0934%" height="15" fill="rgb(228,1,10)" fg:x="28484" fg:w="40"/><text x="66.7905%" y="431.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::bucket (59 samples, 0.14%)</title><rect x="66.6363%" y="421" width="0.1378%" height="15" fill="rgb(213,116,27)" fg:x="28525" fg:w="59"/><text x="66.8863%" y="431.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::buckets (26 samples, 0.06%)</title><rect x="66.7741%" y="421" width="0.0607%" height="15" fill="rgb(241,95,50)" fg:x="28584" fg:w="26"/><text x="67.0241%" y="431.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::data_end (22 samples, 0.05%)</title><rect x="66.8349%" y="421" width="0.0514%" height="15" fill="rgb(238,48,32)" fg:x="28610" fg:w="22"/><text x="67.0849%" y="431.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::fallible_with_capacity (8 samples, 0.02%)</title><rect x="66.8863%" y="421" width="0.0187%" height="15" fill="rgb(235,113,49)" fg:x="28632" fg:w="8"/><text x="67.1363%" y="431.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (83 samples, 0.19%)</title><rect x="66.9049%" y="421" width="0.1939%" height="15" fill="rgb(205,127,43)" fg:x="28640" fg:w="83"/><text x="67.1549%" y="431.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find::{{closure}} (12 samples, 0.03%)</title><rect x="67.0988%" y="421" width="0.0280%" height="15" fill="rgb(250,162,2)" fg:x="28723" fg:w="12"/><text x="67.3488%" y="431.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::get (22 samples, 0.05%)</title><rect x="67.1292%" y="421" width="0.0514%" height="15" fill="rgb(220,13,41)" fg:x="28736" fg:w="22"/><text x="67.3792%" y="431.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::is_empty (16 samples, 0.04%)</title><rect x="67.1806%" y="421" width="0.0374%" height="15" fill="rgb(249,221,25)" fg:x="28758" fg:w="16"/><text x="67.4306%" y="431.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::len (32 samples, 0.07%)</title><rect x="67.2180%" y="421" width="0.0748%" height="15" fill="rgb(215,208,19)" fg:x="28774" fg:w="32"/><text x="67.4680%" y="431.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::ctrl (14 samples, 0.03%)</title><rect x="67.3184%" y="421" width="0.0327%" height="15" fill="rgb(236,175,2)" fg:x="28817" fg:w="14"/><text x="67.5684%" y="431.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::fallible_with_capacity (11 samples, 0.03%)</title><rect x="67.3511%" y="421" width="0.0257%" height="15" fill="rgb(241,52,2)" fg:x="28831" fg:w="11"/><text x="67.6011%" y="431.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::num_ctrl_bytes (16 samples, 0.04%)</title><rect x="67.3979%" y="421" width="0.0374%" height="15" fill="rgb(248,140,14)" fg:x="28851" fg:w="16"/><text x="67.6479%" y="431.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::probe_seq (23 samples, 0.05%)</title><rect x="67.4399%" y="421" width="0.0537%" height="15" fill="rgb(253,22,42)" fg:x="28869" fg:w="23"/><text x="67.6899%" y="431.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (6 samples, 0.01%)</title><rect x="67.5053%" y="421" width="0.0140%" height="15" fill="rgb(234,61,47)" fg:x="28897" fg:w="6"/><text x="67.7553%" y="431.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::nonzero_trailing_zeros (8 samples, 0.02%)</title><rect x="67.5193%" y="421" width="0.0187%" height="15" fill="rgb(208,226,15)" fg:x="28903" fg:w="8"/><text x="67.7693%" y="431.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::remove_lowest_bit (12 samples, 0.03%)</title><rect x="67.5380%" y="421" width="0.0280%" height="15" fill="rgb(217,221,4)" fg:x="28911" fg:w="12"/><text x="67.7880%" y="431.50"></text></g><g><title>hashbrown::raw::inner::h2 (27 samples, 0.06%)</title><rect x="67.5707%" y="421" width="0.0631%" height="15" fill="rgb(212,174,34)" fg:x="28925" fg:w="27"/><text x="67.8207%" y="431.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load (10 samples, 0.02%)</title><rect x="67.6361%" y="421" width="0.0234%" height="15" fill="rgb(253,83,4)" fg:x="28953" fg:w="10"/><text x="67.8861%" y="431.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (17 samples, 0.04%)</title><rect x="67.6595%" y="421" width="0.0397%" height="15" fill="rgb(250,195,49)" fg:x="28963" fg:w="17"/><text x="67.9095%" y="431.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (33 samples, 0.08%)</title><rect x="67.7015%" y="421" width="0.0771%" height="15" fill="rgb(241,192,25)" fg:x="28981" fg:w="33"/><text x="67.9515%" y="431.50"></text></g><g><title>lock_api::rwlock::RwLock&lt;R,T&gt;::new (7 samples, 0.02%)</title><rect x="67.7786%" y="421" width="0.0164%" height="15" fill="rgb(208,124,10)" fg:x="29014" fg:w="7"/><text x="68.0286%" y="431.50"></text></g><g><title>lock_api::rwlock::RwLock&lt;R,T&gt;::read (9 samples, 0.02%)</title><rect x="67.7950%" y="421" width="0.0210%" height="15" fill="rgb(222,33,0)" fg:x="29021" fg:w="9"/><text x="68.0450%" y="431.50"></text></g><g><title>lock_api::rwlock::RwLock&lt;R,T&gt;::write (12 samples, 0.03%)</title><rect x="67.8254%" y="421" width="0.0280%" height="15" fill="rgb(234,209,28)" fg:x="29034" fg:w="12"/><text x="68.0754%" y="431.50"></text></g><g><title>lock_api::rwlock::RwLock&lt;R,T&gt;::write_guard (8 samples, 0.02%)</title><rect x="67.8534%" y="421" width="0.0187%" height="15" fill="rgb(224,11,23)" fg:x="29046" fg:w="8"/><text x="68.1034%" y="431.50"></text></g><g><title>malloc (231 samples, 0.54%)</title><rect x="67.8721%" y="421" width="0.5396%" height="15" fill="rgb(232,99,1)" fg:x="29054" fg:w="231"/><text x="68.1221%" y="431.50"></text></g><g><title>malloc_consolidate (80 samples, 0.19%)</title><rect x="68.4117%" y="421" width="0.1869%" height="15" fill="rgb(237,95,45)" fg:x="29285" fg:w="80"/><text x="68.6617%" y="431.50"></text></g><g><title>rand::distributions::float::&lt;impl rand::distributions::distribution::Distribution&lt;f32&gt; for rand::distributions::Standard&gt;::sample (13 samples, 0.03%)</title><rect x="68.6220%" y="421" width="0.0304%" height="15" fill="rgb(208,109,11)" fg:x="29375" fg:w="13"/><text x="68.8720%" y="431.50"></text></g><g><title>rand::distributions::integer::&lt;impl rand::distributions::distribution::Distribution&lt;u32&gt; for rand::distributions::Standard&gt;::sample (11 samples, 0.03%)</title><rect x="68.6523%" y="421" width="0.0257%" height="15" fill="rgb(216,190,48)" fg:x="29388" fg:w="11"/><text x="68.9023%" y="431.50"></text></g><g><title>rand::random (6 samples, 0.01%)</title><rect x="68.6850%" y="421" width="0.0140%" height="15" fill="rgb(251,171,36)" fg:x="29402" fg:w="6"/><text x="68.9350%" y="431.50"></text></g><g><title>rand::rng::Rng::gen (7 samples, 0.02%)</title><rect x="68.6990%" y="421" width="0.0164%" height="15" fill="rgb(230,62,22)" fg:x="29408" fg:w="7"/><text x="68.9490%" y="431.50"></text></g><g><title>rand::rngs::thread::THREAD_RNG_KEY::__getit (5 samples, 0.01%)</title><rect x="68.7154%" y="421" width="0.0117%" height="15" fill="rgb(225,114,35)" fg:x="29415" fg:w="5"/><text x="68.9654%" y="431.50"></text></g><g><title>rand::rngs::thread::thread_rng (9 samples, 0.02%)</title><rect x="68.7271%" y="421" width="0.0210%" height="15" fill="rgb(215,118,42)" fg:x="29420" fg:w="9"/><text x="68.9771%" y="431.50"></text></g><g><title>&lt;core::slice::iter::ChunksExactMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.01%)</title><rect x="68.7785%" y="405" width="0.0117%" height="15" fill="rgb(243,119,21)" fg:x="29442" fg:w="5"/><text x="69.0285%" y="415.50"></text></g><g><title>__memmove_avx_unaligned_erms (8 samples, 0.02%)</title><rect x="68.7925%" y="405" width="0.0187%" height="15" fill="rgb(252,177,53)" fg:x="29448" fg:w="8"/><text x="69.0425%" y="415.50"></text></g><g><title>rand_chacha::guts::refill_wide (89 samples, 0.21%)</title><rect x="68.7551%" y="421" width="0.2079%" height="15" fill="rgb(237,209,29)" fg:x="29432" fg:w="89"/><text x="69.0051%" y="431.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (53 samples, 0.12%)</title><rect x="68.8392%" y="405" width="0.1238%" height="15" fill="rgb(212,65,23)" fg:x="29468" fg:w="53"/><text x="69.0892%" y="415.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_set_epi64x (7 samples, 0.02%)</title><rect x="68.9467%" y="389" width="0.0164%" height="15" fill="rgb(230,222,46)" fg:x="29514" fg:w="7"/><text x="69.1967%" y="399.50"></text></g><g><title>rustc_hash::FxHasher::add_to_hash (54 samples, 0.13%)</title><rect x="68.9677%" y="421" width="0.1261%" height="15" fill="rgb(215,135,32)" fg:x="29523" fg:w="54"/><text x="69.2177%" y="431.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (28 samples, 0.07%)</title><rect x="69.0938%" y="421" width="0.0654%" height="15" fill="rgb(246,101,22)" fg:x="29577" fg:w="28"/><text x="69.3438%" y="431.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (5 samples, 0.01%)</title><rect x="69.1592%" y="421" width="0.0117%" height="15" fill="rgb(206,107,13)" fg:x="29605" fg:w="5"/><text x="69.4092%" y="431.50"></text></g><g><title>std::panic::catch_unwind (69 samples, 0.16%)</title><rect x="69.1803%" y="421" width="0.1612%" height="15" fill="rgb(250,100,44)" fg:x="29614" fg:w="69"/><text x="69.4303%" y="431.50"></text></g><g><title>std::panicking::panic_count::count_is_zero (87 samples, 0.20%)</title><rect x="69.3415%" y="421" width="0.2032%" height="15" fill="rgb(231,147,38)" fg:x="29683" fg:w="87"/><text x="69.5915%" y="431.50"></text></g><g><title>std::panicking::try (206 samples, 0.48%)</title><rect x="69.5447%" y="421" width="0.4812%" height="15" fill="rgb(229,8,40)" fg:x="29770" fg:w="206"/><text x="69.7947%" y="431.50"></text></g><g><title>std::panicking::try::do_call (145 samples, 0.34%)</title><rect x="70.0259%" y="421" width="0.3387%" height="15" fill="rgb(221,135,30)" fg:x="29976" fg:w="145"/><text x="70.2759%" y="431.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (112 samples, 0.26%)</title><rect x="70.3647%" y="421" width="0.2616%" height="15" fill="rgb(249,193,18)" fg:x="30121" fg:w="112"/><text x="70.6147%" y="431.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (42 samples, 0.10%)</title><rect x="70.6286%" y="421" width="0.0981%" height="15" fill="rgb(209,133,39)" fg:x="30234" fg:w="42"/><text x="70.8786%" y="431.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new::{{closure}} (32 samples, 0.07%)</title><rect x="70.7268%" y="421" width="0.0748%" height="15" fill="rgb(232,100,14)" fg:x="30276" fg:w="32"/><text x="70.9768%" y="431.50"></text></g><g><title>std::sync::poison::Flag::done (52 samples, 0.12%)</title><rect x="70.8015%" y="421" width="0.1215%" height="15" fill="rgb(224,185,1)" fg:x="30308" fg:w="52"/><text x="71.0515%" y="431.50"></text></g><g><title>std::sync::poison::Flag::guard (45 samples, 0.11%)</title><rect x="70.9230%" y="421" width="0.1051%" height="15" fill="rgb(223,139,8)" fg:x="30360" fg:w="45"/><text x="71.1730%" y="431.50"></text></g><g><title>std::sync::poison::map_result (132 samples, 0.31%)</title><rect x="71.0281%" y="421" width="0.3084%" height="15" fill="rgb(232,213,38)" fg:x="30405" fg:w="132"/><text x="71.2781%" y="431.50"></text></g><g><title>std::sync::rwlock::RwLock&lt;T&gt;::read (47 samples, 0.11%)</title><rect x="71.3435%" y="421" width="0.1098%" height="15" fill="rgb(207,94,22)" fg:x="30540" fg:w="47"/><text x="71.5935%" y="431.50"></text></g><g><title>std::sync::rwlock::RwLock&lt;T&gt;::write (5 samples, 0.01%)</title><rect x="71.4533%" y="421" width="0.0117%" height="15" fill="rgb(219,183,54)" fg:x="30587" fg:w="5"/><text x="71.7033%" y="431.50"></text></g><g><title>std::sync::rwlock::RwLockReadGuard&lt;T&gt;::new (18 samples, 0.04%)</title><rect x="71.4649%" y="421" width="0.0420%" height="15" fill="rgb(216,185,54)" fg:x="30592" fg:w="18"/><text x="71.7149%" y="431.50"></text></g><g><title>std::sync::rwlock::RwLockReadGuard&lt;T&gt;::new::{{closure}} (26 samples, 0.06%)</title><rect x="71.5070%" y="421" width="0.0607%" height="15" fill="rgb(254,217,39)" fg:x="30610" fg:w="26"/><text x="71.7570%" y="431.50"></text></g><g><title>std::sys::common::thread_local::fast_local::Key&lt;T&gt;::get (16 samples, 0.04%)</title><rect x="71.5724%" y="421" width="0.0374%" height="15" fill="rgb(240,178,23)" fg:x="30638" fg:w="16"/><text x="71.8224%" y="431.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (49 samples, 0.11%)</title><rect x="71.6191%" y="421" width="0.1145%" height="15" fill="rgb(218,11,47)" fg:x="30658" fg:w="49"/><text x="71.8691%" y="431.50"></text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::read (47 samples, 0.11%)</title><rect x="71.7336%" y="421" width="0.1098%" height="15" fill="rgb(218,51,51)" fg:x="30707" fg:w="47"/><text x="71.9836%" y="431.50"></text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::read_unlock (57 samples, 0.13%)</title><rect x="71.8434%" y="421" width="0.1332%" height="15" fill="rgb(238,126,27)" fg:x="30754" fg:w="57"/><text x="72.0934%" y="431.50"></text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::write (10 samples, 0.02%)</title><rect x="71.9765%" y="421" width="0.0234%" height="15" fill="rgb(249,202,22)" fg:x="30811" fg:w="10"/><text x="72.2265%" y="431.50"></text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::write_unlock (16 samples, 0.04%)</title><rect x="71.9999%" y="421" width="0.0374%" height="15" fill="rgb(254,195,49)" fg:x="30821" fg:w="16"/><text x="72.2499%" y="431.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (9 samples, 0.02%)</title><rect x="72.0373%" y="421" width="0.0210%" height="15" fill="rgb(208,123,14)" fg:x="30837" fg:w="9"/><text x="72.2873%" y="431.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (38 samples, 0.09%)</title><rect x="72.0583%" y="421" width="0.0888%" height="15" fill="rgb(224,200,8)" fg:x="30846" fg:w="38"/><text x="72.3083%" y="431.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (868 samples, 2.03%)</title><rect x="72.1471%" y="421" width="2.0277%" height="15" fill="rgb(217,61,36)" fg:x="30884" fg:w="868"/><text x="72.3971%" y="431.50">s..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (64 samples, 0.15%)</title><rect x="74.1748%" y="421" width="0.1495%" height="15" fill="rgb(206,35,45)" fg:x="31752" fg:w="64"/><text x="74.4248%" y="431.50"></text></g><g><title>std::time::Instant::checked_duration_since (11 samples, 0.03%)</title><rect x="74.3243%" y="421" width="0.0257%" height="15" fill="rgb(217,65,33)" fg:x="31816" fg:w="11"/><text x="74.5743%" y="431.50"></text></g><g><title>std::time::Instant::now (6 samples, 0.01%)</title><rect x="74.3500%" y="421" width="0.0140%" height="15" fill="rgb(222,158,48)" fg:x="31827" fg:w="6"/><text x="74.6000%" y="431.50"></text></g><g><title>std::time::SystemTime::checked_add (7 samples, 0.02%)</title><rect x="74.3640%" y="421" width="0.0164%" height="15" fill="rgb(254,2,54)" fg:x="31833" fg:w="7"/><text x="74.6140%" y="431.50"></text></g><g><title>sysmalloc (500 samples, 1.17%)</title><rect x="74.3850%" y="421" width="1.1680%" height="15" fill="rgb(250,143,38)" fg:x="31842" fg:w="500"/><text x="74.6350%" y="431.50"></text></g><g><title>[unknown] (466 samples, 1.09%)</title><rect x="74.4645%" y="405" width="1.0886%" height="15" fill="rgb(248,25,0)" fg:x="31876" fg:w="466"/><text x="74.7145%" y="415.50"></text></g><g><title>[unknown] (332 samples, 0.78%)</title><rect x="74.7775%" y="389" width="0.7756%" height="15" fill="rgb(206,152,27)" fg:x="32010" fg:w="332"/><text x="75.0275%" y="399.50"></text></g><g><title>[unknown] (329 samples, 0.77%)</title><rect x="74.7845%" y="373" width="0.7686%" height="15" fill="rgb(240,77,30)" fg:x="32013" fg:w="329"/><text x="75.0345%" y="383.50"></text></g><g><title>[unknown] (323 samples, 0.75%)</title><rect x="74.7985%" y="357" width="0.7545%" height="15" fill="rgb(231,5,3)" fg:x="32019" fg:w="323"/><text x="75.0485%" y="367.50"></text></g><g><title>[unknown] (252 samples, 0.59%)</title><rect x="74.9644%" y="341" width="0.5887%" height="15" fill="rgb(207,226,32)" fg:x="32090" fg:w="252"/><text x="75.2144%" y="351.50"></text></g><g><title>[unknown] (230 samples, 0.54%)</title><rect x="75.0158%" y="325" width="0.5373%" height="15" fill="rgb(222,207,47)" fg:x="32112" fg:w="230"/><text x="75.2658%" y="335.50"></text></g><g><title>[unknown] (216 samples, 0.50%)</title><rect x="75.0485%" y="309" width="0.5046%" height="15" fill="rgb(229,115,45)" fg:x="32126" fg:w="216"/><text x="75.2985%" y="319.50"></text></g><g><title>[unknown] (187 samples, 0.44%)</title><rect x="75.1162%" y="293" width="0.4368%" height="15" fill="rgb(224,191,6)" fg:x="32155" fg:w="187"/><text x="75.3662%" y="303.50"></text></g><g><title>[unknown] (169 samples, 0.39%)</title><rect x="75.1583%" y="277" width="0.3948%" height="15" fill="rgb(230,227,24)" fg:x="32173" fg:w="169"/><text x="75.4083%" y="287.50"></text></g><g><title>[unknown] (129 samples, 0.30%)</title><rect x="75.2517%" y="261" width="0.3014%" height="15" fill="rgb(228,80,19)" fg:x="32213" fg:w="129"/><text x="75.5017%" y="271.50"></text></g><g><title>[unknown] (103 samples, 0.24%)</title><rect x="75.3124%" y="245" width="0.2406%" height="15" fill="rgb(247,229,0)" fg:x="32239" fg:w="103"/><text x="75.5624%" y="255.50"></text></g><g><title>[unknown] (81 samples, 0.19%)</title><rect x="75.3638%" y="229" width="0.1892%" height="15" fill="rgb(237,194,15)" fg:x="32261" fg:w="81"/><text x="75.6138%" y="239.50"></text></g><g><title>[unknown] (22 samples, 0.05%)</title><rect x="75.5017%" y="213" width="0.0514%" height="15" fill="rgb(219,203,20)" fg:x="32320" fg:w="22"/><text x="75.7517%" y="223.50"></text></g><g><title>[unknown] (8 samples, 0.02%)</title><rect x="75.5344%" y="197" width="0.0187%" height="15" fill="rgb(234,128,8)" fg:x="32334" fg:w="8"/><text x="75.7844%" y="207.50"></text></g><g><title>tokio::future::poll_fn::poll_fn (11 samples, 0.03%)</title><rect x="75.5531%" y="421" width="0.0257%" height="15" fill="rgb(248,202,8)" fg:x="32342" fg:w="11"/><text x="75.8031%" y="431.50"></text></g><g><title>tokio::loom::std::atomic_usize::AtomicUsize::new (76 samples, 0.18%)</title><rect x="75.5788%" y="421" width="0.1775%" height="15" fill="rgb(206,104,37)" fg:x="32353" fg:w="76"/><text x="75.8288%" y="431.50"></text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (64 samples, 0.15%)</title><rect x="75.7563%" y="421" width="0.1495%" height="15" fill="rgb(223,8,27)" fg:x="32429" fg:w="64"/><text x="76.0063%" y="431.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::new (22 samples, 0.05%)</title><rect x="75.9152%" y="421" width="0.0514%" height="15" fill="rgb(216,217,28)" fg:x="32497" fg:w="22"/><text x="76.1652%" y="431.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with (66 samples, 0.15%)</title><rect x="75.9665%" y="421" width="0.1542%" height="15" fill="rgb(249,199,1)" fg:x="32519" fg:w="66"/><text x="76.2165%" y="431.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (308 samples, 0.72%)</title><rect x="76.1207%" y="421" width="0.7195%" height="15" fill="rgb(240,85,17)" fg:x="32585" fg:w="308"/><text x="76.3707%" y="431.50"></text></g><g><title>tokio::macros::support::thread_rng_n (7 samples, 0.02%)</title><rect x="76.8402%" y="421" width="0.0164%" height="15" fill="rgb(206,108,45)" fg:x="32893" fg:w="7"/><text x="77.0902%" y="431.50"></text></g><g><title>tokio::runtime::context::CONTEXT::__getit (278 samples, 0.65%)</title><rect x="76.8566%" y="421" width="0.6494%" height="15" fill="rgb(245,210,41)" fg:x="32900" fg:w="278"/><text x="77.1066%" y="431.50"></text></g><g><title>tokio::runtime::context::budget (101 samples, 0.24%)</title><rect x="77.5060%" y="421" width="0.2359%" height="15" fill="rgb(206,13,37)" fg:x="33178" fg:w="101"/><text x="77.7560%" y="431.50"></text></g><g><title>tokio::runtime::context::budget::{{closure}} (96 samples, 0.22%)</title><rect x="77.7420%" y="421" width="0.2243%" height="15" fill="rgb(250,61,18)" fg:x="33279" fg:w="96"/><text x="77.9920%" y="431.50"></text></g><g><title>tokio::runtime::context::current::with_current (63 samples, 0.15%)</title><rect x="77.9662%" y="421" width="0.1472%" height="15" fill="rgb(235,172,48)" fg:x="33375" fg:w="63"/><text x="78.2162%" y="431.50"></text></g><g><title>tokio::runtime::context::current::with_current::{{closure}} (53 samples, 0.12%)</title><rect x="78.1134%" y="421" width="0.1238%" height="15" fill="rgb(249,201,17)" fg:x="33438" fg:w="53"/><text x="78.3634%" y="431.50"></text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::with (56 samples, 0.13%)</title><rect x="78.2372%" y="421" width="0.1308%" height="15" fill="rgb(219,208,6)" fg:x="33491" fg:w="56"/><text x="78.4872%" y="431.50"></text></g><g><title>tokio::runtime::context::set_current_task_id (46 samples, 0.11%)</title><rect x="78.3680%" y="421" width="0.1075%" height="15" fill="rgb(248,31,23)" fg:x="33547" fg:w="46"/><text x="78.6180%" y="431.50"></text></g><g><title>tokio::runtime::context::set_current_task_id::{{closure}} (41 samples, 0.10%)</title><rect x="78.4755%" y="421" width="0.0958%" height="15" fill="rgb(245,15,42)" fg:x="33593" fg:w="41"/><text x="78.7255%" y="431.50"></text></g><g><title>tokio::runtime::context::thread_rng_n::{{closure}} (7 samples, 0.02%)</title><rect x="78.5783%" y="421" width="0.0164%" height="15" fill="rgb(222,217,39)" fg:x="33637" fg:w="7"/><text x="78.8283%" y="431.50"></text></g><g><title>tokio::runtime::context::with_scheduler (42 samples, 0.10%)</title><rect x="78.5946%" y="421" width="0.0981%" height="15" fill="rgb(210,219,27)" fg:x="33644" fg:w="42"/><text x="78.8446%" y="431.50"></text></g><g><title>tokio::runtime::context::with_scheduler::{{closure}} (14 samples, 0.03%)</title><rect x="78.6927%" y="421" width="0.0327%" height="15" fill="rgb(252,166,36)" fg:x="33686" fg:w="14"/><text x="78.9427%" y="431.50"></text></g><g><title>tokio::runtime::coop::Budget::decrement (102 samples, 0.24%)</title><rect x="78.7254%" y="421" width="0.2383%" height="15" fill="rgb(245,132,34)" fg:x="33700" fg:w="102"/><text x="78.9754%" y="431.50"></text></g><g><title>tokio::runtime::coop::Budget::has_remaining (36 samples, 0.08%)</title><rect x="78.9637%" y="421" width="0.0841%" height="15" fill="rgb(236,54,3)" fg:x="33802" fg:w="36"/><text x="79.2137%" y="431.50"></text></g><g><title>tokio::runtime::coop::Budget::has_remaining::{{closure}} (27 samples, 0.06%)</title><rect x="79.0478%" y="421" width="0.0631%" height="15" fill="rgb(241,173,43)" fg:x="33838" fg:w="27"/><text x="79.2978%" y="431.50"></text></g><g><title>tokio::runtime::coop::Budget::initial (32 samples, 0.07%)</title><rect x="79.1109%" y="421" width="0.0748%" height="15" fill="rgb(215,190,9)" fg:x="33865" fg:w="32"/><text x="79.3609%" y="431.50"></text></g><g><title>tokio::runtime::coop::Budget::is_unconstrained (101 samples, 0.24%)</title><rect x="79.1856%" y="421" width="0.2359%" height="15" fill="rgb(242,101,16)" fg:x="33897" fg:w="101"/><text x="79.4356%" y="431.50"></text></g><g><title>tokio::runtime::coop::Budget::unconstrained (21 samples, 0.05%)</title><rect x="79.4216%" y="421" width="0.0491%" height="15" fill="rgb(223,190,21)" fg:x="33998" fg:w="21"/><text x="79.6716%" y="431.50"></text></g><g><title>tokio::runtime::coop::RestoreOnPending::made_progress (10 samples, 0.02%)</title><rect x="79.4706%" y="421" width="0.0234%" height="15" fill="rgb(215,228,25)" fg:x="34019" fg:w="10"/><text x="79.7206%" y="431.50"></text></g><g><title>tokio::runtime::coop::has_budget_remaining::{{closure}} (23 samples, 0.05%)</title><rect x="79.4940%" y="421" width="0.0537%" height="15" fill="rgb(225,36,22)" fg:x="34029" fg:w="23"/><text x="79.7440%" y="431.50"></text></g><g><title>tokio::runtime::coop::poll_proceed (136 samples, 0.32%)</title><rect x="79.5477%" y="421" width="0.3177%" height="15" fill="rgb(251,106,46)" fg:x="34052" fg:w="136"/><text x="79.7977%" y="431.50"></text></g><g><title>tokio::runtime::coop::poll_proceed::{{closure}} (186 samples, 0.43%)</title><rect x="79.8654%" y="421" width="0.4345%" height="15" fill="rgb(208,90,1)" fg:x="34188" fg:w="186"/><text x="80.1154%" y="431.50"></text></g><g><title>tokio::runtime::coop::with_budget::{{closure}} (52 samples, 0.12%)</title><rect x="80.3000%" y="421" width="0.1215%" height="15" fill="rgb(243,10,4)" fg:x="34374" fg:w="52"/><text x="80.5500%" y="431.50"></text></g><g><title>tokio::runtime::driver::Handle::time (33 samples, 0.08%)</title><rect x="80.4308%" y="421" width="0.0771%" height="15" fill="rgb(212,137,27)" fg:x="34430" fg:w="33"/><text x="80.6808%" y="431.50"></text></g><g><title>tokio::runtime::metrics::mock::MetricsBatch::end_poll (18 samples, 0.04%)</title><rect x="80.5265%" y="421" width="0.0420%" height="15" fill="rgb(231,220,49)" fg:x="34471" fg:w="18"/><text x="80.7765%" y="431.50"></text></g><g><title>tokio::runtime::metrics::mock::MetricsBatch::inc_local_schedule_count (11 samples, 0.03%)</title><rect x="80.5686%" y="421" width="0.0257%" height="15" fill="rgb(237,96,20)" fg:x="34489" fg:w="11"/><text x="80.8186%" y="431.50"></text></g><g><title>tokio::runtime::metrics::mock::WorkerMetrics::set_queue_depth (19 samples, 0.04%)</title><rect x="80.6013%" y="421" width="0.0444%" height="15" fill="rgb(239,229,30)" fg:x="34503" fg:w="19"/><text x="80.8513%" y="431.50"></text></g><g><title>tokio::runtime::scheduler::Handle::current (15 samples, 0.04%)</title><rect x="80.6457%" y="421" width="0.0350%" height="15" fill="rgb(219,65,33)" fg:x="34522" fg:w="15"/><text x="80.8957%" y="431.50"></text></g><g><title>tokio::runtime::scheduler::Handle::driver (77 samples, 0.18%)</title><rect x="80.6807%" y="421" width="0.1799%" height="15" fill="rgb(243,134,7)" fg:x="34537" fg:w="77"/><text x="80.9307%" y="431.50"></text></g><g><title>tokio::runtime::scheduler::Handle::spawn (18 samples, 0.04%)</title><rect x="80.8606%" y="421" width="0.0420%" height="15" fill="rgb(216,177,54)" fg:x="34614" fg:w="18"/><text x="81.1106%" y="431.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::current_thread::Handle&gt;&gt;::schedule (17 samples, 0.04%)</title><rect x="80.9120%" y="421" width="0.0397%" height="15" fill="rgb(211,160,20)" fg:x="34636" fg:w="17"/><text x="81.1620%" y="431.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::current_thread::Handle&gt;&gt;::schedule::{{closure}} (79 samples, 0.18%)</title><rect x="80.9517%" y="421" width="0.1845%" height="15" fill="rgb(239,85,39)" fg:x="34653" fg:w="79"/><text x="81.2017%" y="431.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Context::enter (75 samples, 0.18%)</title><rect x="81.1363%" y="421" width="0.1752%" height="15" fill="rgb(232,125,22)" fg:x="34732" fg:w="75"/><text x="81.3863%" y="431.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Context::run_task (38 samples, 0.09%)</title><rect x="81.3231%" y="421" width="0.0888%" height="15" fill="rgb(244,57,34)" fg:x="34812" fg:w="38"/><text x="81.5731%" y="431.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Context::run_task::{{closure}} (68 samples, 0.16%)</title><rect x="81.4119%" y="421" width="0.1589%" height="15" fill="rgb(214,203,32)" fg:x="34850" fg:w="68"/><text x="81.6619%" y="431.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Core::next_local_task (11 samples, 0.03%)</title><rect x="81.5708%" y="421" width="0.0257%" height="15" fill="rgb(207,58,43)" fg:x="34918" fg:w="11"/><text x="81.8208%" y="431.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Core::next_task (76 samples, 0.18%)</title><rect x="81.5965%" y="421" width="0.1775%" height="15" fill="rgb(215,193,15)" fg:x="34929" fg:w="76"/><text x="81.8465%" y="431.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Core::push_task (26 samples, 0.06%)</title><rect x="81.7787%" y="421" width="0.0607%" height="15" fill="rgb(232,15,44)" fg:x="35007" fg:w="26"/><text x="82.0287%" y="431.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Core::tick (24 samples, 0.06%)</title><rect x="81.8394%" y="421" width="0.0561%" height="15" fill="rgb(212,3,48)" fg:x="35033" fg:w="24"/><text x="82.0894%" y="431.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::CoreGuard::block_on::{{closure}} (135 samples, 0.32%)</title><rect x="81.8955%" y="421" width="0.3154%" height="15" fill="rgb(218,128,7)" fg:x="35057" fg:w="135"/><text x="82.1455%" y="431.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::CoreGuard::block_on::{{closure}}::{{closure}} (23 samples, 0.05%)</title><rect x="82.2109%" y="421" width="0.0537%" height="15" fill="rgb(226,216,39)" fg:x="35192" fg:w="23"/><text x="82.4609%" y="431.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Handle::spawn (48 samples, 0.11%)</title><rect x="82.2693%" y="421" width="0.1121%" height="15" fill="rgb(243,47,51)" fg:x="35217" fg:w="48"/><text x="82.5193%" y="431.50"></text></g><g><title>tokio::runtime::task::LocalNotified&lt;S&gt;::run (32 samples, 0.07%)</title><rect x="82.4024%" y="421" width="0.0748%" height="15" fill="rgb(241,183,40)" fg:x="35274" fg:w="32"/><text x="82.6524%" y="431.50"></text></g><g><title>tokio::runtime::task::Notified&lt;S&gt;::header (24 samples, 0.06%)</title><rect x="82.4772%" y="421" width="0.0561%" height="15" fill="rgb(231,217,32)" fg:x="35306" fg:w="24"/><text x="82.7272%" y="431.50"></text></g><g><title>tokio::runtime::task::Task&lt;S&gt;::from_raw (25 samples, 0.06%)</title><rect x="82.5332%" y="421" width="0.0584%" height="15" fill="rgb(229,61,38)" fg:x="35330" fg:w="25"/><text x="82.7832%" y="431.50"></text></g><g><title>tokio::runtime::task::Task&lt;S&gt;::header (38 samples, 0.09%)</title><rect x="82.5916%" y="421" width="0.0888%" height="15" fill="rgb(225,210,5)" fg:x="35355" fg:w="38"/><text x="82.8416%" y="431.50"></text></g><g><title>tokio::runtime::task::Task&lt;S&gt;::header_ptr (7 samples, 0.02%)</title><rect x="82.6804%" y="421" width="0.0164%" height="15" fill="rgb(231,79,45)" fg:x="35393" fg:w="7"/><text x="82.9304%" y="431.50"></text></g><g><title>tokio::runtime::task::Task&lt;S&gt;::new (25 samples, 0.06%)</title><rect x="82.6968%" y="421" width="0.0584%" height="15" fill="rgb(224,100,7)" fg:x="35400" fg:w="25"/><text x="82.9468%" y="431.50"></text></g><g><title>tokio::runtime::task::core::Cell&lt;T,S&gt;::new (9 samples, 0.02%)</title><rect x="82.7552%" y="421" width="0.0210%" height="15" fill="rgb(241,198,18)" fg:x="35425" fg:w="9"/><text x="83.0052%" y="431.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::drop_future_or_output (16 samples, 0.04%)</title><rect x="82.7762%" y="421" width="0.0374%" height="15" fill="rgb(252,97,53)" fg:x="35434" fg:w="16"/><text x="83.0262%" y="431.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (96 samples, 0.22%)</title><rect x="82.8136%" y="421" width="0.2243%" height="15" fill="rgb(220,88,7)" fg:x="35450" fg:w="96"/><text x="83.0636%" y="431.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::{{closure}} (151 samples, 0.35%)</title><rect x="83.0378%" y="421" width="0.3527%" height="15" fill="rgb(213,176,14)" fg:x="35546" fg:w="151"/><text x="83.2878%" y="431.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::set_stage (48 samples, 0.11%)</title><rect x="83.3906%" y="421" width="0.1121%" height="15" fill="rgb(246,73,7)" fg:x="35697" fg:w="48"/><text x="83.6406%" y="431.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::set_stage::{{closure}} (15 samples, 0.04%)</title><rect x="83.5027%" y="421" width="0.0350%" height="15" fill="rgb(245,64,36)" fg:x="35745" fg:w="15"/><text x="83.7527%" y="431.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::store_output (19 samples, 0.04%)</title><rect x="83.5377%" y="421" width="0.0444%" height="15" fill="rgb(245,80,10)" fg:x="35760" fg:w="19"/><text x="83.7877%" y="431.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::with_mut (17 samples, 0.04%)</title><rect x="83.5821%" y="421" width="0.0397%" height="15" fill="rgb(232,107,50)" fg:x="35779" fg:w="17"/><text x="83.8321%" y="431.50"></text></g><g><title>tokio::runtime::task::core::Header::get_owner_id (13 samples, 0.03%)</title><rect x="83.6218%" y="421" width="0.0304%" height="15" fill="rgb(253,3,0)" fg:x="35796" fg:w="13"/><text x="83.8718%" y="431.50"></text></g><g><title>tokio::runtime::task::core::Header::get_owner_id::{{closure}} (199 samples, 0.46%)</title><rect x="83.6522%" y="421" width="0.4649%" height="15" fill="rgb(212,99,53)" fg:x="35809" fg:w="199"/><text x="83.9022%" y="431.50"></text></g><g><title>tokio::runtime::task::core::Header::get_scheduler (18 samples, 0.04%)</title><rect x="84.1171%" y="421" width="0.0420%" height="15" fill="rgb(249,111,54)" fg:x="36008" fg:w="18"/><text x="84.3671%" y="431.50"></text></g><g><title>tokio::runtime::task::core::Header::get_trailer (248 samples, 0.58%)</title><rect x="84.1591%" y="421" width="0.5793%" height="15" fill="rgb(249,55,30)" fg:x="36026" fg:w="248"/><text x="84.4091%" y="431.50"></text></g><g><title>tokio::runtime::task::core::Header::set_owner_id (15 samples, 0.04%)</title><rect x="84.7385%" y="421" width="0.0350%" height="15" fill="rgb(237,47,42)" fg:x="36274" fg:w="15"/><text x="84.9885%" y="431.50"></text></g><g><title>tokio::runtime::task::core::Header::set_owner_id::{{closure}} (12 samples, 0.03%)</title><rect x="84.7735%" y="421" width="0.0280%" height="15" fill="rgb(211,20,18)" fg:x="36289" fg:w="12"/><text x="85.0235%" y="431.50"></text></g><g><title>tokio::runtime::task::core::TaskIdGuard::enter (21 samples, 0.05%)</title><rect x="84.8016%" y="421" width="0.0491%" height="15" fill="rgb(231,203,46)" fg:x="36301" fg:w="21"/><text x="85.0516%" y="431.50"></text></g><g><title>tokio::runtime::task::core::Trailer::addr_of_owned (35 samples, 0.08%)</title><rect x="84.8506%" y="421" width="0.0818%" height="15" fill="rgb(237,142,3)" fg:x="36322" fg:w="35"/><text x="85.1006%" y="431.50"></text></g><g><title>tokio::runtime::task::harness::&lt;impl tokio::runtime::task::raw::RawTask&gt;::drop_reference (9 samples, 0.02%)</title><rect x="84.9324%" y="421" width="0.0210%" height="15" fill="rgb(241,107,1)" fg:x="36357" fg:w="9"/><text x="85.1824%" y="431.50"></text></g><g><title>tokio::runtime::task::harness::&lt;impl tokio::runtime::task::raw::RawTask&gt;::wake_by_val (18 samples, 0.04%)</title><rect x="84.9534%" y="421" width="0.0420%" height="15" fill="rgb(229,83,13)" fg:x="36366" fg:w="18"/><text x="85.2034%" y="431.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::complete (12 samples, 0.03%)</title><rect x="84.9954%" y="421" width="0.0280%" height="15" fill="rgb(241,91,40)" fg:x="36384" fg:w="12"/><text x="85.2454%" y="431.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::complete::{{closure}} (15 samples, 0.04%)</title><rect x="85.0235%" y="421" width="0.0350%" height="15" fill="rgb(225,3,45)" fg:x="36396" fg:w="15"/><text x="85.2735%" y="431.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::core (18 samples, 0.04%)</title><rect x="85.0585%" y="421" width="0.0420%" height="15" fill="rgb(244,223,14)" fg:x="36411" fg:w="18"/><text x="85.3085%" y="431.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::dealloc (23 samples, 0.05%)</title><rect x="85.1006%" y="421" width="0.0537%" height="15" fill="rgb(224,124,37)" fg:x="36429" fg:w="23"/><text x="85.3506%" y="431.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::from_raw (29 samples, 0.07%)</title><rect x="85.1543%" y="421" width="0.0677%" height="15" fill="rgb(251,171,30)" fg:x="36452" fg:w="29"/><text x="85.4043%" y="431.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::get_new_task (6 samples, 0.01%)</title><rect x="85.2220%" y="421" width="0.0140%" height="15" fill="rgb(236,46,54)" fg:x="36481" fg:w="6"/><text x="85.4720%" y="431.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::header (83 samples, 0.19%)</title><rect x="85.2361%" y="421" width="0.1939%" height="15" fill="rgb(245,213,5)" fg:x="36487" fg:w="83"/><text x="85.4861%" y="431.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::header_ptr (44 samples, 0.10%)</title><rect x="85.4300%" y="421" width="0.1028%" height="15" fill="rgb(230,144,27)" fg:x="36570" fg:w="44"/><text x="85.6800%" y="431.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (80 samples, 0.19%)</title><rect x="85.5327%" y="421" width="0.1869%" height="15" fill="rgb(220,86,6)" fg:x="36614" fg:w="80"/><text x="85.7827%" y="431.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (152 samples, 0.36%)</title><rect x="85.7196%" y="421" width="0.3551%" height="15" fill="rgb(240,20,13)" fg:x="36694" fg:w="152"/><text x="85.9696%" y="431.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::release (30 samples, 0.07%)</title><rect x="86.0747%" y="421" width="0.0701%" height="15" fill="rgb(217,89,34)" fg:x="36846" fg:w="30"/><text x="86.3247%" y="431.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::state (46 samples, 0.11%)</title><rect x="86.1448%" y="421" width="0.1075%" height="15" fill="rgb(229,13,5)" fg:x="36876" fg:w="46"/><text x="86.3948%" y="431.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::trailer (17 samples, 0.04%)</title><rect x="86.2522%" y="421" width="0.0397%" height="15" fill="rgb(244,67,35)" fg:x="36922" fg:w="17"/><text x="86.5022%" y="431.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (128 samples, 0.30%)</title><rect x="86.2943%" y="421" width="0.2990%" height="15" fill="rgb(221,40,2)" fg:x="36940" fg:w="128"/><text x="86.5443%" y="431.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (121 samples, 0.28%)</title><rect x="86.5933%" y="421" width="0.2827%" height="15" fill="rgb(237,157,21)" fg:x="37068" fg:w="121"/><text x="86.8433%" y="431.50"></text></g><g><title>tokio::runtime::task::join::JoinHandle&lt;T&gt;::new (8 samples, 0.02%)</title><rect x="86.8923%" y="421" width="0.0187%" height="15" fill="rgb(222,94,11)" fg:x="37196" fg:w="8"/><text x="87.1423%" y="431.50"></text></g><g><title>tokio::runtime::task::list::OwnedTasks&lt;S&gt;::assert_owner (64 samples, 0.15%)</title><rect x="86.9110%" y="421" width="0.1495%" height="15" fill="rgb(249,113,6)" fg:x="37204" fg:w="64"/><text x="87.1610%" y="431.50"></text></g><g><title>tokio::runtime::task::list::OwnedTasks&lt;S&gt;::bind (44 samples, 0.10%)</title><rect x="87.0605%" y="421" width="0.1028%" height="15" fill="rgb(238,137,36)" fg:x="37268" fg:w="44"/><text x="87.3105%" y="431.50"></text></g><g><title>tokio::runtime::task::list::OwnedTasks&lt;S&gt;::remove (32 samples, 0.07%)</title><rect x="87.1633%" y="421" width="0.0748%" height="15" fill="rgb(210,102,26)" fg:x="37312" fg:w="32"/><text x="87.4133%" y="431.50"></text></g><g><title>tokio::runtime::task::new_task (18 samples, 0.04%)</title><rect x="87.2381%" y="421" width="0.0420%" height="15" fill="rgb(218,30,30)" fg:x="37344" fg:w="18"/><text x="87.4881%" y="431.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::from_raw (23 samples, 0.05%)</title><rect x="87.2801%" y="421" width="0.0537%" height="15" fill="rgb(214,67,26)" fg:x="37362" fg:w="23"/><text x="87.5301%" y="431.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::header (91 samples, 0.21%)</title><rect x="87.3338%" y="421" width="0.2126%" height="15" fill="rgb(251,9,53)" fg:x="37385" fg:w="91"/><text x="87.5838%" y="431.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::header_ptr (16 samples, 0.04%)</title><rect x="87.5464%" y="421" width="0.0374%" height="15" fill="rgb(228,204,25)" fg:x="37476" fg:w="16"/><text x="87.7964%" y="431.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::convert::From&lt;&amp;T&gt;&gt;::from (20 samples, 0.05%)</title><rect x="87.6539%" y="405" width="0.0467%" height="15" fill="rgb(207,153,8)" fg:x="37522" fg:w="20"/><text x="87.9039%" y="415.50"></text></g><g><title>__memmove_avx_unaligned_erms (156 samples, 0.36%)</title><rect x="87.7006%" y="405" width="0.3644%" height="15" fill="rgb(242,9,16)" fg:x="37542" fg:w="156"/><text x="87.9506%" y="415.50"></text></g><g><title>__posix_memalign (22 samples, 0.05%)</title><rect x="88.0650%" y="405" width="0.0514%" height="15" fill="rgb(217,211,10)" fg:x="37698" fg:w="22"/><text x="88.3150%" y="415.50"></text></g><g><title>__rdl_alloc (10 samples, 0.02%)</title><rect x="88.1164%" y="405" width="0.0234%" height="15" fill="rgb(219,228,52)" fg:x="37720" fg:w="10"/><text x="88.3664%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (21 samples, 0.05%)</title><rect x="88.1421%" y="405" width="0.0491%" height="15" fill="rgb(231,92,29)" fg:x="37731" fg:w="21"/><text x="88.3921%" y="415.50"></text></g><g><title>alloc::alloc::exchange_malloc (7 samples, 0.02%)</title><rect x="88.1912%" y="405" width="0.0164%" height="15" fill="rgb(232,8,23)" fg:x="37752" fg:w="7"/><text x="88.4412%" y="415.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (30 samples, 0.07%)</title><rect x="88.2075%" y="405" width="0.0701%" height="15" fill="rgb(216,211,34)" fg:x="37759" fg:w="30"/><text x="88.4575%" y="415.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::new (31 samples, 0.07%)</title><rect x="88.2776%" y="405" width="0.0724%" height="15" fill="rgb(236,151,0)" fg:x="37789" fg:w="31"/><text x="88.5276%" y="415.50"></text></g><g><title>tokio::runtime::task::core::Cell&lt;T,S&gt;::new (83 samples, 0.19%)</title><rect x="88.3500%" y="405" width="0.1939%" height="15" fill="rgb(209,168,3)" fg:x="37820" fg:w="83"/><text x="88.6000%" y="415.50"></text></g><g><title>tokio::runtime::task::core::Header::get_id_ptr (29 samples, 0.07%)</title><rect x="88.5439%" y="405" width="0.0677%" height="15" fill="rgb(208,129,28)" fg:x="37903" fg:w="29"/><text x="88.7939%" y="415.50"></text></g><g><title>tokio::runtime::task::core::Header::get_scheduler (34 samples, 0.08%)</title><rect x="88.6117%" y="405" width="0.0794%" height="15" fill="rgb(229,78,22)" fg:x="37932" fg:w="34"/><text x="88.8617%" y="415.50"></text></g><g><title>tokio::runtime::task::core::Header::get_trailer (35 samples, 0.08%)</title><rect x="88.6911%" y="405" width="0.0818%" height="15" fill="rgb(228,187,13)" fg:x="37966" fg:w="35"/><text x="88.9411%" y="415.50"></text></g><g><title>tokio::runtime::task::raw::vtable (7 samples, 0.02%)</title><rect x="88.7729%" y="405" width="0.0164%" height="15" fill="rgb(240,119,24)" fg:x="38001" fg:w="7"/><text x="89.0229%" y="415.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::new (535 samples, 1.25%)</title><rect x="87.5838%" y="421" width="1.2498%" height="15" fill="rgb(209,194,42)" fg:x="37492" fg:w="535"/><text x="87.8338%" y="431.50"></text></g><g><title>tokio::util::linked_list::Pointers&lt;T&gt;::new (19 samples, 0.04%)</title><rect x="88.7892%" y="405" width="0.0444%" height="15" fill="rgb(247,200,46)" fg:x="38008" fg:w="19"/><text x="89.0392%" y="415.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (53 samples, 0.12%)</title><rect x="88.8336%" y="421" width="0.1238%" height="15" fill="rgb(218,76,16)" fg:x="38027" fg:w="53"/><text x="89.0836%" y="431.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::schedule (5 samples, 0.01%)</title><rect x="88.9597%" y="421" width="0.0117%" height="15" fill="rgb(225,21,48)" fg:x="38081" fg:w="5"/><text x="89.2097%" y="431.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::state (20 samples, 0.05%)</title><rect x="88.9714%" y="421" width="0.0467%" height="15" fill="rgb(239,223,50)" fg:x="38086" fg:w="20"/><text x="89.2214%" y="431.50"></text></g><g><title>tokio::runtime::task::raw::poll (41 samples, 0.10%)</title><rect x="89.0205%" y="421" width="0.0958%" height="15" fill="rgb(244,45,21)" fg:x="38107" fg:w="41"/><text x="89.2705%" y="431.50"></text></g><g><title>tokio::runtime::task::raw::schedule (11 samples, 0.03%)</title><rect x="89.1163%" y="421" width="0.0257%" height="15" fill="rgb(232,33,43)" fg:x="38148" fg:w="11"/><text x="89.3663%" y="431.50"></text></g><g><title>tokio::runtime::task::state::Snapshot::is_cancelled (11 samples, 0.03%)</title><rect x="89.1420%" y="421" width="0.0257%" height="15" fill="rgb(209,8,3)" fg:x="38159" fg:w="11"/><text x="89.3920%" y="431.50"></text></g><g><title>tokio::runtime::task::state::Snapshot::is_complete (9 samples, 0.02%)</title><rect x="89.1677%" y="421" width="0.0210%" height="15" fill="rgb(214,25,53)" fg:x="38170" fg:w="9"/><text x="89.4177%" y="431.50"></text></g><g><title>tokio::runtime::task::state::Snapshot::is_notified (26 samples, 0.06%)</title><rect x="89.2027%" y="421" width="0.0607%" height="15" fill="rgb(254,186,54)" fg:x="38185" fg:w="26"/><text x="89.4527%" y="431.50"></text></g><g><title>tokio::runtime::task::state::Snapshot::is_running (19 samples, 0.04%)</title><rect x="89.2634%" y="421" width="0.0444%" height="15" fill="rgb(208,174,49)" fg:x="38211" fg:w="19"/><text x="89.5134%" y="431.50"></text></g><g><title>tokio::runtime::task::state::Snapshot::ref_count (37 samples, 0.09%)</title><rect x="89.3078%" y="421" width="0.0864%" height="15" fill="rgb(233,191,51)" fg:x="38230" fg:w="37"/><text x="89.5578%" y="431.50"></text></g><g><title>tokio::runtime::task::state::Snapshot::ref_dec (49 samples, 0.11%)</title><rect x="89.3943%" y="421" width="0.1145%" height="15" fill="rgb(222,134,10)" fg:x="38267" fg:w="49"/><text x="89.6443%" y="431.50"></text></g><g><title>tokio::runtime::task::state::Snapshot::ref_inc (7 samples, 0.02%)</title><rect x="89.5087%" y="421" width="0.0164%" height="15" fill="rgb(230,226,20)" fg:x="38316" fg:w="7"/><text x="89.7587%" y="431.50"></text></g><g><title>tokio::runtime::task::state::Snapshot::unset_notified (7 samples, 0.02%)</title><rect x="89.5438%" y="421" width="0.0164%" height="15" fill="rgb(251,111,25)" fg:x="38331" fg:w="7"/><text x="89.7938%" y="431.50"></text></g><g><title>tokio::runtime::task::state::State::drop_join_handle_fast (25 samples, 0.06%)</title><rect x="89.5671%" y="421" width="0.0584%" height="15" fill="rgb(224,40,46)" fg:x="38341" fg:w="25"/><text x="89.8171%" y="431.50"></text></g><g><title>tokio::runtime::task::state::State::fetch_update_action (131 samples, 0.31%)</title><rect x="89.6325%" y="421" width="0.3060%" height="15" fill="rgb(236,108,47)" fg:x="38369" fg:w="131"/><text x="89.8825%" y="431.50"></text></g><g><title>tokio::runtime::task::state::State::load (35 samples, 0.08%)</title><rect x="89.9386%" y="421" width="0.0818%" height="15" fill="rgb(234,93,0)" fg:x="38500" fg:w="35"/><text x="90.1886%" y="431.50"></text></g><g><title>tokio::runtime::task::state::State::new (14 samples, 0.03%)</title><rect x="90.0203%" y="421" width="0.0327%" height="15" fill="rgb(224,213,32)" fg:x="38535" fg:w="14"/><text x="90.2703%" y="431.50"></text></g><g><title>tokio::runtime::task::state::State::ref_dec (48 samples, 0.11%)</title><rect x="90.0530%" y="421" width="0.1121%" height="15" fill="rgb(251,11,48)" fg:x="38549" fg:w="48"/><text x="90.3030%" y="431.50"></text></g><g><title>tokio::runtime::task::state::State::ref_inc (19 samples, 0.04%)</title><rect x="90.1652%" y="421" width="0.0444%" height="15" fill="rgb(236,173,5)" fg:x="38597" fg:w="19"/><text x="90.4152%" y="431.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_complete (11 samples, 0.03%)</title><rect x="90.2095%" y="421" width="0.0257%" height="15" fill="rgb(230,95,12)" fg:x="38616" fg:w="11"/><text x="90.4595%" y="431.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_idle (15 samples, 0.04%)</title><rect x="90.2352%" y="421" width="0.0350%" height="15" fill="rgb(232,209,1)" fg:x="38627" fg:w="15"/><text x="90.4852%" y="431.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_idle::{{closure}} (35 samples, 0.08%)</title><rect x="90.2703%" y="421" width="0.0818%" height="15" fill="rgb(232,6,1)" fg:x="38642" fg:w="35"/><text x="90.5203%" y="431.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_notified_by_val::{{closure}} (23 samples, 0.05%)</title><rect x="90.3591%" y="421" width="0.0537%" height="15" fill="rgb(210,224,50)" fg:x="38680" fg:w="23"/><text x="90.6091%" y="431.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_running::{{closure}} (35 samples, 0.08%)</title><rect x="90.4198%" y="421" width="0.0818%" height="15" fill="rgb(228,127,35)" fg:x="38706" fg:w="35"/><text x="90.6698%" y="431.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_terminal (9 samples, 0.02%)</title><rect x="90.5016%" y="421" width="0.0210%" height="15" fill="rgb(245,102,45)" fg:x="38741" fg:w="9"/><text x="90.7516%" y="431.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (53 samples, 0.12%)</title><rect x="90.5249%" y="421" width="0.1238%" height="15" fill="rgb(214,1,49)" fg:x="38751" fg:w="53"/><text x="90.7749%" y="431.50"></text></g><g><title>tokio::runtime::task::waker::drop_waker (16 samples, 0.04%)</title><rect x="90.6487%" y="421" width="0.0374%" height="15" fill="rgb(226,163,40)" fg:x="38804" fg:w="16"/><text x="90.8987%" y="431.50"></text></g><g><title>tokio::runtime::task::waker::raw_waker (16 samples, 0.04%)</title><rect x="90.6861%" y="421" width="0.0374%" height="15" fill="rgb(239,212,28)" fg:x="38820" fg:w="16"/><text x="90.9361%" y="431.50"></text></g><g><title>tokio::runtime::task::waker::waker_ref (50 samples, 0.12%)</title><rect x="90.7305%" y="421" width="0.1168%" height="15" fill="rgb(220,20,13)" fg:x="38839" fg:w="50"/><text x="90.9805%" y="431.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::clear_entry (26 samples, 0.06%)</title><rect x="90.8473%" y="421" width="0.0607%" height="15" fill="rgb(210,164,35)" fg:x="38889" fg:w="26"/><text x="91.0973%" y="431.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time (37 samples, 0.09%)</title><rect x="90.9080%" y="421" width="0.0864%" height="15" fill="rgb(248,109,41)" fg:x="38915" fg:w="37"/><text x="91.1580%" y="431.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::reregister (77 samples, 0.18%)</title><rect x="90.9945%" y="421" width="0.1799%" height="15" fill="rgb(238,23,50)" fg:x="38952" fg:w="77"/><text x="91.2445%" y="431.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::reregister::{{closure}} (11 samples, 0.03%)</title><rect x="91.1743%" y="421" width="0.0257%" height="15" fill="rgb(211,48,49)" fg:x="39029" fg:w="11"/><text x="91.4243%" y="431.50"></text></g><g><title>tokio::runtime::time::Driver::park_internal (7 samples, 0.02%)</title><rect x="91.2000%" y="421" width="0.0164%" height="15" fill="rgb(223,36,21)" fg:x="39040" fg:w="7"/><text x="91.4500%" y="431.50"></text></g><g><title>tokio::runtime::time::Inner::is_shutdown (26 samples, 0.06%)</title><rect x="91.2234%" y="421" width="0.0607%" height="15" fill="rgb(207,123,46)" fg:x="39050" fg:w="26"/><text x="91.4734%" y="431.50"></text></g><g><title>tokio::runtime::time::Inner::lock (7 samples, 0.02%)</title><rect x="91.2841%" y="421" width="0.0164%" height="15" fill="rgb(240,218,32)" fg:x="39076" fg:w="7"/><text x="91.5341%" y="431.50"></text></g><g><title>tokio::runtime::time::entry::StateCell::extend_expiration (17 samples, 0.04%)</title><rect x="91.3005%" y="421" width="0.0397%" height="15" fill="rgb(252,5,43)" fg:x="39083" fg:w="17"/><text x="91.5505%" y="431.50"></text></g><g><title>tokio::runtime::time::entry::StateCell::fire (14 samples, 0.03%)</title><rect x="91.3402%" y="421" width="0.0327%" height="15" fill="rgb(252,84,19)" fg:x="39100" fg:w="14"/><text x="91.5902%" y="431.50"></text></g><g><title>tokio::runtime::time::entry::StateCell::fire::{{closure}} (6 samples, 0.01%)</title><rect x="91.3729%" y="421" width="0.0140%" height="15" fill="rgb(243,152,39)" fg:x="39114" fg:w="6"/><text x="91.6229%" y="431.50"></text></g><g><title>tokio::runtime::time::entry::StateCell::mark_pending (6 samples, 0.01%)</title><rect x="91.3916%" y="421" width="0.0140%" height="15" fill="rgb(234,160,15)" fg:x="39122" fg:w="6"/><text x="91.6416%" y="431.50"></text></g><g><title>tokio::runtime::time::entry::StateCell::new (12 samples, 0.03%)</title><rect x="91.4103%" y="421" width="0.0280%" height="15" fill="rgb(237,34,20)" fg:x="39130" fg:w="12"/><text x="91.6603%" y="431.50"></text></g><g><title>tokio::runtime::time::entry::StateCell::poll (14 samples, 0.03%)</title><rect x="91.4383%" y="421" width="0.0327%" height="15" fill="rgb(229,97,13)" fg:x="39142" fg:w="14"/><text x="91.6883%" y="431.50"></text></g><g><title>tokio::runtime::time::entry::StateCell::read_state (25 samples, 0.06%)</title><rect x="91.4710%" y="421" width="0.0584%" height="15" fill="rgb(234,71,50)" fg:x="39156" fg:w="25"/><text x="91.7210%" y="431.50"></text></g><g><title>tokio::runtime::time::entry::StateCell::set_expiration (12 samples, 0.03%)</title><rect x="91.5364%" y="421" width="0.0280%" height="15" fill="rgb(253,155,4)" fg:x="39184" fg:w="12"/><text x="91.7864%" y="431.50"></text></g><g><title>tokio::runtime::time::entry::StateCell::when (13 samples, 0.03%)</title><rect x="91.5645%" y="421" width="0.0304%" height="15" fill="rgb(222,185,37)" fg:x="39196" fg:w="13"/><text x="91.8145%" y="431.50"></text></g><g><title>tokio::runtime::time::entry::TimerEntry::driver (34 samples, 0.08%)</title><rect x="91.6042%" y="421" width="0.0794%" height="15" fill="rgb(251,177,13)" fg:x="39213" fg:w="34"/><text x="91.8542%" y="431.50"></text></g><g><title>tokio::runtime::time::entry::TimerEntry::inner (32 samples, 0.07%)</title><rect x="91.6836%" y="421" width="0.0748%" height="15" fill="rgb(250,179,40)" fg:x="39247" fg:w="32"/><text x="91.9336%" y="431.50"></text></g><g><title>tokio::runtime::time::entry::TimerEntry::new (24 samples, 0.06%)</title><rect x="91.7584%" y="421" width="0.0561%" height="15" fill="rgb(242,44,2)" fg:x="39279" fg:w="24"/><text x="92.0084%" y="431.50"></text></g><g><title>tokio::runtime::time::entry::TimerEntry::poll_elapsed (53 samples, 0.12%)</title><rect x="91.8144%" y="421" width="0.1238%" height="15" fill="rgb(216,177,13)" fg:x="39303" fg:w="53"/><text x="92.0644%" y="431.50"></text></g><g><title>tokio::runtime::time::entry::TimerEntry::reset (48 samples, 0.11%)</title><rect x="91.9382%" y="421" width="0.1121%" height="15" fill="rgb(216,106,43)" fg:x="39356" fg:w="48"/><text x="92.1882%" y="431.50"></text></g><g><title>tokio::runtime::time::entry::TimerHandle::cached_when (15 samples, 0.04%)</title><rect x="92.0504%" y="421" width="0.0350%" height="15" fill="rgb(216,183,2)" fg:x="39404" fg:w="15"/><text x="92.3004%" y="431.50"></text></g><g><title>tokio::runtime::time::entry::TimerHandle::fire (11 samples, 0.03%)</title><rect x="92.0854%" y="421" width="0.0257%" height="15" fill="rgb(249,75,3)" fg:x="39419" fg:w="11"/><text x="92.3354%" y="431.50"></text></g><g><title>tokio::runtime::time::entry::TimerHandle::is_pending (5 samples, 0.01%)</title><rect x="92.1111%" y="421" width="0.0117%" height="15" fill="rgb(219,67,39)" fg:x="39430" fg:w="5"/><text x="92.3611%" y="431.50"></text></g><g><title>tokio::runtime::time::entry::TimerHandle::mark_pending (7 samples, 0.02%)</title><rect x="92.1228%" y="421" width="0.0164%" height="15" fill="rgb(253,228,2)" fg:x="39435" fg:w="7"/><text x="92.3728%" y="431.50"></text></g><g><title>tokio::runtime::time::entry::TimerHandle::set_expiration (5 samples, 0.01%)</title><rect x="92.1391%" y="421" width="0.0117%" height="15" fill="rgb(235,138,27)" fg:x="39442" fg:w="5"/><text x="92.3891%" y="431.50"></text></g><g><title>tokio::runtime::time::entry::TimerHandle::sync_when (21 samples, 0.05%)</title><rect x="92.1508%" y="421" width="0.0491%" height="15" fill="rgb(236,97,51)" fg:x="39447" fg:w="21"/><text x="92.4008%" y="431.50"></text></g><g><title>tokio::runtime::time::entry::TimerShared::addr_of_pointers (64 samples, 0.15%)</title><rect x="92.1999%" y="421" width="0.1495%" height="15" fill="rgb(240,80,30)" fg:x="39468" fg:w="64"/><text x="92.4499%" y="431.50"></text></g><g><title>tokio::runtime::time::entry::TimerShared::extend_expiration (12 samples, 0.03%)</title><rect x="92.3541%" y="421" width="0.0280%" height="15" fill="rgb(230,178,19)" fg:x="39534" fg:w="12"/><text x="92.6041%" y="431.50"></text></g><g><title>tokio::runtime::time::entry::TimerShared::handle (10 samples, 0.02%)</title><rect x="92.3821%" y="421" width="0.0234%" height="15" fill="rgb(210,190,27)" fg:x="39546" fg:w="10"/><text x="92.6321%" y="431.50"></text></g><g><title>tokio::runtime::time::entry::TimerShared::might_be_registered (5 samples, 0.01%)</title><rect x="92.4054%" y="421" width="0.0117%" height="15" fill="rgb(222,107,31)" fg:x="39556" fg:w="5"/><text x="92.6554%" y="431.50"></text></g><g><title>tokio::runtime::time::entry::TimerShared::new (13 samples, 0.03%)</title><rect x="92.4171%" y="421" width="0.0304%" height="15" fill="rgb(216,127,34)" fg:x="39561" fg:w="13"/><text x="92.6671%" y="431.50"></text></g><g><title>tokio::runtime::time::entry::TimerShared::set_expiration (9 samples, 0.02%)</title><rect x="92.4498%" y="421" width="0.0210%" height="15" fill="rgb(234,116,52)" fg:x="39575" fg:w="9"/><text x="92.6998%" y="431.50"></text></g><g><title>tokio::runtime::time::entry::TimerShared::sync_when (6 samples, 0.01%)</title><rect x="92.4709%" y="421" width="0.0140%" height="15" fill="rgb(222,124,15)" fg:x="39584" fg:w="6"/><text x="92.7209%" y="431.50"></text></g><g><title>tokio::runtime::time::handle::Handle::is_shutdown (9 samples, 0.02%)</title><rect x="92.4895%" y="421" width="0.0210%" height="15" fill="rgb(231,179,28)" fg:x="39592" fg:w="9"/><text x="92.7395%" y="431.50"></text></g><g><title>tokio::runtime::time::handle::Handle::time_source (7 samples, 0.02%)</title><rect x="92.5106%" y="421" width="0.0164%" height="15" fill="rgb(226,93,45)" fg:x="39601" fg:w="7"/><text x="92.7606%" y="431.50"></text></g><g><title>tokio::runtime::time::source::TimeSource::deadline_to_tick (15 samples, 0.04%)</title><rect x="92.5269%" y="421" width="0.0350%" height="15" fill="rgb(215,8,51)" fg:x="39608" fg:w="15"/><text x="92.7769%" y="431.50"></text></g><g><title>tokio::runtime::time::source::TimeSource::instant_to_tick (10 samples, 0.02%)</title><rect x="92.5620%" y="421" width="0.0234%" height="15" fill="rgb(223,106,5)" fg:x="39623" fg:w="10"/><text x="92.8120%" y="431.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::insert (33 samples, 0.08%)</title><rect x="92.5900%" y="421" width="0.0771%" height="15" fill="rgb(250,191,5)" fg:x="39635" fg:w="33"/><text x="92.8400%" y="431.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::level_for (11 samples, 0.03%)</title><rect x="92.6764%" y="421" width="0.0257%" height="15" fill="rgb(242,132,44)" fg:x="39672" fg:w="11"/><text x="92.9264%" y="431.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::poll (19 samples, 0.04%)</title><rect x="92.7115%" y="421" width="0.0444%" height="15" fill="rgb(251,152,29)" fg:x="39687" fg:w="19"/><text x="92.9615%" y="431.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::process_expiration (21 samples, 0.05%)</title><rect x="92.7559%" y="421" width="0.0491%" height="15" fill="rgb(218,179,5)" fg:x="39706" fg:w="21"/><text x="93.0059%" y="431.50"></text></g><g><title>tokio::runtime::time::wheel::level::Level::add_entry (17 samples, 0.04%)</title><rect x="92.8049%" y="421" width="0.0397%" height="15" fill="rgb(227,67,19)" fg:x="39727" fg:w="17"/><text x="93.0549%" y="431.50"></text></g><g><title>tokio::runtime::time::wheel::level::Level::next_expiration (38 samples, 0.09%)</title><rect x="92.8446%" y="421" width="0.0888%" height="15" fill="rgb(233,119,31)" fg:x="39744" fg:w="38"/><text x="93.0946%" y="431.50"></text></g><g><title>tokio::runtime::time::wheel::level::Level::next_occupied_slot (91 samples, 0.21%)</title><rect x="92.9334%" y="421" width="0.2126%" height="15" fill="rgb(241,120,22)" fg:x="39782" fg:w="91"/><text x="93.1834%" y="431.50"></text></g><g><title>tokio::runtime::time::wheel::level::level_range (6 samples, 0.01%)</title><rect x="93.1460%" y="421" width="0.0140%" height="15" fill="rgb(224,102,30)" fg:x="39873" fg:w="6"/><text x="93.3960%" y="431.50"></text></g><g><title>tokio::runtime::time::wheel::level::slot_for (9 samples, 0.02%)</title><rect x="93.1623%" y="421" width="0.0210%" height="15" fill="rgb(210,164,37)" fg:x="39880" fg:w="9"/><text x="93.4123%" y="431.50"></text></g><g><title>tokio::runtime::time::wheel::level::slot_range (5 samples, 0.01%)</title><rect x="93.1834%" y="421" width="0.0117%" height="15" fill="rgb(226,191,16)" fg:x="39889" fg:w="5"/><text x="93.4334%" y="431.50"></text></g><g><title>tokio::runtime::time::wheel::level_for (44 samples, 0.10%)</title><rect x="93.1950%" y="421" width="0.1028%" height="15" fill="rgb(214,40,45)" fg:x="39894" fg:w="44"/><text x="93.4450%" y="431.50"></text></g><g><title>tokio::sync::batch_semaphore::Acquire::new (9 samples, 0.02%)</title><rect x="93.2978%" y="421" width="0.0210%" height="15" fill="rgb(244,29,26)" fg:x="39938" fg:w="9"/><text x="93.5478%" y="431.50"></text></g><g><title>tokio::sync::batch_semaphore::Acquire::project (5 samples, 0.01%)</title><rect x="93.3188%" y="421" width="0.0117%" height="15" fill="rgb(216,16,5)" fg:x="39947" fg:w="5"/><text x="93.5688%" y="431.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::add_permits_locked (47 samples, 0.11%)</title><rect x="93.3329%" y="421" width="0.1098%" height="15" fill="rgb(249,76,35)" fg:x="39953" fg:w="47"/><text x="93.5829%" y="431.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::poll_acquire (12 samples, 0.03%)</title><rect x="93.4427%" y="421" width="0.0280%" height="15" fill="rgb(207,11,44)" fg:x="40000" fg:w="12"/><text x="93.6927%" y="431.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::release (7 samples, 0.02%)</title><rect x="93.4707%" y="421" width="0.0164%" height="15" fill="rgb(228,190,49)" fg:x="40012" fg:w="7"/><text x="93.7207%" y="431.50"></text></g><g><title>tokio::sync::batch_semaphore::Waiter::new (7 samples, 0.02%)</title><rect x="93.4870%" y="421" width="0.0164%" height="15" fill="rgb(214,173,12)" fg:x="40019" fg:w="7"/><text x="93.7370%" y="431.50"></text></g><g><title>tokio::sync::broadcast::Receiver&lt;T&gt;::recv (6 samples, 0.01%)</title><rect x="93.5034%" y="421" width="0.0140%" height="15" fill="rgb(218,26,35)" fg:x="40026" fg:w="6"/><text x="93.7534%" y="431.50"></text></g><g><title>tokio::sync::broadcast::Receiver&lt;T&gt;::recv::{{closure}} (14 samples, 0.03%)</title><rect x="93.5174%" y="421" width="0.0327%" height="15" fill="rgb(220,200,19)" fg:x="40032" fg:w="14"/><text x="93.7674%" y="431.50"></text></g><g><title>tokio::sync::broadcast::Receiver&lt;T&gt;::recv_ref (22 samples, 0.05%)</title><rect x="93.5501%" y="421" width="0.0514%" height="15" fill="rgb(239,95,49)" fg:x="40046" fg:w="22"/><text x="93.8001%" y="431.50"></text></g><g><title>tokio::sync::broadcast::Receiver&lt;T&gt;::recv_ref::{{closure}} (9 samples, 0.02%)</title><rect x="93.6015%" y="421" width="0.0210%" height="15" fill="rgb(235,85,53)" fg:x="40068" fg:w="9"/><text x="93.8515%" y="431.50"></text></g><g><title>tokio::sync::broadcast::Sender&lt;T&gt;::subscribe (5 samples, 0.01%)</title><rect x="93.6342%" y="421" width="0.0117%" height="15" fill="rgb(233,133,31)" fg:x="40082" fg:w="5"/><text x="93.8842%" y="431.50"></text></g><g><title>tokio::sync::broadcast::Waiter::addr_of_pointers (5 samples, 0.01%)</title><rect x="93.6459%" y="421" width="0.0117%" height="15" fill="rgb(218,25,20)" fg:x="40087" fg:w="5"/><text x="93.8959%" y="431.50"></text></g><g><title>tokio::sync::broadcast::new_receiver (9 samples, 0.02%)</title><rect x="93.6576%" y="421" width="0.0210%" height="15" fill="rgb(252,210,38)" fg:x="40092" fg:w="9"/><text x="93.9076%" y="431.50"></text></g><g><title>tokio::sync::mpsc::block::Block&lt;T&gt;::distance (35 samples, 0.08%)</title><rect x="93.6786%" y="421" width="0.0818%" height="15" fill="rgb(242,134,21)" fg:x="40101" fg:w="35"/><text x="93.9286%" y="431.50"></text></g><g><title>tokio::sync::mpsc::block::Block&lt;T&gt;::is_at_index (237 samples, 0.55%)</title><rect x="93.7604%" y="421" width="0.5536%" height="15" fill="rgb(213,28,48)" fg:x="40136" fg:w="237"/><text x="94.0104%" y="431.50"></text></g><g><title>tokio::sync::mpsc::block::Block&lt;T&gt;::read (62 samples, 0.14%)</title><rect x="94.3187%" y="421" width="0.1448%" height="15" fill="rgb(250,196,2)" fg:x="40375" fg:w="62"/><text x="94.5687%" y="431.50"></text></g><g><title>tokio::sync::mpsc::block::Block&lt;T&gt;::write (5 samples, 0.01%)</title><rect x="94.4729%" y="421" width="0.0117%" height="15" fill="rgb(227,5,17)" fg:x="40441" fg:w="5"/><text x="94.7229%" y="431.50"></text></g><g><title>tokio::sync::mpsc::block::is_ready (27 samples, 0.06%)</title><rect x="94.4845%" y="421" width="0.0631%" height="15" fill="rgb(221,226,24)" fg:x="40446" fg:w="27"/><text x="94.7345%" y="431.50"></text></g><g><title>tokio::sync::mpsc::block::is_tx_closed (19 samples, 0.04%)</title><rect x="94.5476%" y="421" width="0.0444%" height="15" fill="rgb(211,5,48)" fg:x="40473" fg:w="19"/><text x="94.7976%" y="431.50"></text></g><g><title>tokio::sync::mpsc::bounded::Receiver&lt;T&gt;::recv (12 samples, 0.03%)</title><rect x="94.5967%" y="421" width="0.0280%" height="15" fill="rgb(219,150,6)" fg:x="40494" fg:w="12"/><text x="94.8467%" y="431.50"></text></g><g><title>tokio::sync::mpsc::bounded::Receiver&lt;T&gt;::recv::{{closure}} (108 samples, 0.25%)</title><rect x="94.6247%" y="421" width="0.2523%" height="15" fill="rgb(251,46,16)" fg:x="40506" fg:w="108"/><text x="94.8747%" y="431.50"></text></g><g><title>tokio::sync::mpsc::bounded::Receiver&lt;T&gt;::recv::{{closure}}::{{closure}} (6 samples, 0.01%)</title><rect x="94.8770%" y="421" width="0.0140%" height="15" fill="rgb(220,204,40)" fg:x="40614" fg:w="6"/><text x="95.1270%" y="431.50"></text></g><g><title>tokio::sync::mpsc::bounded::Receiver&lt;T&gt;::try_recv (25 samples, 0.06%)</title><rect x="94.8910%" y="421" width="0.0584%" height="15" fill="rgb(211,85,2)" fg:x="40620" fg:w="25"/><text x="95.1410%" y="431.50"></text></g><g><title>tokio::sync::mpsc::bounded::Sender&lt;T&gt;::reserve::{{closure}} (12 samples, 0.03%)</title><rect x="94.9494%" y="421" width="0.0280%" height="15" fill="rgb(229,17,7)" fg:x="40645" fg:w="12"/><text x="95.1994%" y="431.50"></text></g><g><title>tokio::sync::mpsc::bounded::Sender&lt;T&gt;::reserve_inner::{{closure}} (9 samples, 0.02%)</title><rect x="94.9798%" y="421" width="0.0210%" height="15" fill="rgb(239,72,28)" fg:x="40658" fg:w="9"/><text x="95.2298%" y="431.50"></text></g><g><title>tokio::sync::mpsc::bounded::Sender&lt;T&gt;::send (5 samples, 0.01%)</title><rect x="95.0008%" y="421" width="0.0117%" height="15" fill="rgb(230,47,54)" fg:x="40667" fg:w="5"/><text x="95.2508%" y="431.50"></text></g><g><title>tokio::sync::mpsc::bounded::Sender&lt;T&gt;::send::{{closure}} (26 samples, 0.06%)</title><rect x="95.0125%" y="421" width="0.0607%" height="15" fill="rgb(214,50,8)" fg:x="40672" fg:w="26"/><text x="95.2625%" y="431.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (44 samples, 0.10%)</title><rect x="95.0779%" y="421" width="0.1028%" height="15" fill="rgb(216,198,43)" fg:x="40700" fg:w="44"/><text x="95.3279%" y="431.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv::{{closure}} (60 samples, 0.14%)</title><rect x="95.1807%" y="421" width="0.1402%" height="15" fill="rgb(234,20,35)" fg:x="40744" fg:w="60"/><text x="95.4307%" y="431.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::try_recv (17 samples, 0.04%)</title><rect x="95.3209%" y="421" width="0.0397%" height="15" fill="rgb(254,45,19)" fg:x="40804" fg:w="17"/><text x="95.5709%" y="431.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::try_recv::{{closure}} (44 samples, 0.10%)</title><rect x="95.3606%" y="421" width="0.1028%" height="15" fill="rgb(219,14,44)" fg:x="40821" fg:w="44"/><text x="95.6106%" y="431.50"></text></g><g><title>tokio::sync::mpsc::chan::Tx&lt;T,S&gt;::send (5 samples, 0.01%)</title><rect x="95.4657%" y="421" width="0.0117%" height="15" fill="rgb(217,220,26)" fg:x="40866" fg:w="5"/><text x="95.7157%" y="431.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (51 samples, 0.12%)</title><rect x="95.4774%" y="421" width="0.1191%" height="15" fill="rgb(213,158,28)" fg:x="40871" fg:w="51"/><text x="95.7274%" y="431.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::reclaim_blocks (21 samples, 0.05%)</title><rect x="95.5965%" y="421" width="0.0491%" height="15" fill="rgb(252,51,52)" fg:x="40922" fg:w="21"/><text x="95.8465%" y="431.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::try_advancing_head (277 samples, 0.65%)</title><rect x="95.6456%" y="421" width="0.6471%" height="15" fill="rgb(246,89,16)" fg:x="40943" fg:w="277"/><text x="95.8956%" y="431.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::try_pop (29 samples, 0.07%)</title><rect x="96.2927%" y="421" width="0.0677%" height="15" fill="rgb(216,158,49)" fg:x="41220" fg:w="29"/><text x="96.5427%" y="431.50"></text></g><g><title>tokio::sync::mpsc::list::Tx&lt;T&gt;::find_block (5 samples, 0.01%)</title><rect x="96.3604%" y="421" width="0.0117%" height="15" fill="rgb(236,107,19)" fg:x="41249" fg:w="5"/><text x="96.6104%" y="431.50"></text></g><g><title>tokio::sync::mpsc::list::Tx&lt;T&gt;::push (7 samples, 0.02%)</title><rect x="96.3721%" y="421" width="0.0164%" height="15" fill="rgb(228,185,30)" fg:x="41254" fg:w="7"/><text x="96.6221%" y="431.50"></text></g><g><title>tokio::sync::notify::AtomicNotification::load (7 samples, 0.02%)</title><rect x="96.3931%" y="421" width="0.0164%" height="15" fill="rgb(246,134,8)" fg:x="41263" fg:w="7"/><text x="96.6431%" y="431.50"></text></g><g><title>tokio::sync::notify::Notified::poll_notified (37 samples, 0.09%)</title><rect x="96.4188%" y="421" width="0.0864%" height="15" fill="rgb(214,143,50)" fg:x="41274" fg:w="37"/><text x="96.6688%" y="431.50"></text></g><g><title>tokio::sync::notify::Notified::poll_notified::{{closure}} (9 samples, 0.02%)</title><rect x="96.5052%" y="421" width="0.0210%" height="15" fill="rgb(228,75,8)" fg:x="41311" fg:w="9"/><text x="96.7552%" y="431.50"></text></g><g><title>tokio::sync::notify::Notified::project (15 samples, 0.04%)</title><rect x="96.5263%" y="421" width="0.0350%" height="15" fill="rgb(207,175,4)" fg:x="41320" fg:w="15"/><text x="96.7763%" y="431.50"></text></g><g><title>tokio::sync::notify::Notify::notified (8 samples, 0.02%)</title><rect x="96.5636%" y="421" width="0.0187%" height="15" fill="rgb(205,108,24)" fg:x="41336" fg:w="8"/><text x="96.8136%" y="431.50"></text></g><g><title>tokio::sync::notify::Notify::notify_one (10 samples, 0.02%)</title><rect x="96.5823%" y="421" width="0.0234%" height="15" fill="rgb(244,120,49)" fg:x="41344" fg:w="10"/><text x="96.8323%" y="431.50"></text></g><g><title>tokio::sync::notify::Waiter::addr_of_pointers (7 samples, 0.02%)</title><rect x="96.6057%" y="421" width="0.0164%" height="15" fill="rgb(223,47,38)" fg:x="41354" fg:w="7"/><text x="96.8557%" y="431.50"></text></g><g><title>tokio::sync::notify::notify_locked (13 samples, 0.03%)</title><rect x="96.6337%" y="421" width="0.0304%" height="15" fill="rgb(229,179,11)" fg:x="41366" fg:w="13"/><text x="96.8837%" y="431.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::do_register (200 samples, 0.47%)</title><rect x="96.6758%" y="421" width="0.4672%" height="15" fill="rgb(231,122,1)" fg:x="41384" fg:w="200"/><text x="96.9258%" y="431.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::do_register::catch_unwind (28 samples, 0.07%)</title><rect x="97.1430%" y="421" width="0.0654%" height="15" fill="rgb(245,119,9)" fg:x="41584" fg:w="28"/><text x="97.3930%" y="431.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::do_register::{{closure}} (84 samples, 0.20%)</title><rect x="97.2084%" y="421" width="0.1962%" height="15" fill="rgb(241,163,25)" fg:x="41612" fg:w="84"/><text x="97.4584%" y="431.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::new (21 samples, 0.05%)</title><rect x="97.4070%" y="421" width="0.0491%" height="15" fill="rgb(217,214,3)" fg:x="41697" fg:w="21"/><text x="97.6570%" y="431.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::register_by_ref (34 samples, 0.08%)</title><rect x="97.4560%" y="421" width="0.0794%" height="15" fill="rgb(240,86,28)" fg:x="41718" fg:w="34"/><text x="97.7060%" y="431.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::take_waker (8 samples, 0.02%)</title><rect x="97.5354%" y="421" width="0.0187%" height="15" fill="rgb(215,47,9)" fg:x="41752" fg:w="8"/><text x="97.7854%" y="431.50"></text></g><g><title>tokio::task::spawn::spawn (14 samples, 0.03%)</title><rect x="97.5682%" y="421" width="0.0327%" height="15" fill="rgb(252,25,45)" fg:x="41766" fg:w="14"/><text x="97.8182%" y="431.50"></text></g><g><title>tokio::task::spawn::spawn_inner (37 samples, 0.09%)</title><rect x="97.6009%" y="421" width="0.0864%" height="15" fill="rgb(251,164,9)" fg:x="41780" fg:w="37"/><text x="97.8509%" y="431.50"></text></g><g><title>tokio::task::spawn::spawn_inner::{{closure}} (22 samples, 0.05%)</title><rect x="97.6873%" y="421" width="0.0514%" height="15" fill="rgb(233,194,0)" fg:x="41817" fg:w="22"/><text x="97.9373%" y="431.50"></text></g><g><title>tokio::time::instant::Instant::checked_add (6 samples, 0.01%)</title><rect x="97.7387%" y="421" width="0.0140%" height="15" fill="rgb(249,111,24)" fg:x="41839" fg:w="6"/><text x="97.9887%" y="431.50"></text></g><g><title>tokio::time::instant::Instant::checked_duration_since (9 samples, 0.02%)</title><rect x="97.7527%" y="421" width="0.0210%" height="15" fill="rgb(250,223,3)" fg:x="41845" fg:w="9"/><text x="98.0027%" y="431.50"></text></g><g><title>tokio::time::instant::Instant::from_std (19 samples, 0.04%)</title><rect x="97.7737%" y="421" width="0.0444%" height="15" fill="rgb(236,178,37)" fg:x="41854" fg:w="19"/><text x="98.0237%" y="431.50"></text></g><g><title>tokio::time::instant::Instant::now (14 samples, 0.03%)</title><rect x="97.8181%" y="421" width="0.0327%" height="15" fill="rgb(241,158,50)" fg:x="41873" fg:w="14"/><text x="98.0681%" y="431.50"></text></g><g><title>tokio::time::instant::variant::now (7 samples, 0.02%)</title><rect x="97.8508%" y="421" width="0.0164%" height="15" fill="rgb(213,121,41)" fg:x="41887" fg:w="7"/><text x="98.1008%" y="431.50"></text></g><g><title>tokio::time::sleep::Sleep::new_timeout (30 samples, 0.07%)</title><rect x="97.8672%" y="421" width="0.0701%" height="15" fill="rgb(240,92,3)" fg:x="41894" fg:w="30"/><text x="98.1172%" y="431.50"></text></g><g><title>tokio::time::sleep::Sleep::poll_elapsed (52 samples, 0.12%)</title><rect x="97.9373%" y="421" width="0.1215%" height="15" fill="rgb(205,123,3)" fg:x="41924" fg:w="52"/><text x="98.1873%" y="431.50"></text></g><g><title>tokio::time::sleep::Sleep::poll_elapsed::{{closure}} (7 samples, 0.02%)</title><rect x="98.0587%" y="421" width="0.0164%" height="15" fill="rgb(205,97,47)" fg:x="41976" fg:w="7"/><text x="98.3087%" y="431.50"></text></g><g><title>tokio::time::sleep::_::&lt;impl tokio::time::sleep::Sleep&gt;::project (17 samples, 0.04%)</title><rect x="98.0751%" y="421" width="0.0397%" height="15" fill="rgb(247,152,14)" fg:x="41983" fg:w="17"/><text x="98.3251%" y="431.50"></text></g><g><title>tokio::time::timeout::Timeout&lt;T&gt;::new_with_delay (10 samples, 0.02%)</title><rect x="98.1148%" y="421" width="0.0234%" height="15" fill="rgb(248,195,53)" fg:x="42000" fg:w="10"/><text x="98.3648%" y="431.50"></text></g><g><title>tokio::time::timeout::_::&lt;impl tokio::time::timeout::Timeout&lt;T&gt;&gt;::project (11 samples, 0.03%)</title><rect x="98.1382%" y="421" width="0.0257%" height="15" fill="rgb(226,201,16)" fg:x="42010" fg:w="11"/><text x="98.3882%" y="431.50"></text></g><g><title>tokio::time::timeout::timeout (46 samples, 0.11%)</title><rect x="98.1639%" y="421" width="0.1075%" height="15" fill="rgb(205,98,0)" fg:x="42021" fg:w="46"/><text x="98.4139%" y="431.50"></text></g><g><title>tokio::util::linked_list::CountedLinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::push_front (29 samples, 0.07%)</title><rect x="98.2713%" y="421" width="0.0677%" height="15" fill="rgb(214,191,48)" fg:x="42067" fg:w="29"/><text x="98.5213%" y="431.50"></text></g><g><title>tokio::util::linked_list::CountedLinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::remove (9 samples, 0.02%)</title><rect x="98.3391%" y="421" width="0.0210%" height="15" fill="rgb(237,112,39)" fg:x="42096" fg:w="9"/><text x="98.5891%" y="431.50"></text></g><g><title>tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::is_empty (6 samples, 0.01%)</title><rect x="98.3601%" y="421" width="0.0140%" height="15" fill="rgb(247,203,27)" fg:x="42105" fg:w="6"/><text x="98.6101%" y="431.50"></text></g><g><title>tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::last (14 samples, 0.03%)</title><rect x="98.3741%" y="421" width="0.0327%" height="15" fill="rgb(235,124,28)" fg:x="42111" fg:w="14"/><text x="98.6241%" y="431.50"></text></g><g><title>tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::pop_back (108 samples, 0.25%)</title><rect x="98.4068%" y="421" width="0.2523%" height="15" fill="rgb(208,207,46)" fg:x="42125" fg:w="108"/><text x="98.6568%" y="431.50"></text></g><g><title>tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::push_front (133 samples, 0.31%)</title><rect x="98.6591%" y="421" width="0.3107%" height="15" fill="rgb(234,176,4)" fg:x="42233" fg:w="133"/><text x="98.9091%" y="431.50"></text></g><g><title>tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::remove (69 samples, 0.16%)</title><rect x="98.9698%" y="421" width="0.1612%" height="15" fill="rgb(230,133,28)" fg:x="42366" fg:w="69"/><text x="99.2198%" y="431.50"></text></g><g><title>tokio::util::linked_list::Pointers&lt;T&gt;::get_next (14 samples, 0.03%)</title><rect x="99.1333%" y="421" width="0.0327%" height="15" fill="rgb(211,137,40)" fg:x="42436" fg:w="14"/><text x="99.3833%" y="431.50"></text></g><g><title>tokio::util::linked_list::Pointers&lt;T&gt;::get_prev (33 samples, 0.08%)</title><rect x="99.1660%" y="421" width="0.0771%" height="15" fill="rgb(254,35,13)" fg:x="42450" fg:w="33"/><text x="99.4160%" y="431.50"></text></g><g><title>tokio::util::linked_list::Pointers&lt;T&gt;::new (20 samples, 0.05%)</title><rect x="99.2431%" y="421" width="0.0467%" height="15" fill="rgb(225,49,51)" fg:x="42483" fg:w="20"/><text x="99.4931%" y="431.50"></text></g><g><title>tokio::util::linked_list::Pointers&lt;T&gt;::set_next (78 samples, 0.18%)</title><rect x="99.2898%" y="421" width="0.1822%" height="15" fill="rgb(251,10,15)" fg:x="42503" fg:w="78"/><text x="99.5398%" y="431.50"></text></g><g><title>tokio::util::linked_list::Pointers&lt;T&gt;::set_prev (73 samples, 0.17%)</title><rect x="99.4720%" y="421" width="0.1705%" height="15" fill="rgb(228,207,15)" fg:x="42581" fg:w="73"/><text x="99.7220%" y="431.50"></text></g><g><title>tokio::util::rand::FastRand::fastrand (5 samples, 0.01%)</title><rect x="99.6426%" y="421" width="0.0117%" height="15" fill="rgb(241,99,19)" fg:x="42654" fg:w="5"/><text x="99.8926%" y="431.50"></text></g><g><title>tokio::util::rand::FastRand::fastrand_n (6 samples, 0.01%)</title><rect x="99.6543%" y="421" width="0.0140%" height="15" fill="rgb(207,104,49)" fg:x="42659" fg:w="6"/><text x="99.9043%" y="431.50"></text></g><g><title>tokio::util::trace::task (13 samples, 0.03%)</title><rect x="99.6776%" y="421" width="0.0304%" height="15" fill="rgb(234,99,18)" fg:x="42669" fg:w="13"/><text x="99.9276%" y="431.50"></text></g><g><title>tokio::util::wake_list::WakeList::new (13 samples, 0.03%)</title><rect x="99.7080%" y="421" width="0.0304%" height="15" fill="rgb(213,191,49)" fg:x="42682" fg:w="13"/><text x="99.9580%" y="431.50"></text></g><g><title>all (42,807 samples, 100%)</title><rect x="0.0000%" y="453" width="100.0000%" height="15" fill="rgb(210,226,19)" fg:x="0" fg:w="42807"/><text x="0.2500%" y="463.50"></text></g><g><title>simulations::tc (42,706 samples, 99.76%)</title><rect x="0.2359%" y="437" width="99.7641%" height="15" fill="rgb(229,97,18)" fg:x="101" fg:w="42706"/><text x="0.4859%" y="447.50">simulations::tc</text></g><g><title>unlink_chunk.constprop.0 (110 samples, 0.26%)</title><rect x="99.7430%" y="421" width="0.2570%" height="15" fill="rgb(211,167,15)" fg:x="42697" fg:w="110"/><text x="99.9930%" y="431.50"></text></g></svg></svg>